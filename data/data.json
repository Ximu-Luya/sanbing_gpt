[
  {
    "url": "/mtd/react/components/tabs",
    "content": [
      "---\norder: 9\ntitle: 位置\n---\n\n使用`tabBarPosition`属性控制选项卡位置，标签过多超过容器宽度时，显示滚动切换按钮，使用`onPrevClick`方法和`onNextClick`方法指定向前和向后翻页触发的函数。\n\n```jsx\nimport {useState} from 'react';\nimport { Tabs, Radio } from '@ss/mtd-react';\nconst { TabPane } = Tabs;\nconst CONTENTS = \"Tabs 1 \" + \"contentTabs 1 \".repeat(31*10) + \"content\";\n\nconst Demo = (props) => {\n  const [value, setValue] = useState('top');\n  const [size, setSize] = useState('normal');\n  const [type, setType] = useState('editable-card');\n\n  const handleRadioChange = value => setValue(value);\n  const handlePrevClick = () => console.log('click prev');\n  const handleNextClick = () => console.log('click next');\n\n  return (\n      <div>\n         <Radio.Group value={value} onChange={handleRadioChange} style={{ marginRight: '20px' }}>\n            <Radio value=\"top\">top</Radio>\n            <Radio value=\"left\">left</Radio>\n            <Radio value=\"bottom\">bottom</Radio>\n            <Radio value=\"right\">right</Radio>\n        </Radio.Group>\n         <Radio.Group value={size} onChange={size => setSize(size)}>\n            <Radio value=\"small\">small</Radio>\n            <Radio value=\"normal\">normal</Radio>\n            <Radio value=\"large\">large</Radio>\n        </Radio.Group>\n         <Radio.Group value={type} onChange={type => setType(type)}>\n            <Radio value=\"bordered-card\">bordered-card</Radio>\n            <Radio value=\"card\">card</Radio>\n            <Radio value=\"editable-card\">editable-card</Radio>\n            <Radio value=\"line\">line</Radio>\n        </Radio.Group>\n        <Tabs\n          tabBarPosition={value}\n          onPrevClick={handlePrevClick}\n          onNextClick={handleNextClick}\n          type={type}\n          size={size}\n          style={{ height: '300px', margin: '20px 0' }}\n        >\n          <TabPane label=\"Tab 1\" key=\"1\">{CONTENTS}</TabPane>\n          <TabPane label=\"Tab 2\" key=\"2\">Tabs 2 content</TabPane>\n          <TabPane label=\"Tab 3\" key=\"3\">Tabs 3 content</TabPane>\n          <TabPane label=\"Tab 4\" key=\"4\">Tabs 4 content</TabPane>\n          <TabPane label=\"Tab 5\" key=\"5\">Tabs 5 content</TabPane>\n          <TabPane label=\"Tab 6\" key=\"6\">Tabs 6 content</TabPane>\n          <TabPane label=\"Tab 7\" key=\"7\">Tabs 7 content</TabPane>\n          <TabPane label=\"Tab 8\" key=\"8\">Tabs 8 content</TabPane>\n          <TabPane label=\"Tab 9\" key=\"9\">Tabs 9 content</TabPane>\n          <TabPane label=\"Tab 10\" key=\"10\">Tabs 10 content</TabPane>\n          <TabPane label=\"Tab 11\" key=\"12\">Tabs 11 content</TabPane>\n          <TabPane label=\"Tab 12\" key=\"13\">Tabs 12 content</TabPane>\n          <TabPane label=\"Tab 13\" key=\"14\">Tabs 13 content</TabPane>\n          <TabPane label=\"Tab 14\" key=\"15\">Tabs 14 content</TabPane>\n          <TabPane label=\"Tab 15\" key=\"16\">Tabs 15 content</TabPane>\n        </Tabs>\n      </div>\n    );\n}\nReactDOM.render(<Demo />, mountNode);\n```\n",
      "---\norder: 0\ntitle: 基本使用\n---\n\n基本使用。\n\n```jsx\nimport { Tabs } from '@ss/mtd-react';\nconst { TabPane } = Tabs;\n\nconst TabsDemo = () => {\n  return (\n    <div>\n      <Tabs defaultActiveKey=\"2\">\n        <TabPane label=\"Tab 1\" key=\"1\" className='test'>\n          货有好歹，价有高低 - 民谚\n        </TabPane>\n        <TabPane label=\"Tab 2\" key=\"2\">\n          人生最重要的，不在乎增高地位，乃在乎善用自己的才能，用到最高的限度。 - 佚名\n        </TabPane>\n      </Tabs>\n    </div>\n  );\n}\nReactDOM.render(<TabsDemo />, mountNode);\n```\n",
      "---\norder: 6\ntitle: 附加内容\n---\n\n使用`tabBarExtraContent`属性可以在页签右边添加附加操作。\n\n```jsx\nimport { Tabs, Button } from '@ss/mtd-react';\nconst { TabPane } = Tabs;\n\nconst TabsDemo = () => {\n  const handleClick = () => {\n    console.log('click extra content');\n  }\n  return (\n    <Tabs tabBarExtraContent={<Button onClick={handleClick}>额外按钮</Button>}>\n      <TabPane label=\"Tab 1\" key=\"1\">\n        货有好歹，价有高低 - 民谚\n      </TabPane>\n      <TabPane label=\"Tab 2\" key=\"2\">\n        人生最重要的，不在乎增高地位，乃在乎善用自己的才能，用到最高的限度。 - 佚名\n      </TabPane>\n      <TabPane label=\"Tab 3\" key=\"3\">\n        是非之地，不可久留 - 民谚\n      </TabPane>\n    </Tabs>\n  );\n}\nReactDOM.render(<TabsDemo />, mountNode);\n```\n",
      "---\norder: 2\ntitle: 有图标的\n---\n\n有图标的\n\n```jsx\nimport { Tabs, Icon } from '@ss/mtd-react';\nconst { TabPane } = Tabs;\n\nconst TabsDemo = () => {\n  return (\n    <Tabs>\n      <TabPane label={<span><Icon type=\"time\" /> Tab 1</span>} key=\"1\">\n        货有好歹，价有高低 - 民谚\n      </TabPane>\n      <TabPane label={<span><Icon type=\"cart\" /> Tab 2</span>} key=\"2\">\n        人生最重要的，不在乎增高地位，乃在乎善用自己的才能，用到最高的限度。 - 佚名\n      </TabPane>\n      <TabPane label={<span><Icon type=\"search\" /> Tab 3</span>} key=\"3\">\n        是非之地，不可久留 - 民谚\n      </TabPane>\n    </Tabs>\n  );\n}\nReactDOM.render(<TabsDemo />, mountNode);\n```\n",
      "---\norder: 8\ntitle: 编辑模式\n---\n\n编辑模式下使用`onAdd`和`onRemove`属性添加和删除标签页，Tabs.TabPane的`closable`属性控制是否可关闭。\n\n```jsx\nimport {useState} from 'react';\nimport { Tabs } from '@ss/mtd-react';\nconst { TabPane } = Tabs;\n\nconst Demo = (props) => {\n  const [tabs, setTabs] = useState([\n      { key: '1', content: 'Tabs 1 content' },\n      { key: '2', content: 'Tabs 2 content' },\n      { key: '3', content: 'Tabs 3 content' },\n      { key: '4', content: 'Tabs 4 content' },\n      { key: '5', content: 'Tabs 5 content' },\n    ]);\n  const [activeKey, setActiveKey] = useState('1');\n\n  const handleAddTab = () => {\n    const key = +tabs[tabs.length - 1].key + 1;\n    setTabs([...tabs, {key: `${key}`, content: `Tabs content ${key}` }]);\n    setActiveKey(`${key}`);\n  };\n\n  const handleRemove = removedKey => setTabs(tabs.filter(tab => tab.key !== removedKey));\n\n  const handleChange = activeKey => setActiveKey(activeKey);\n\n  return (\n      <Tabs\n        activeKey={activeKey}\n        type=\"editable-card\"\n        onAdd={handleAddTab}\n        onRemove={handleRemove}\n        onChange={handleChange}\n      >\n        {tabs.map((tab, index) => (\n          <TabPane key={tab.key} closable={+tab.key % 2 !== 0} label={`Tab ${tab.key}`}>\n            {tab.content}\n          </TabPane>\n        ))}\n      </Tabs>\n    );\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n",
      "---\norder: 3\ntitle: 大小\n---\n\n使用`size`属性控制组件尺寸,目前支持 `small`、 `normal`、 `large`\n\n```jsx\nimport {useState} from 'react';\nimport { Tabs, Radio } from '@ss/mtd-react';\nconst { TabPane } = Tabs;\n\nconst Demo = (props)=>{\n  const [size, setSize] = useState('normal');\n\n  const handleRadioChange = size => setSize(size);\n\n  return (\n      <div>\n        <Radio.Group value={size} onChange={handleRadioChange}>\n            <Radio value=\"small\">小号</Radio>\n            <Radio value=\"normal\">中号</Radio>\n            <Radio value=\"large\">大号</Radio>\n        </Radio.Group>\n        <Tabs size={size}>\n          <TabPane label=\"Tab 1\" key=\"1\">Tabs 1 content</TabPane>\n          <TabPane label=\"Tab 2\" key=\"2\">Tabs 2 content</TabPane>\n          <TabPane label=\"Tab 3\" key=\"3\">Tabs 3 content</TabPane>\n          <TabPane label=\"Tab 4\" key=\"4\">Tabs 4 content</TabPane>\n        </Tabs>\n      </div>\n    );\n\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n",
      "---\norder: 1\ntitle: 禁用\n---\n\nTabPane使用`disabled`属性控制标签是否禁用\n\n```jsx\nimport { Tabs } from '@ss/mtd-react';\nconst { TabPane } = Tabs;\n\nconst TabsDemo = () => {\n  return (\n    <Tabs defaultActiveKey=\"1\">\n      <TabPane label=\"Tab 1\" key=\"1\">\n        货有好歹，价有高低 - 民谚\n      </TabPane>\n      <TabPane label=\"Tab 2\" key=\"2\" disabled>\n        人生最重要的，不在乎增高地位，乃在乎善用自己的才能，用到最高的限度。 - 佚名\n      </TabPane>\n      <TabPane label=\"Tab 3\" key=\"3\">\n        是非之地，不可久留 - 民谚\n      </TabPane>\n    </Tabs>\n  );\n}\nReactDOM.render(<TabsDemo />, mountNode);\n```\n",
      "---\norder: 4\ntitle: 类型\n---\n\n使用`type`属性控制组件风格，现有风格类型包括 `line`、 `card`、 `bordered-card`、`editable-card`。\n\n```jsx\nimport { Tabs, Icon } from '@ss/mtd-react';\nconst { TabPane } = Tabs;\n\nconst TabsDemo = () => {\n  return (\n    <div>\n      <Tabs type=\"line\">\n        <TabPane label=\"Tab 1\" key=\"1\">\n          货有好歹，价有高低 - 民谚\n        </TabPane>\n        <TabPane label=\"Tab 2\" key=\"2\">\n          人生最重要的，不在乎增高地位，乃在乎善用自己的才能，用到最高的限度。 - 佚名\n        </TabPane>\n        <TabPane label=\"Tab 3\" key=\"3\">\n          是非之地，不可久留 - 民谚\n        </TabPane>\n      </Tabs>\n      <Tabs type=\"card\">\n        <TabPane label=\"Tab 1\" key=\"1\">\n          货有好歹，价有高低 - 民谚\n        </TabPane>\n        <TabPane label=\"Tab 2\" key=\"2\">\n          人生最重要的，不在乎增高地位，乃在乎善用自己的才能，用到最高的限度。 - 佚名\n        </TabPane>\n        <TabPane label=\"Tab 3\" key=\"3\">\n          是非之地，不可久留 - 民谚\n        </TabPane>\n      </Tabs>\n      <Tabs type=\"bordered-card\">\n        <TabPane label=\"Tab 1\" key=\"1\">\n          货有好歹，价有高低 - 民谚\n        </TabPane>\n        <TabPane label=\"Tab 2\" key=\"2\">\n          人生最重要的，不在乎增高地位，乃在乎善用自己的才能，用到最高的限度。 - 佚名\n        </TabPane>\n        <TabPane label=\"Tab 3\" key=\"3\">\n          是非之地，不可久留 - 民谚\n        </TabPane>\n      </Tabs>\n    </div>\n  );\n}\nReactDOM.render(<TabsDemo />, mountNode);\n```\n",
      "---\norder: 5\ntitle: 滚动切换\n---\n\n标签过多超过容器宽度时，显示滚动切换按钮\n\n```jsx\nimport { Tabs, Radio } from '@ss/mtd-react';\nconst { TabPane } = Tabs;\n\nReactDOM.render(\n  <div>\n    <Tabs>\n      <TabPane label=\"Tab 1\" key=\"1\">Tabs 1 content</TabPane>\n      <TabPane label=\"Tab 2\" key=\"2\">Tabs 2 content</TabPane>\n      <TabPane label=\"Tab 3\" key=\"3\">Tabs 3 content</TabPane>\n      <TabPane label=\"Tab 4\" key=\"4\">Tabs 4 content</TabPane>\n      <TabPane label=\"Tab 5\" key=\"5\">Tabs 5 content</TabPane>\n      <TabPane label=\"Tab 6\" key=\"6\">Tabs 6 content</TabPane>\n      <TabPane label=\"Tab 7\" key=\"7\">Tabs 7 content</TabPane>\n      <TabPane label=\"Tab 8\" key=\"8\">Tabs 8 content</TabPane>\n      <TabPane label=\"Tab 9\" key=\"9\">Tabs 9 content</TabPane>\n      <TabPane label=\"Tab 10\" key=\"10\">Tabs 10 content</TabPane>\n      <TabPane label=\"Tab 11\" key=\"12\">Tabs 11 content</TabPane>\n      <TabPane label=\"Tab 12\" key=\"13\">Tabs 12 content</TabPane>\n      <TabPane label=\"Tab 13\" key=\"14\">Tabs 13 content</TabPane>\n      <TabPane label=\"Tab 14\" key=\"15\">Tabs 14 content</TabPane>\n      <TabPane label=\"Tab 15\" key=\"16\">Tabs 15 content</TabPane>\n    </Tabs>\n  </div>\n  , mountNode\n);\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/tree",
    "content": [
      "---\norder: 2\ntitle: 交互方式\n---\n\n使用`expandOnClickNode`属性控制单击节点时是否触发展开，如项目中包含点击、编辑、删除等操作时，需点击节点三角展开子项。如无任何操作可指定`expandOnClickNode`为`true`,点击整行展开子项。\n\n```jsx\nimport { Tree } from '@ss/mtd-react';\n\nconst data = [\n  { label: '唐诗', value: '1', leaf: false },\n  { label: '李白', value: '11', parentValue: '1' },\n  { label: '静夜思', value: '111', parentValue: '11' },\n  { label: '将进酒', value: '112', parentValue: '11' },\n  { label: '宋词', value: '2' },\n  { label: '苏轼', value: '21', parentValue: '2' },\n  { label: '东坡乐府', value: '211', parentValue: '21' },\n  { label: '赤壁怀古', value: '2111', parentValue: '211' },\n  { label: '绝句', value: '3', leaf: false },\n];\n\nconst props = {\n    data: data,\n    useTreeData: false,\n    keyField: 'value',\n    labelField: 'label',\n    leafField: 'leaf',\n    parentKeyField: 'parentValue',\n    nodeExpansion: {\n      defaultExpandedKeys: ['2111'],\n      defaultExpandParent: true,\n    },\n};\n\nconst TreeDemo = ()=> {\n  \n  return (\n    <ul className=\"custom-interactive\">\n      <li>\n        <div className=\"custom-interactive-title\">节点有详情，点击三角展开子项。</div>\n        <Tree {...props} />\n      </li>\n      <li>\n        <div className=\"custom-interactive-title\">节点无详情，点击整行展开子项。</div>\n        <Tree {...props} expandOnClickNode={true} />\n      </li>\n    </ul>\n  );\n}\nReactDOM.render(<TreeDemo />, mountNode);\n```\n\n```css\n.custom-interactive > li {\n  width: 50%;\n  display: inline-block;\n  vertical-align: top;\n}\n.custom-interactive-title {\n  margin-bottom: 10px;\n}\n```\n",
      "---\norder: 7\ntitle: 树导航\n---\n\n使用`nodeSelection`属性配置节点选择，如展示层级结构的同时，允许对特定项目进行点击，触发导航到相应详细信息页面。\n\n```jsx\nimport { Tree } from '@ss/mtd-react';\nimport { useState } from 'react';\n\nconst data = [\n  { label: '唐诗', value: '1' },\n  { label: '李白', value: '11', parentValue: '1' },\n  { label: '静夜思', value: '111', parentValue: '11', article: <div>\n    <h3>静夜思</h3>\n    <p>床前明月光，疑是地上霜。</p>\n    <p>举头望明月，低头思故乡。</p>\n  </div> },\n  { label: '将进酒', value: '112', parentValue: '11', article: <div>\n    <h3>将进酒</h3>\n    <p>君不见，黄河之水天上来，奔流到海不复回。</p>\n　　 <p>君不见，高堂明镜悲白发，朝如青丝暮成雪！</p>\n　　 <p>人生得意须尽欢，莫使金樽空对月。</p>\n　　 <p>天生我材必有用，千金散尽还复来。</p>\n　 　<p>烹羊宰牛且为乐，会须一饮三百杯。</p>\n　 　<p>岑夫子，丹丘生，将进酒，杯莫停。</p>\n　 　<p>与君歌一曲，请君为我倾耳听。</p>\n　 　<p>钟鼓馔玉不足贵，但愿长醉不复醒。</p>\n　 　<p>古来圣贤皆寂寞，惟有饮者留其名。</p>\n　 　<p>陈王昔时宴平乐，斗酒十千恣欢谑。</p>\n　 　<p>主人何为言少钱，径须沽取对君酌。</p>\n　 　<p>五花马、千金裘，呼儿将出换美酒，与尔同销万古愁！</p>\n  </div> },\n  { label: '宋词', value: '2' },\n  { label: '苏轼', value: '21', parentValue: '2' },\n  { label: '东坡乐府', value: '211', parentValue: '21' },\n  { label: '赤壁怀古', value: '2111', parentValue: '211', article: <div>\n    <h3>《念奴娇·赤壁怀古》</h3>\n    <p>大江东去，浪淘尽，千古风流人物。故垒西边，人道是：三国周郎赤壁。乱石崩云，惊涛裂岸，卷起千堆雪。江山如画，一时多少豪杰。</p>\n    <p>遥想公瑾当年，小乔初嫁了，雄姿英发。羽扇纶巾，谈笑间、强虏灰飞烟灭。故国神游，多情应笑我，早生华发。人间如梦，一尊还酹江月。</p>\n  </div> },\n  { label: '绝句', value: '3', leaf: false },\n];\n\nconst Demo = (props)=>{\n  const [selectedKey, setSelectedKey] = useState('2111');\n\n  return (\n      <div className=\"custom-tree-navigator\">\n        <Tree\n          data={data}\n          useTreeData={false}\n          keyField=\"value\"\n          labelField=\"label\"\n          leafField=\"leaf\"\n          parentKeyField=\"parentValue\"\n          nodeSelection={{\n            parentSelectable: false,\n            selectedKeys: [selectedKey]\n          }}\n          nodeExpansion={{\n            defaultExpandAll: true\n          }}\n          onSelect={node =>  setSelectedKey(node.value)}\n        />\n        <div className=\"custom-tree-navigator-content\">\n          {data.find(v => v.value === selectedKey).article}\n        </div>\n      </div>\n    );\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n```css\n.custom-tree-navigator-content h3 {\n  margin: 5px 0 !important;\n}\n.custom-tree-navigator-content p {\n  line-height: 1.5;\n  color: #464646;\n}\n.custom-tree-navigator > * {\n  width: 50%;\n  display: inline-block;\n  vertical-align: top;\n}\n```\n",
      "---\norder: 3\ntitle: 展开方式\n---\n\n使用`nodeExpansion`属性，设定`accordion`值控制树展开时是否关闭同级子节点。当根节点、节点较多且叶详情之前无需对照查看时，选用“只能同时展开一个子项”组件使用。反之则可选用“可同时展开多个子项”组件。\n\n```jsx\nimport { Tree } from '@ss/mtd-react';\n\nconst data = [\n  { label: '唐诗', value: 1, leaf: false },\n  { label: '李白', value: 11, parentValue: 1 },\n  { label: '静夜思', value: 111, parentValue: 11 },\n  { label: '将进酒', value: 112, parentValue: 11 },\n  { label: '宋词', value: 2 },\n  { label: '苏轼', value: 21, parentValue: 2 },\n  { label: '东坡乐府', value: 211, parentValue: 21 },\n  { label: '赤壁怀古', value: 2111, parentValue: 211 },\n  { label: '绝句', value: 3, leaf: false },\n];\n\nconst props = {\n  data: data,\n  useTreeData: false,\n  keyField: 'value',\n  labelField: 'label',\n  leafField: 'leaf',\n  parentKeyField: 'parentValue',\n};\n\nconst TreeDemo = ()=> {\n  return (\n    <ul className=\"custom-expandsion\">\n      <li>\n        <div className=\"custom-expandsion-title\">可同时展开多个子项</div>\n        <Tree {...props} nodeExpansion={{\n          defaultExpandedKeys: [2111],\n          defaultExpandParent: true,\n        }} />\n      </li>\n      <li>\n        <div className=\"custom-expandsion-title\">只能同时展开一个子项</div>\n        <Tree {...props} nodeExpansion={{\n          defaultExpandedKeys: [2111],\n          defaultExpandParent: true,\n          accordion: true,\n        }} />\n      </li>\n    </ul>\n  );\n}\nReactDOM.render(<TreeDemo />, mountNode);\n```\n\n```css\n.custom-expandsion > li {\n  width: 50%;\n  display: inline-block;\n  vertical-align: top;\n}\n.custom-expandsion-title {\n  margin-bottom: 10px;\n}\n```\n",
      "---\norder: 1\ntitle: 基础样式\n---\n\n```jsx\nimport { Tree } from '@ss/mtd-react';\nimport { useState } from 'react';\n\nconst data = [\n  { label: '唐诗', value: '1' },\n  { label: '李白', value: '11', parentValue: '1' },\n  { label: '静夜思', value: '111', parentValue: '11' },\n  { label: '将进酒', value: '112', parentValue: '11' },\n  { label: '宋词', value: '2' },\n  { label: '苏轼', value: '21', parentValue: '2' },\n  { label: '东坡乐府', value: '211', parentValue: '21' },\n  { label: '赤壁怀古', value: '2111', parentValue: '211' },\n  { label: '绝句', value: '3', leaf: false },\n];\n\nconst Demo = (props) => {\n  const [expandedKeys, setExpandedKeys] = useState(['2111']);\n\n  return (\n      <Tree\n        className=\"custom-tree\"\n        data={data}\n        useTreeData={false}\n        keyField=\"value\"\n        labelField=\"label\"\n        leafField=\"leaf\"\n        parentKeyField=\"parentValue\"\n        onSelectChange={(keys, selectedNodes, e, node) => console.log(selectedNodes,node)}\n        nodeSelection={{ checkbox: true, selectStrictly: false }}\n        nodeExpansion={{\n          autoExpandParent: true,\n          expandedKeys\n        }}\n        onExpandChange={keys => setExpandedKeys(keys)}\n      />\n    );\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n",
      "---\norder: 5\ntitle: 状态\n---\n\n以常规树举例，项目状态有正常状态、Hover状态、激活状态、禁用状态、加载状态。其中，使用`loadingKeys`属性指定处于加载状态的节点。\n\n```jsx\nimport { Tree } from '@ss/mtd-react';\n\nconst data = [\n  { label: '正常状态', value: '1', leaf: false },\n  { label: '唐诗', value: '11', parentValue: '1' },\n  { label: '宋词', value: '2' },\n  { label: '苏轼', value: '21', parentValue: '2' },\n  { label: '东坡乐府', value: '211', parentValue: '21' },\n  { label: '赤壁怀古-选中状态', value: '2111', parentValue: '211' },\n  { label: '绝句', value: '3', disabled: true, leaf: false  },\n  { label: '绝句', value: '4', leaf: false },\n];\n\nconst TreeDemo = ()=> {\n  return (\n    <Tree\n      className=\"custom-tree\"\n      data={data}\n      useTreeData={false}\n      keyField=\"value\"\n      labelField=\"label\"\n      leafField=\"leaf\"\n      parentKeyField=\"parentValue\"\n      loadingKeys={['4']}\n      nodeSelection={{\n        parentSelectable: false,\n        defaultSelectedKeys: ['2111']\n      }}\n      nodeExpansion={{\n        defaultExpandedKeys: ['2111'],\n        defaultExpandParent: true\n      }}\n    />\n  );\n}\nReactDOM.render(<TreeDemo />, mountNode);\n```\n",
      "---\norder: 4\ntitle: 类型\n---\n\n目录用于文档型层级信息展示，无收起、展开操作。使用`nodeExpansion`属性自定义节点展开收起配置\n\n```jsx\nimport { Tree } from '@ss/mtd-react';\n\nconst data = [\n  { label: '唐诗', value: '1', leaf: false },\n  { label: '李白', value: '11', parentValue: '1' },\n  { label: '静夜思', value: '111', parentValue: '11' },\n  { label: '将进酒', value: '112', parentValue: '11' },\n  { label: '宋词', value: '2' },\n  { label: '苏轼', value: '21', parentValue: '2' },\n  { label: '东坡乐府', value: '211', parentValue: '21' },\n  { label: '赤壁怀古', value: '2111', parentValue: '211' },\n  { label: '绝句', value: '3', leaf: false },\n];\nconst icons = {};\n\nconst props = {\n      data: data,\n      useTreeData: false,\n      keyField: 'value',\n      labelField: 'label',\n      leafField: 'leaf',\n      parentKeyField: 'parentValue'\n    };\n\nconst TreeDemo = ()=> {\n  return (\n    <ul className=\"custom-tree-style\">\n      <li>\n        <div className=\"custom-tree-style-title\">基础型</div>\n        <Tree\n          {...props}\n          nodeExpansion={{\n            defaultExpandedKeys: ['2111'],\n            defaultExpandParent: true,\n          }}\n        />\n      </li>\n      <li>\n        <div className=\"custom-tree-style-title\">目录型</div>\n        <Tree\n          {...props}\n          nodeExpansion={{\n            defaultExpandAll: true,\n            action: 'none',\n            icon: (expanded, node, index, level, { parentNode }) => {\n              icons[node.value] = parentNode\n                ? `${icons[parentNode.value]}.${index + 1}`\n                : index + 1;\n              return `${icons[node.value]}、`;\n            },\n          }}\n        />\n      </li>\n    </ul>\n  );\n}\nReactDOM.render(<TreeDemo />, mountNode);\n```\n\n```css\n.custom-tree-style > li {\n  width: 50%;\n  display: inline-block;\n  vertical-align: top;\n}\n.custom-tree-style > li:last-child .mtd-tree-node-expand {\n  padding-right: 0;\n}\n.custom-tree-style-title {\n  margin-bottom: 10px;\n}\n```\n",
      "---\norder: 6\ntitle: 带操作型\n---\n\n使用`nodeSelection`属性进行节点选择的配置，可根据需求，搭配属性`renderNodeContent`配置操作按钮使用。\n\n```jsx\nimport { Tree, Icon } from '@ss/mtd-react';\n\nconst data = [\n  { label: '唐诗', value: '1' },\n  { label: '李白', value: '11', parentValue: '1' },\n  { label: '静夜思', value: '111', parentValue: '11' },\n  { label: '将进酒', value: '112', parentValue: '11' },\n  { label: '宋词', value: '2' },\n  { label: '苏轼', value: '21', parentValue: '2' },\n  { label: '东坡乐府', value: '211', parentValue: '21' },\n  { label: '赤壁怀古', value: '2111', parentValue: '211' },\n  { label: '绝句', value: '3', leaf: false },\n];\n\nconst TreeDemo = ()=> {\n  const renderNodeContent = (node, index, level, leaf) => {\n    if (!leaf) return node.label;\n    return (\n      <div className=\"custom-tree-select-node\">\n        <span>{node.label}</span>\n        <Icon\n          type=\"delete\"\n          onClick={e => {\n            e.stopPropagation();\n            console.log('删除: ', node);\n          }}\n        />\n      </div>\n    );\n  };\n  \n  return (\n    <div className=\"custom-tree-select\">\n      <div className=\"custom-tree-select-title\">多选项目</div>\n      <Tree\n        data={data}\n        useTreeData={false}\n        keyField=\"value\"\n        labelField=\"label\"\n        leafField=\"leaf\"\n        parentKeyField=\"parentValue\"\n        renderNodeContent={renderNodeContent}\n        nodeSelection={{\n          checkbox: true,\n          parentSelectable: false,\n          defaultSelectedKeys: ['2111'],\n        }}\n        nodeExpansion={{\n          defaultExpandedKeys: ['2111'],\n          defaultExpandParent: true,\n        }}\n      />\n    </div>\n  );\n  \n}\nReactDOM.render(<TreeDemo />, mountNode);\n```\n\n```css\n.custom-tree-select {\n  width: 400px;\n}\n.custom-tree-select-title {\n  margin-bottom: 10px;\n}\n.custom-tree-select-node {\n  display: block;\n}\n.custom-tree-select-node .mtdicon {\n  float: right;\n  color: #4e73ff;\n  line-height: 22px;\n}\n```\n",
      "---\norder: 8\ntitle: 带图标\n---\n\n使用`filterNode`方法筛选展示节点，`onLoadData`方法展开无子节点时请求子节点，`renderNodeContent`方法自定义渲染节点，可配合 icon 使用，更清晰区分根节点、节点、叶的层级结构。使用`showLine`属性控制是否显示连线，`loadingKeys`属性指定处于加载中的节点，`useTreeData`属性指定是否使用树形数据。\n\n```jsx\nimport { Tree, Button, Icon, Input } from '@ss/mtd-react';\nimport {useState, useRef, useCallback } from 'react';\n\nconst initialData = [\n  { id: '0-0' },\n  { id: '0-0-0', parentId: '0-0' },\n  { id: '0-0-0-0', parentId: '0-0-0' },\n  { id: '0-0-0-1', parentId: '0-0-0' },\n  { id: '0-0-0-2', parentId: '0-0-0' },\n  { id: '0-0-1', parentId: '0-0' },\n  { id: '0-0-1-0', parentId: '0-0-1' },\n  { id: '0-0-1-1', parentId: '0-0-1' },\n  { id: '0-0-1-2', parentId: '0-0-1' },\n  { id: '0-0-2', parentId: '0-0' },\n  { id: '0-1', leaf: false },\n  { id: '0-2' },\n  { id: 'mockErr', label: '模拟：初次加载失败，再次加载成功', leaf: false },\n];\n\nconst Demo = (props) => {\n  const initial = useRef(true);\n  const [loadingKeys, setLoadingKeys] = useState([]);\n  const [loadingErrKeys, setLoadingErrKeys] = useState([]);\n  const [data, setData] = useState(props?.initialData?.slice());\n  const [filter, setFilter] = useState('');\n  const [count ,setCount] = useState(0);\n\n  const onLoadData = (node ,index, level) => {\n    setLoadingKeys(loadingKeys=>loadingKeys.concat(node.id));\n    setTimeout(() => {\n      // 初次加载，模拟加载失败\n      const mock = initial.current && node.id === 'mockErr';\n      if(initial.current) {\n        initial.current = false;\n      }\n      setLoadingKeys(loadingKeys=> loadingKeys.filter(v=> v !== node.id));\n      mock? setLoadingErrKeys([node.id]): setLoadingErrKeys([]);\n      !mock && setData(data => data.concat({\n        id: `${node.id}-${level}`,\n        parentId: node.id,\n        leaf: false,\n      }));\n    }, 1000);\n  }\n\n  const handleFilter = (node) => node.id.includes(filter) || node.label?.includes(filter);\n\n  const renderNodeContent = useCallback((node, index, level) => {\n    if (!loadingErrKeys.includes(node.id)) return node.label || node.id;\n    return (\n      <div className=\"custom-tree-icon-node\">\n        <div>{node.label || node.id}</div>\n        <div className=\"custom-tree-icon-node-loadErr\">\n          <Icon type=\"info-circle\" />\n          <span>数据加载失败</span>\n          <Button\n            shape=\"text\"\n            type=\"primary\"\n            onClick={e => {\n              e.stopPropagation();\n              onLoadData(node, index, level);\n            }}\n          >\n            重新加载\n          </Button>\n        </div>\n      </div>\n    );\n  },[]);\n\n  return (\n      <div className=\"custom-tree-icon\">\n        <Input\n          value={filter}\n          placeholder=\"Search\"\n          dispatchChange={['onBlur', 'onPressEnter']}\n          onChange={e => {\n            const value = e.target.value;\n            setFilter(value);\n            }}\n        />\n        <Tree\n          filter={filter}\n          className=\"custom-tree\"\n          data={data}\n          keyField=\"id\"\n          parentKeyField=\"parentId\"\n          showLine\n          useTreeData={false}\n          loadingKeys={loadingKeys}\n          filterNode={handleFilter}\n          nodeExpansion={{\n            defaultExpandLevel: 1,\n            icon(expanded, node, index, level, { leaf }) {\n              if (leaf) return <Icon type=\"save-o\" />;\n              return <span className=\"custom-expand mtdicon\">{expanded ? '-' : '+'}</span>;\n            },\n          }}\n          renderNodeContent={renderNodeContent}\n          onLoadData={onLoadData}\n        />\n      </div>\n    );\n}\n\n\n\n\nReactDOM.render(<Demo initialData={initialData} />, mountNode);\n```\n\n```css\n.custom-tree-icon .custom-expand {\n  border: 1px solid #ddd;\n  border-radius: 2px;\n  text-align: center;\n  width: 16px;\n  height: 16px;\n  display: block;\n  vertical-align: middle;\n  line-height: 12px;\n  margin-top: 3px;\n  padding: 0;\n}\n.custom-tree-icon .mtd-input {\n  width: 50%;\n}\n.custom-tree-icon-node .mtd-button {\n  margin-left: 10px;\n}\n.custom-tree-icon-node .mtdicon {\n  color: #b5bbd1;\n  margin-right: 5px;\n}\n.custom-tree-icon-node-loadErr {\n  margin-top: 5px;\n}\n.custom-tree-icon-node-loadErr > * {\n  vertical-align: middle;\n  display: inline-block;\n}\n```\n",
      "---\norder: 9\ntitle: 可拖拽 Tree\n---\n\n使用`onDrop`方法实现可拖拽的Tree\n\n```jsx\nimport { Tree } from '@ss/mtd-react';\nimport { useState } from 'react';\n\nconst initialData = [\n  {\n    label: '唐诗', value: '1', children: [\n      { label: '李白', value: '11', parentValue: '1' },\n      { label: '静夜思', value: '12', parentValue: '1' },\n      { label: '将进酒', value: '13', parentValue: '1' },\n    ]\n  },\n  {\n    label: '宋词', value: '2', children: [\n      { label: '苏轼', value: '21', parentValue: '2' },\n      { label: '东坡乐府', value: '22', parentValue: '2' },\n      { label: '赤壁怀古', value: '23', parentValue: '2' },\n    ]\n  },\n  {\n    label: '绝句', value: '3', children: [\n      { label: '赤壁怀古', value: '31', parentValue: '3' },\n      { label: '赤壁怀古', value: '32', parentValue: '3' },\n      { label: '赤壁怀古', value: '33', parentValue: '3' },\n    ]\n  },\n];\n\nconst Demo = (props) =>{\n  const [data, setData] = useState(initialData);\n\n  const onDrop = ({event, targetNode, dragNode, dropPosition, oldData, newData}) => {\n    console.log('onDrop', event, targetNode, dragNode, dropPosition, oldData, newData)\n    setData(newData);\n  };\n\n  return (\n      <Tree\n        className=\"custom-tree\"\n        data={data}\n        useTreeData={true}\n        keyField=\"value\"\n        labelField=\"label\"\n        leafField=\"leaf\"\n        parentKeyField=\"parentValue\"\n        draggable\n        nodeExpansion={{\n          defaultExpandAll: true,\n          defaultExpandedKeys: ['1', '2']\n        }}\n        onDrop={onDrop}\n      />\n    );\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/tree-select",
    "content": [
      "---\norder: 3\ntitle: 信息回显\n---\n\n回显选中路径，可明确提示和告知用户选中信息的分类来源。\n\n```jsx\nimport { useState } from 'react';\nimport { TreeSelect } from '@ss/mtd-react';\n\nconst data = [\n  { id: 'mt', name: '美团平台' },\n  {\n    id: 'jt',\n    name: '集团',\n    children: [\n      {\n        id: 'yhpt',\n        name: '用户平台',\n        path: '集团/用户平台',\n        children: [\n          {\n            id: 'yhtyb',\n            name: '用户体验部',\n            path: '集团/用户平台/用户体验部',\n            children: [{ id: 'sjz', name: '基础研发产品设计组', path: '集团/用户平台/用户体验部/基础研发产品设计组' }],\n          },\n        ],\n      },\n    ],\n  },\n  { id: 'dp', name: '点评平台' },\n];\n\nconst Demo = () => {\n  const [valueMap, setValueMap] = useState({\n    value1: null,\n    value2: null,\n  });\n\n  return (\n    <ul className=\"custom-treeselect-renderInputLabel\">\n      <li>\n        <div className=\"custom-treeselect-title\">显示路径</div>\n        <TreeSelect\n          data={data}\n          value={valueMap['value1']}\n          onChange={value1 => setValueMap(prevValue => ({ ...prevValue, value1 }))}\n          renderInputLabel={node => node.path || node.name}\n          treeProps={{\n            keyField: 'id',\n            labelField: 'name',\n          }}\n        />\n      </li>\n      <li>\n        <div className=\"custom-treeselect-title\">仅显示末级</div>\n        <TreeSelect\n          data={data}\n          value={valueMap['value2']}\n          onChange={value2 => setValueMap(prevValue => ({ ...prevValue, value2 }))}\n          treeProps={{\n            keyField: 'id',\n            labelField: 'name',\n          }}\n        />\n      </li>\n    </ul>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n```css\n.custom-treeselect-renderInputLabel > li {\n  width: 40%;\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 5%;\n}\n.custom-treeselect-renderInputLabel .custom-treeselect-title {\n  margin-bottom: 10px;\n}\n```\n",
      "---\norder: 6\ntitle: 全选\n---\n\n用树的方式实现全选效果\n\n```jsx\nimport { useState } from 'react';\nimport { TreeSelect } from '@ss/mtd-react';\n\nconst data = [\n  {\n    id: 'all', // 要有一个随意的id值\n    name: '全选',\n    children: [\n      {\n        id: 'aaa',\n        name: '用户平台',\n      },\n      {\n        id: 'bbb',\n        name: '用户体验部',\n      },\n    ],\n  },\n];\n\nconst Demo = () => {\n  const [value, setValue] = useState(null);\n\n  const handleChange = value => {\n    setValue(value);\n  };\n\n  return (\n    <div className=\"tree-select-content\">\n      <TreeSelect\n        style={{ width: 360 }}\n        multiple\n        data={data}\n        value={value}\n        filterable={false}\n        onChange={handleChange}\n        popLayer={{ className: 'select-all-demo' }}\n        treeProps={{\n          keyField: 'id',\n          labelField: 'name',\n          indent: 0,\n          nodeSelection: { selectStrictly: false, selectStrategy: 'child' },\n          nodeExpansion: {\n            defaultExpandAll: true,\n          },\n        }}\n      />\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n```css\n.select-all-demo .mtd-tree-node-expand-expanded {\n  visibility: hidden;\n}\n.select-all-demo .mtd-tree-node-expand > .mtdicon {\n  width: 12px;\n}\n```\n",
      "---\norder: 4\ntitle: 多选\n---\n\n配合复选框进行选择\n\n```jsx\nimport { useState } from 'react';\nimport { TreeSelect, Button } from '@ss/mtd-react';\n\nconst data = [\n  { id: 'mt', name: '美团平台' },\n  {\n    id: 'jt',\n    name: '集团',\n    children: [\n      {\n        id: 'jcyf',\n        name: '基础研发平台',\n        children: [\n          {\n            id: 'qypt',\n            name: '企业平台研发部',\n            children: [\n              { id: 'hr', name: 'HR研发中心' },\n              { id: 'it', name: 'IT服务运营中心' },\n              { id: 'dx', name: '大象业务部' },\n              { id: 'fw', name: '平台服务中心' },\n            ],\n          },\n          {\n            id: 'xx',\n            name: '信息安全中心',\n            children: [\n              { id: 'ss', name: '基础设施安全组' },\n              { id: 'ptyf', name: '平台研发组' },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  { id: 'dp', name: '点评平台' },\n];\n\nconst Demo = () => {\n  const [valueMap, setValueMap] = useState({\n    value1: [{ id: '123', name: '质量中心平台' }],\n    value2: null,\n    value3: null,\n  });\n\n  return (\n    <ul className=\"custom-treeselect-selectStrategy\">\n      <li>\n        <div className=\"custom-treeselect-title\">\n          父级、子级均可选中：选中父级时，输入框中展示父级；选中子级时，输入框中展示子级\n        </div>\n        <TreeSelect\n          data={data}\n          value={valueMap['value1']}\n          multiple\n          maxTagCount={2}\n          filterable={false}\n          onChange={value1 => setValueMap(prevValue => ({ ...prevValue, value1 }))}\n          treeProps={{\n            keyField: 'id',\n            labelField: 'name',\n          }}\n        />\n      </li>\n      <li>\n        <div className=\"custom-treeselect-title\">无论选中父级还是子级，输入框中均展示最底层子节点，不展示父节点</div>\n        <TreeSelect\n          data={data}\n          value={valueMap['value2']}\n          multiple\n          filterable={false}\n          onChange={value2 => setValueMap(prevValue => ({ ...prevValue, value2 }))}\n          treeProps={{\n            keyField: 'id',\n            labelField: 'name',\n            nodeSelection: { selectStrictly: false, selectStrategy: 'child' },\n          }}\n        />\n      </li>\n      <li>\n        <div className=\"custom-treeselect-title\">当父级选中，输入框中仅展示父级，不展示子级</div>\n        <TreeSelect\n          data={data}\n          value={valueMap['value3']}\n          multiple\n          onChange={value3 => setValueMap(prevValue => ({ ...prevValue, value3 }))}\n          treeProps={{\n            keyField: 'id',\n            labelField: 'name',\n            nodeSelection: { selectStrictly: false, selectStrategy: 'parent' },\n          }}\n        />\n      </li>\n    </ul>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n```css\n.custom-treeselect-selectStrategy > li {\n  display: block;\n  vertical-align: top;\n  width: 320px;\n  padding-bottom: 30px;\n  margin: auto;\n}\n.custom-treeselect-title {\n  margin-bottom: 10px;\n}\n.custom-treeselect-selectStrategy-list li {\n  display: inline-block;\n  margin-right: 4px;\n}\n```\n",
      "---\norder: 5\ntitle: 搜索\n---\n\n当选项过多时，可配合搜索进行快速筛选。\n\n```jsx\nimport { TreeSelect, Button } from '@ss/mtd-react';\nimport { useState } from 'react';\n\nconst initData = [\n  { id: 'mt', name: '美团平台' },\n  {\n    id: 'jt',\n    name: '集团',\n    children: [\n      {\n        id: 'jcyf',\n        name: '基础研发平台',\n        children: [\n          {\n            id: 'qypt',\n            name: '企业平台研发部',\n            children: [\n              { id: 'hr', name: 'HR研发中心' },\n              { id: 'it', name: 'IT服务运营中心' },\n              { id: 'dx', name: '大象业务部' },\n              { id: 'fw', name: '平台服务中心' },\n            ],\n          },\n          {\n            id: 'xx',\n            name: '信息安全中心',\n            children: [\n              { id: 'ss', name: '基础设施安全组' },\n              { id: 'ptyf', name: '平台研发组' },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  { id: 'dp', name: '点评平台' },\n];\n\nconst Demo = () => {\n  const [data, setData] = useState(initData);\n  const [value, setValue] = useState([]);\n\n  const onFilter = f => {\n    console.log('value: ', value);\n    const newData = initData.filter(item => {\n      return !f || item.name.includes(f);\n    });\n    setData(newData);\n  };\n\n  return (\n    <div className=\"tree-select-content\">\n      <TreeSelect\n        style={{ width: 360 }}\n        data={data}\n        value={value}\n        placeholder=\"请输入‘美‘试试\"\n        multiple\n        onFilter={onFilter}\n        onChange={v => {\n          setValue(v);\n          setData(initData);\n        }}\n        treeProps={{\n          keyField: 'id',\n          labelField: 'name',\n        }}\n      />\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n",
      "---\norder: 0\ntitle: 基本用法\n---\n\n```jsx\nimport { useState } from 'react';\nimport { TreeSelect } from '@ss/mtd-react';\n\nconst data = [\n  { id: 'mt', name: '美团平台' },\n  {\n    id: 'jt',\n    name: '集团',\n    children: [\n      {\n        id: 'yhpt',\n        name: '用户平台',\n        children: [\n          {\n            id: 'yhtyb',\n            name: '用户体验部',\n            children: [{ id: 'sjz', name: '基础研发产品设计组' }],\n          },\n        ],\n      },\n    ],\n  },\n  { id: 'dp', name: '点评平台' },\n];\n\nconst Demo = () => {\n  const [value, setValue] = useState({ id: 'mt', name: '美团平台' });\n\n  const handleChange = option => {\n    setValue(option);\n  };\n\n  const onVisibleChange = visible => {\n    console.log('visible:', visible);\n  };\n\n  return (\n    <div className=\"tree-select-content\">\n      <TreeSelect\n        style={{ width: 300 }}\n        data={data}\n        value={value}\n        filterable={false}\n        onChange={handleChange}\n        onVisibleChange={onVisibleChange}\n        treeProps={{\n          keyField: 'id',\n          labelField: 'name',\n        }}\n      />\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n```css\n.tree-select-content {\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n}\n```\n",
      "---\norder: 2\ntitle: 异步加载树\n---\n\n可异步加载树节点。\n\n```jsx\nimport { useState } from 'react';\nimport { TreeSelect, Icon, Button } from '@ss/mtd-react';\n\nconst initData = [\n  { id: 'mt', name: '美团平台' },\n  { id: 'jt', name: '集团 - 禁用选中', disabledSelect: true },\n  { id: 'yhpt', name: '用户平台', parentId: 'jt' },\n  { id: 'yhtyb', name: '用户体验部', parentId: 'yhpt' },\n  { id: 'dp', name: '点评平台 - 禁用选中和展开', leaf: false, disabled: true },\n  { id: 'mockErr', name: '点击加载', leaf: false },\n];\n\nlet initial = true;\n\nconst Demo = () => {\n  const [value, setValue] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [nodeLoading, setNodeLoading] = useState(false);\n  const [loadingKeys, setLoadingKeys] = useState([]);\n  const [loadingErrKeys, setLoadingErrKeys] = useState([]);\n  const [data, setData] = useState([]);\n\n  const handleChange = value => {\n    setValue(value);\n  };\n\n  const onLoadData = (node, index, level) => {\n    setNodeLoading(true);\n    setLoadingKeys([...loadingKeys, node.id]);\n    setTimeout(() => {\n      // 初次加载时，模拟加载失败\n      const mock = initial && node.id === 'mockErr';\n      if (initial) {\n        initial = false;\n      }\n      setNodeLoading(false);\n      setLoadingKeys(loadingKeys.filter(v => v !== node.id));\n      setLoadingErrKeys(mock ? [node.id] : []);\n      setData(\n        mock\n          ? data\n          : data.concat({\n              id: `${node.id}-${level}`,\n              name: `${node.id}-${level}`,\n              parentId: node.id,\n              leaf: false,\n            }),\n      );\n    }, 1000);\n  };\n\n  const onFilter = filter => {\n    setLoading(true);\n    setTimeout(() => {\n      setLoading(false);\n      setData(filter ? initData.slice().filter(v => v.name.includes(filter)) : initData.slice());\n    }, 1000);\n  };\n\n  const renderNodeContent = (node, index, level) => {\n    if (!loadingErrKeys.includes(node.id)) return node.name || node.id;\n    return (\n      <div className=\"custom-tree-node\">\n        <div>{node.name || node.id}</div>\n        <div className=\"custom-tree-node-loadErr\">\n          <Icon type=\"info-circle\" />\n          <span>数据加载失败</span>\n          <Button\n            shape=\"text\"\n            size=\"small\"\n            type=\"primary\"\n            disabled={nodeLoading}\n            onClick={e => {\n              e.stopPropagation();\n              onLoadData(node, index, level);\n            }}\n          >\n            重新加载\n          </Button>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"tree-select-content\">\n      <TreeSelect\n        style={{ width: 300 }}\n        loading={loading}\n        data={data}\n        value={value}\n        onFilter={onFilter}\n        onChange={handleChange}\n        treeProps={{\n          loadingKeys,\n          keyField: 'id',\n          labelField: 'name',\n          parentKeyField: 'parentId',\n          leafField: 'leaf',\n          useTreeData: false,\n          onLoadData: onLoadData,\n          renderNodeContent: renderNodeContent,\n        }}\n      />\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n",
      "---\norder: 7\ntitle: 自定义框显示内容\n---\n\n`renderTagLabel` 定义 tag 的内容，`renderInputLabel` 定义整个 Input 的内容\n\n```jsx\nimport { useState } from 'react';\nimport { TreeSelect, Button } from '@ss/mtd-react';\n\nconst data = [\n  { id: 'mt', name: '美团平台' },\n  {\n    id: 'jt',\n    name: '集团',\n    children: [\n      {\n        id: 'jcyf',\n        name: '基础研发平台',\n        children: [\n          {\n            id: 'qypt',\n            name: '企业平台研发部',\n            children: [\n              { id: 'hr', name: 'HR研发中心' },\n              { id: 'it', name: 'IT服务运营中心' },\n              { id: 'dx', name: '大象业务部' },\n              { id: 'fw', name: '平台服务中心' },\n            ],\n          },\n          {\n            id: 'xx',\n            name: '信息安全中心',\n            children: [\n              { id: 'ss', name: '基础设施安全组' },\n              { id: 'ptyf', name: '平台研发组' },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  { id: 'dp', name: '点评平台' },\n];\n\nconst TreeSelectDemo = () => {\n  const [valueMap, setValueMap] = useState({\n    value1: null,\n    value2: null,\n  });\n\n  const renderInputLabel = value => (\n    <div className=\"custom-treeselect-selectStrategy-content\" title={value.map(v => v.name).join('、')}>\n      {value.map(v => v.name).join('、')}\n    </div>\n  );\n\n  const renderTagLabel = value => `自定义：${value.name}`;\n\n  return (\n    <ul className=\"custom-treeselect-renderInputLabel\">\n      <li>\n        <TreeSelect\n          data={data}\n          value={valueMap['value1']}\n          multiple\n          filterable={false}\n          onChange={value1 => setValueMap(prevValue => ({ ...prevValue, value1 }))}\n          renderTagLabel={renderTagLabel}\n          treeProps={{\n            keyField: 'id',\n            labelField: 'name',\n          }}\n        />\n      </li>\n      <li>\n        <TreeSelect\n          data={data}\n          value={valueMap['value2']}\n          multiple\n          filterable={false}\n          onChange={value2 => setValueMap(prevValue => ({ ...prevValue, value2 }))}\n          renderInputLabel={renderInputLabel}\n          treeProps={{\n            keyField: 'id',\n            labelField: 'name',\n            nodeSelection: { selectStrictly: false, selectStrategy: 'child' },\n          }}\n        />\n      </li>\n    </ul>\n  );\n};\n\nReactDOM.render(<TreeSelectDemo />, mountNode);\n```\n\n```css\n.custom-treeselect-renderInputLabel > li {\n  width: 40%;\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 5%;\n}\n.custom-treeselect-renderInputLabel .custom-treeselect-title {\n  margin-bottom: 10px;\n}\n.custom-treeselect-selectStrategy-content {\n  max-width: 300px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n```\n",
      "---\norder: 1\ntitle: 选择\n---\n\n可选择根节点或叶子结点\n\n```jsx\nimport { useState } from 'react';\nimport { TreeSelect } from '@ss/mtd-react';\n\nconst data = [\n  { id: 'mt', name: '美团平台' },\n  {\n    id: 'jt',\n    name: '集团',\n    children: [\n      {\n        id: 'yhpt',\n        name: '用户平台',\n        children: [\n          {\n            id: 'yhtyb',\n            name: '用户体验部',\n            children: [{ id: 'sjz', name: '基础研发产品设计组' }],\n          },\n        ],\n      },\n    ],\n  },\n  { id: 'dp', name: '点评平台' },\n];\n\nconst Demo = () => {\n  const [valueMap, setValueMap] = useState({\n    value1: null,\n    value2: null,\n    value3: null,\n  });\n\n  return (\n    <ul className=\"custom-treeselect\">\n      <li>\n        <div className=\"custom-treeselect-title\">只能选择叶子节点</div>\n        <TreeSelect\n          data={data}\n          value={valueMap['value1']}\n          onChange={value1 => setValueMap(prevValue => ({...prevValue, value1}))}\n          filterable={false}\n          treeProps={{\n            keyField: 'id',\n            labelField: 'name',\n            nodeSelection: { parentSelectable: false },\n          }}\n        />\n      </li>\n      <li>\n        <div className=\"custom-treeselect-title\">只能选择根节点</div>\n        <TreeSelect\n          data={data}\n          value={valueMap['value2']}\n          onChange={value2 => setValueMap(prevValue => ({...prevValue, value2}))}\n          filterable={false}\n          treeProps={{\n            keyField: 'id',\n            labelField: 'name',\n            nodeSelection: { leafSelectable: false },\n          }}\n        />\n      </li>\n      <li>\n        <div className=\"custom-treeselect-title\">根节点和叶子节点都能选择</div>\n        <TreeSelect\n          data={data}\n          value={valueMap['value3']}\n          onChange={value3 => setValueMap(prevValue => ({...prevValue, value3}))}\n          filterable={false}\n          treeProps={{\n            keyField: 'id',\n            labelField: 'name',\n          }}\n        />\n      </li>\n    </ul>\n  );\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n```css\n.custom-treeselect > li {\n  width: 24%;\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 4%;\n}\n.custom-treeselect-title {\n  margin-bottom: 10px;\n}\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/rate",
    "content": [
      "---\norder: 3\ntitle: 辅助文字\n---\n\n用辅助文字直接地表达对应评分。\n\n```jsx\nimport { Rate } from '@ss/mtd-react';\nconst RateDemo = ()=> {\n  return <Rate defaultValue={3} texts={['极差', '失望', '一般', '满意', '惊喜']} />;\n}\nReactDOM.render(<RateDemo />, mountNode);\n```\n\n```css\n#components-rate-demo-03-assist + div + div.preview {\n  text-align: center;\n  padding: 40px;\n  overflow: auto;\n}\n```\n",
      "---\norder: 2\ntitle: 颜色\n---\n\n支持用不同颜色区分等级，用于对评价的等级需要突出强调的场景。\n\n```jsx\nimport { Rate } from '@ss/mtd-react';\n\nconst RateDemo = ()=> {\n  return (\n    <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-around' }}>\n      <div>\n        <Rate defaultValue={1} />\n        <p style={{ textAlign: 'center', paddingTop: '5px' }}>默认不区分颜色</p>\n      </div>\n      <div>\n        <Rate defaultValue={3} color={{ 0: '#FFCE32', 3: '#F7BA2A', 5: '#FF9900' }} />\n        <p style={{ textAlign: 'center', paddingTop: '5px' }}>区分颜色</p>\n      </div>\n    </div>\n  );\n}\n\nReactDOM.render(<RateDemo />, mountNode);\n```\n",
      "---\norder: 1\ntitle: 基础样式\n---\n\n```jsx\nimport { Rate } from '@ss/mtd-react';\nconst RateDemo =() => {\n  return <Rate />;\n}\nReactDOM.render(<RateDemo />, mountNode);\n```\n\n```css\n#components-rate-demo-01-base + div + div.preview {\n  text-align: center;\n  padding: 40px;\n  overflow: auto;\n}\n```\n",
      "---\norder: 5\ntitle: 只读\n---\n\n只读的评分用来展示分数，允许出现半星，无法进行鼠标交互。只读模式支持看到精准的分数，用于对评价的分数有精准需求的场景。\n\n```jsx\nimport { Rate } from '@ss/mtd-react';\n\nconst RateDemo = ()=> {\n  return (\n    <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-around' }}>\n      <div>\n        <Rate defaultValue={4.5} disabled />\n      </div>\n      <div>\n        <Rate defaultValue={4.6} disabled textRender={val => `${val}分`} />\n      </div>\n    </div>\n  );\n}\n\nReactDOM.render(<RateDemo />, mountNode);\n```\n",
      "---\norder: 6\ntitle: 清除\n---\n\n支持允许或者禁用清除。\n\n```jsx\nimport { Rate } from '@ss/mtd-react';\n\nconst RateDemo = ()=> {\n  return (\n    <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-around' }}>\n      <div>\n        <Rate allowClear />\n        <p style={{ textAlign: 'center', paddingTop: '5px' }}>允许清除</p>\n      </div>\n      <div>\n        <Rate />\n        <p style={{ textAlign: 'center', paddingTop: '5px' }}>不允许清除</p>\n      </div>\n    </div>\n  );\n}\n\nReactDOM.render(<RateDemo />, mountNode);\n```\n",
      "---\norder: 4\ntitle: 半星\n---\n\n支持选中半星。\n\n```jsx\nimport { Rate } from '@ss/mtd-react';\nconst RateDemo = ()=> {\n  return <Rate defaultValue={3.5} allowHalf />;\n}\nReactDOM.render(<RateDemo />, mountNode);\n```\n\n```css\n#components-rate-demo-04-halfselect + div + div.preview {\n  text-align: center;\n  padding: 40px;\n  overflow: auto;\n}\n```\n",
      "---\norder: 7\ntitle: 其他图标\n---\n\n可以将星星替换成其他图标。\n\n```jsx\nimport { Rate } from '@ss/mtd-react';\nconst RateDemo = ()=> {\n  return <Rate defaultValue={1} icon=\"mtdicon-meh-o\" />;\n}\nReactDOM.render(<RateDemo />, mountNode);\n```\n\n```css\n#components-rate-demo-07-other + div + div.preview {\n  text-align: center;\n  padding: 40px;\n  overflow: auto;\n}\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/dropdown",
    "content": [
      "---\norder: 3\ntitle: 受控\n---\n\n用户可自己通过`visible`属性控制下拉面板是否显示。\n\n```jsx\nimport { useState } from 'react';\nimport { Menu, Button, Dropdown } from '@ss/mtd-react';\nconst MenuItem = Menu.Item;\n\nconst DropdownDemo = () => {\n  const [visible, setVisible] = useState(false);\n\n  const handleClick = () => {\n    setVisible(true);\n  };\n\n  const handleContentClick = () => {\n    setVisible(false);\n  };\n\n  const renderMenu = () => (\n    <Menu style={{ width: '124px' }} onSelectChange={handleContentClick}>\n      <MenuItem key=\"MenuItem1\">计算</MenuItem>\n      <MenuItem key=\"MenuItem2\">网络</MenuItem>\n      <MenuItem key=\"MenuItem3\">存储</MenuItem>\n      <MenuItem key=\"MenuItem4\">数据库</MenuItem>\n    </Menu>\n  );\n  return (\n    <Dropdown content={renderMenu()} visible={visible}>\n      <Button onClick={handleClick}>Dropdown受控</Button>\n    </Dropdown>\n  );\n};\n\nReactDOM.render(<DropdownDemo />, mountNode);\n```\n",
      "---\norder: 2\ntitle: 触发方式\n---\n\n通过`trigger`属性控制下拉列表的触发方式，默认是`hover`触发菜单,可以设置`click`触发。\n\n```jsx\nimport { Menu, Button, Dropdown, Icon } from \"@ss/mtd-react\";\nconst MenuItem = Menu.Item;\n\nconst menu =(\n  <Menu inlineIndent={16}>\n    <MenuItem key=\"MenuItem1\">计算</MenuItem>\n    <MenuItem key=\"MenuItem2\">网络</MenuItem>\n    <MenuItem key=\"MenuItem3\">存储</MenuItem>\n    <MenuItem key=\"MenuItem4\">数据库</MenuItem>\n  </Menu>\n);\n\nReactDOM.render(\n    <div>\n      <Dropdown content={menu}>\n        <Button rightIcon=\"down-thick\">hover</Button>\n      </Dropdown>\n      <Dropdown content={menu} trigger=\"click\">\n        <Button  rightIcon=\"down-thick\">click</Button>\n      </Dropdown>\n    </div>,\n    mountNode\n  );\n```\n```css\n.mtd-button {\n  margin-right:30px;\n}\n```",
      "---\norder: 1\ntitle: 基础使用\n---\n\n最简单的下拉菜单，列表内容通过`content`属性渲染。\n\n```jsx\nimport { Menu, Button, Dropdown } from \"@ss/mtd-react\";\nconst MenuItem = Menu.Item;\n\nconst DropdownDemo = () => {\n  const menu =(\n    <Menu inlineIndent={16}>\n      <MenuItem key=\"MenuItem1\">计算</MenuItem>\n      <MenuItem key=\"MenuItem2\">网络</MenuItem>\n      <MenuItem key=\"MenuItem3\">数据库</MenuItem>\n    </Menu>\n  );\n  return (\n    <div>\n      <Dropdown content={menu}>\n        <Button>基本使用</Button>\n      </Dropdown>\n      <Dropdown content={menu} visible>\n        <Button>默认展示</Button>\n      </Dropdown>\n    </div>\n  )\n}\n\nReactDOM.render(<DropdownDemo />,mountNode);\n```",
      "---\norder: 4\ntitle: 弹出位置\n---\n\n可以通过`placement`属性控制弹出位置，默认为 `bottom`,可选 `top` `bottom` `topLeft` `topRight` `bottomLeft` `bottomRight`。\n\n```jsx\nimport { Menu, Button, Dropdown, Icon } from '@ss/mtd-react';\nconst MenuItem = Menu.Item;\n\nconst menu = (\n  <Menu>\n    <MenuItem key=\"MenuItem1\">1.计算</MenuItem>\n    <MenuItem key=\"MenuItem2\">2.网络</MenuItem>\n    <MenuItem key=\"MenuItem3\">3.存储与分发</MenuItem>\n    <MenuItem key=\"MenuItem4\">4.数据库</MenuItem>\n  </Menu>\n);\n\nconst DropdownDemo = ()=>{\n  return <div className=\"content-dropdown\">\n    <Dropdown content={menu} placement=\"top\">\n      <Button>top</Button>\n    </Dropdown>\n    <Dropdown content={menu} placement=\"topRight\" arrow>\n      <Button>topRight</Button>\n    </Dropdown>\n    <Dropdown content={menu} placement=\"topLeft\">\n      <Button>topLeft</Button>\n    </Dropdown>\n    <Dropdown content={menu}>\n      <Button>bottom</Button>\n    </Dropdown>\n    <Dropdown content={menu} placement=\"bottomLeft\" arrow>\n      <Button>bottomLeft</Button>\n    </Dropdown>\n    <Dropdown content={menu} placement=\"bottomRight\">\n      <Button>bottomRight</Button>\n    </Dropdown>\n  </div>\n}\n\nReactDOM.render(<DropdownDemo />, mountNode);\n```\n\n```css\n.content-dropdown {\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n}\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/drawer",
    "content": [
      "---\norder: 1\ntitle: 基本用法\n---\n\n````jsx\nimport { useState } from 'react';\nimport { Drawer, Button } from \"@ss/mtd-react\";\n\nconst Demo = (props) => {\n  const [visible, setVisible] = useState(false);\n\n  const handleVisibleChange = (visible) => {\n    setVisible(visible);\n  };\n  return (\n    <div>\n      <Button type=\"primary\" onClick={() => handleVisibleChange(true)}>打开抽屉</Button>\n      <Drawer\n        visible={visible}\n        title=\"基础样式\"\n        width={400}\n        onClose={() => handleVisibleChange(false)}\n      >\n        <div>\n          春江潮水连海平，海上明月共潮生。\n          滟滟随波千万里，何处春江无月明！\n          江流宛转绕芳甸，月照花林皆似霰。\n          空里流霜不觉飞，汀上白沙看不见。\n          江天一色无纤尘，皎皎空中孤月轮。\n          江畔何人初见月？江月何年初照人？\n          人生代代无穷已，江月年年只相似。\n          不知江月待何人，但见长江送流水。\n          白云一片去悠悠，青枫浦上不胜愁。\n          谁家今夜扁舟子？何处相思明月楼？\n          <Button type=\"primary\" size=\"small\" onClick={() => handleVisibleChange(false)}>\n            关闭抽屉\n          </Button>\n        </div>\n      </Drawer>\n    </div>\n  )\n};\n\nReactDOM.render(<Demo />, mountNode);\n````\n\n```css\n#components-drawer-demo-01-basic + div + div.preview {\n  text-align: center;\n  padding: 40px;\n  overflow: auto;\n}\n/* 覆盖外层site/src/style/index.scss中的样式 */\n/* position: absolute会使元素脱离文档流导致lockScroll设为false时，body无法滚动 */\n.mtd-workspace {\n  position: relative;\n}\n```\n\n",
      "---\norder: 2\ntitle: 出现位置\n---\n\n可以从 4 个方向滑出显示抽屉\n\n````jsx\nimport { useState } from 'react';\nimport { Drawer, Button } from \"@ss/mtd-react\";\n\nconst Demo = (props) => {\n  const [visible, setVisible] = useState(false);\n  const [placement, setPlacement] = useState('top');\n  const handleChange = (visible, placement) => {\n    setVisible(visible);\n    setPlacement(placement);\n  };\n  return (\n    <div>\n      <Button type=\"primary\" onClick={() => handleChange(true, 'top')}>顶部出现</Button>\n      <Button type=\"primary\" onClick={() => handleChange(true,'right')}>右侧出现</Button>\n      <Button type=\"primary\" onClick={() => handleChange(true, 'bottom')}>底部出现</Button>\n      <Button type=\"primary\" onClick={() => handleChange(true, 'left')}>左侧出现</Button>\n      <Drawer\n        visible={visible}\n        placement={placement}\n        title=\"基础样式\"\n        onClose={() => setVisible(false)}\n      >\n        <div>\n          春江潮水连海平，海上明月共潮生。\n          滟滟随波千万里，何处春江无月明！\n          江流宛转绕芳甸，月照花林皆似霰。\n          空里流霜不觉飞，汀上白沙看不见。\n          江天一色无纤尘，皎皎空中孤月轮。\n          江畔何人初见月？江月何年初照人？\n          人生代代无穷已，江月年年只相似。\n          不知江月待何人，但见长江送流水。\n          白云一片去悠悠，青枫浦上不胜愁。\n          谁家今夜扁舟子？何处相思明月楼？\n        </div>\n      </Drawer>\n    </div>\n  )\n};\n\nReactDOM.render(<Demo />, mountNode);\n````\n\n```css\n#components-drawer-demo-02-left + div + div.preview {\n  text-align: center;\n  padding: 40px;\n  overflow: auto;\n}\n#components-drawer-demo-02-left + div + div.preview .mtd-button:not(:last-child) {\n  margin-right: 24px;\n}\n/* 覆盖外层site/src/style/index.scss中的样式 */\n/* position: absolute会使元素脱离文档流导致lockScroll设为false时，body无法滚动 */\n.mtd-workspace {\n  position: relative;\n}\n```\n\n"
    ]
  },
  {
    "url": "/mtd/react/components/pagination",
    "content": [
      "---\norder: 2\ntitle: 折叠\n---\n\n`folderCount`支持页码部分折叠展示\n\n````jsx\nimport { useState } from \"react\";\nimport { Pagination } from \"@ss/mtd-react\";\n\n\nconst Demo = () => {\n  const [page, setpage] = useState({\n    pageNo: 1,\n    pageSize: 10,\n  });\n  const handleChange = current => {\n    setpage(prevState => ({ ...prevState, pageNo: current }));\n  };\n  return (\n    <Pagination\n      current={page.pageNo}\n      total={100}\n      onChange={handleChange}\n      folderCount={5}\n    />\n  );\n};\nReactDOM.render(<Demo />, mountNode);\n````\n",
      "---\norder: 4\ntitle: 跳转\n---\n\n快速跳转到某一页\n\n````jsx\nimport { useState } from \"react\";\nimport { Pagination } from \"@ss/mtd-react\";\n\n\nconst Demo = () => {\n  const [page, setpage] = useState({\n    pageNo: 1,\n    pageSize: 10,\n  });\n  const handleChange = current => {\n    setpage(prevState => ({ ...prevState, pageNo: current }));\n  };\n  return (\n    <Pagination\n      current={page.pageNo}\n      total={200}\n      onChange={handleChange}\n      folderCount={3}\n      showQuickJumper\n      showTotal={true}\n    />\n  );\n};\nReactDOM.render(<Demo />, mountNode);\n````\n",
      "---\norder: 0\ntitle: 基本用法\n---\n\n基本用法\n\n````jsx\nimport { useState } from \"react\";\nimport { Pagination } from \"@ss/mtd-react\";\n\n\nconst Demo = () => {\n  const [page, setpage] = useState({\n    pageNo: 1,\n    pageSize: 10,\n  });\n  const handleChange = current => {\n    setpage(prevState => ({ ...prevState, pageNo: current }));\n  };\n  return (\n    <Pagination\n      pageSize={page.pageSize}\n      current={page.pageNo}\n      total={50}\n      onChange={handleChange}\n    />\n  );\n};\nReactDOM.render(<Demo />, mountNode);\n````\n",
      "---\norder: 1\ntitle: 大小\n---\n\n支持 `small`、`normal`、`large` 三种尺寸\n\n````jsx\nimport { useState } from \"react\";\nimport { Pagination } from \"@ss/mtd-react\";\n\n\nconst Demo = () => {\n  const [current, setcurrent] = useState(1);\n  return (\n    <div style={{ textAlign: 'left', display: 'flex', alignItems: 'center', justifyContent: 'space-around' }}>\n      <Pagination current={current} total={30} size='small' />\n      <Pagination current={current} total={30} size='normal' />\n      <Pagination current={current} total={30} size='large' />\n    </div>\n  );\n};\nReactDOM.render(<Demo />, mountNode);\n````\n",
      "---\norder: 6\ntitle: 自定义渲染\n---\n\n通过 `itemRender` 自定义页码、前进后退按钮的渲染。\n\n````jsx\nimport { useState } from \"react\";\nimport { Pagination } from \"@ss/mtd-react\";\n\n\nconst Demo = () => {\n  const [pages, setpages] = useState({\n    pageNo: 1,\n    pageSize: 10,\n  });\n\n  const handleChange = current => {\n    setpages(prevState => ({ ...prevState, pageNo: current }));\n  };\n\n  const handleRender = (page, type, originalElement) => {\n    if (type === 'prev') return 'Previous';\n    if (type === 'next') return 'Next';\n    return originalElement;\n  };\n  return (\n    <Pagination\n      current={pages.pageNo}\n      pageSize={pages.pageSize}\n      total={100}\n      folderCount={3}\n      renderItem={handleRender}\n      onChange={handleChange}\n    />\n  );\n};\nReactDOM.render(<Demo />, mountNode);\n````\n",
      "---\norder: 5\ntitle: 完整功能型\n---\n\n可自由选择搭配：每页显示条数、快速跳转页码、总条数。\n通过 `hideOnSinglePage` 当只有一页时，隐藏分页。\n\n````jsx\nimport { useState } from \"react\";\nimport { Pagination } from \"@ss/mtd-react\";\n\n\nconst Demo = () => {\n  const [page, setpage] = useState({\n    pageNo: 1,\n    pageSize: 10,\n  });\n\n  const handleChange = current => {\n    setpage(prevState => ({ ...prevState, pageNo: current }));\n  };\n\n  const handleTotal = (current, total, pageSize) => {\n    return `${(current - 1) * pageSize + 1}-${current * pageSize}/${total}`;\n  };\n  return (\n    <Pagination\n      current={page.pageNo}\n      pageSize={page.pageSize}\n      pageSizeOptions={[10, 20, 30, 40]}\n      total={100}\n      folderCount={3}\n      hideOnSinglePage\n      showTotal={handleTotal}\n      showQuickJumper\n      showSizeChanger\n      onChange={handleChange}\n    />\n  );\n};\nReactDOM.render(<Demo />, mountNode);\n````\n",
      "---\norder: 3\ntitle: 边框\n---\n\n支持有边框、无边框两种属性\n\n````jsx\nimport { useState } from \"react\";\nimport { Pagination } from \"@ss/mtd-react\";\n\n\nconst Demo = () => {\n  const [page, setpage] = useState({\n    pageNo: 1,\n    pageSize: 10,\n  });\n  const handleChange = current => {\n    setpage(prevState => ({ ...prevState, pageNo: current }));\n  };\n  return (\n    <div style={{ textAlign: 'left', display: 'flex', alignItems: 'center', justifyContent: 'space-around' }}>\n      <Pagination\n        bordered\n        current={page.pageNo}\n        total={100}\n        folderCount={3}\n        onChange={handleChange}\n      />\n      <Pagination\n        bordered={false}\n        current={page.pageNo}\n        total={103}\n        folderCount={3}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\nReactDOM.render(<Demo />, mountNode);\n````\n"
    ]
  },
  {
    "url": "/mtd/react/components/drag-select",
    "content": [
      "---\norder: 5\ntitle: 自定义渲染\n---\n自定义左侧展示\n\n````jsx\nimport { useState } from 'react';\nimport { Button, DragSelect, Modal } from \"@ss/mtd-react\";\n\nconst { Group, Item } = DragSelect;\n\nconst data = [\n    { value: 'userInfo', label: '员工信息', src:'https://msstest-img.sankuai.com/v1/mss_37ed3a16b0594c9fb747ff29d3d087e8/profile10/f6358302-8695-4a7d-86e2-52996feb1a19' },\n    { value: 'jobLevel', label: '职级', src:'https://msstest-img.sankuai.com/v1/mss_37ed3a16b0594c9fb747ff29d3d087e8/profile10/f6358302-8695-4a7d-86e2-52996feb1a19' },\n    { value: 'nineCell', label: '人才九宫格', src:'https://msstest-img.sankuai.com/v1/mss_37ed3a16b0594c9fb747ff29d3d087e8/profile10/f6358302-8695-4a7d-86e2-52996feb1a19' },\n    { value: 'entryTs', label: '入职时间' , src:'https://msstest-img.sankuai.com/v1/mss_37ed3a16b0594c9fb747ff29d3d087e8/profile10/f6358302-8695-4a7d-86e2-52996feb1a19' },\n    { value: 'fileType', label: '文件类型', src:'https://msstest-img.sankuai.com/v1/mss_37ed3a16b0594c9fb747ff29d3d087e8/profile10/f6358302-8695-4a7d-86e2-52996feb1a19'},\n    { value: 'use', label: '用途',src:'https://msstest-img.sankuai.com/v1/mss_37ed3a16b0594c9fb747ff29d3d087e8/profile10/f6358302-8695-4a7d-86e2-52996feb1a19' },\n    { value: 'hr', label: 'HRBP',src:'https://msstest-img.sankuai.com/v1/mss_37ed3a16b0594c9fb747ff29d3d087e8/profile10/f6358302-8695-4a7d-86e2-52996feb1a19' },\n    { value: 'country', label: '出镜国家' ,src:'https://msstest-img.sankuai.com/v1/mss_37ed3a16b0594c9fb747ff29d3d087e8/profile10/f6358302-8695-4a7d-86e2-52996feb1a19'},\n    { value: 'fare', label: '金额',src:'https://msstest-img.sankuai.com/v1/mss_37ed3a16b0594c9fb747ff29d3d087e8/profile10/f6358302-8695-4a7d-86e2-52996feb1a19' },\n    { value: 'getMethod', label: '领取方式',src:'https://msstest-img.sankuai.com/v1/mss_37ed3a16b0594c9fb747ff29d3d087e8/profile10/f6358302-8695-4a7d-86e2-52996feb1a19' },\n    { value: 'name', label: '姓名MIS',src:'https://msstest-img.sankuai.com/v1/mss_37ed3a16b0594c9fb747ff29d3d087e8/profile10/f6358302-8695-4a7d-86e2-52996feb1a19'},\n]\n\nconst initialSelectKeys = ['userInfo','jobLevel','nineCell','entryTs','fileType']\n\nconst DraggableSelectDemo = () => {\n  const [showModal, setShowModal] = useState(false);\n  const [selectedKeys, setSelectedKeys] = useState(initialSelectKeys);\n  const handleClose = () => {\n    setShowModal(false)\n  };\n  const handleReset = () => {\n    setSelectedKeys([...initialSelectKeys])\n  };\n  const handleOk = () => {\n     // do your logic ...\n     setShowModal(false)\n     setSelectedKeys([...initialSelectKeys])\n  };\n  return (\n    <React.Fragment>\n      <Button onClick={()=> setShowModal(true)}>点击展示自定义渲染</Button>\n      {showModal && (\n        <Modal title=\"设置\" onClose={handleClose} style={{width: '600px',height:'559px',overflow:'hidden'}}>\n          <Modal.Body>\n            <DragSelect\n                draggable={true}\n                left={{ \n                  header: () => (\n                    <React.Fragment>\n                      <span className=\"draggable-left-header-all\">全部</span>\n                      <span className=\"draggable-left-header-number\">{selectedKeys.length}/{data.length}</span>\n                    </React.Fragment>\n                  )\n                }}\n                right={{ \n                header: () => (\n                  <React.Fragment>\n                    <span className=\"draggable-left-header-all\">已选</span>\n                    <span className=\"draggable-left-header-number\">{selectedKeys.length}</span>\n                    <span className=\"draggable-left-header-text\">可拖拽排序</span>\n                    <Button className=\"draggable-left-header-reset-modal\" type=\"primary\" shape=\"text\" onClick={handleReset}>重置</Button>\n                  </React.Fragment>\n                )\n              }}\n              selectedKeys={selectedKeys}\n              onChange={({selectedKeys,selectedOptions,options}) => {\n                console.log('Parent change',selectedKeys,selectedOptions,options)\n                setSelectedKeys([...selectedKeys]);\n              }}\n              >\n              {\n                data.map(d =>(<Item key={d.value} value={d.value} label={d.label} className=\"mtd-draggable-select-left-img\"><div className=\"mtd-draggable-select-left-img-info\"><img className=\"mtd-draggable-select-left-logo\" src={d.src} />{d.label}</div></Item>))\n              }\n            </DragSelect>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button style={{'marginRight':'12px'}} onClick={handleClose}>\n              取消\n            </Button>\n            <Button type=\"primary\" onClick={handleOk}>\n              确定\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      )}\n    </React.Fragment>\n  )\n}\n\nReactDOM.render(<DraggableSelectDemo />, mountNode);\n````\n```css\n.mtd-modal-body {\n  overflow: hidden;\n}\n.draggable-left-header-all {\n  font-family: PingFangSC-Medium;\n  font-size: 14px;\n  color: rgba(0,0,0,0.87);\n}\n.draggable-left-header-number{\n  margin-left: 8px;\n  color: rgba(0,0,0,0.38);\n}\n.draggable-left-header-text{\n  margin-left: 8px;\n}\n.draggable-left-header-reset-modal{\n  margin-left: 84px\n}\n\n.mtd-draggable-select-left-img {\n\n}\n.mtd-draggable-select-left-img-info{\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.mtd-draggable-select-left-logo{\n  width: 28px;\n  height: 28px;\n  border-radius: 50%;\n  margin-right: 15px;\n}\n```",
      "---\norder: 3\ntitle: 过滤功能展示\n---\n\n设置过滤\n\n````jsx\nimport { useState } from 'react';\nimport { Button, DragSelect, Modal } from \"@ss/mtd-react\";\n\nconst { Group, Item } = DragSelect;\n\nconst UserInfo = [\n  { value: 'userInfo', label: '员工信息',mis:'1111'},\n  { value: 'jobLevel', label: '职级',mis:'2222' },\n  { value: 'nineCell', label: '人才九宫格' ,mis:'333' },\n  { value: 'entryTs', label: '入职时间',mis:'444'  },\n  { value: 'hr', label: 'HRBP',mis:'555'  },\n  { value: 'country', label: '出镜国家',mis:'666'  },\n  { value: 'fare', label: '金额信息' ,mis:'777' },\n  { value: 'name', label: '姓名MIS' ,mis:'888' },\n]\nconst FileInfo = [\n  { value: 'fileType', label: '文件类型' ,mis:'999' },\n  { value: 'use', label: '用途',mis:'0000'  },\n  { value: 'getMethod', label: '领取方式' ,mis:'1212' },\n  { value: 'fileown', label: '文件归档' ,mis:'777' },\n  { value: 'size', label: '文件大小' ,mis:'888' },\n]\n\nconst filterRules = ['label','value','mis'];\n\nconst DraggableSelectDemo = () => {\n  const [showModal, setShowModal] = useState(false);\n  const [selectedKeys, setSelectedKeys] = useState([]);\n  const handleClose = () => {\n    setShowModal(false)\n    setSelectedKeys([])\n  };\n  const handleReset = () => {\n    setSelectedKeys([])\n  };\n  const handleOk = () => {\n     // do your logic ...\n     setShowModal(false)\n     setSelectedKeys([])\n  };\n  return (\n    <React.Fragment>\n      <Button onClick={()=> setShowModal(true)}>点击展示过滤功能</Button>\n      {showModal && (\n        <Modal title=\"设置\" onClose={handleClose} style={{width: '600px',height:'559px'}}>\n          <Modal.Body>\n            <DragSelect\n              left={{ \n                header: () => (\n                  <React.Fragment>\n                    <span className=\"draggable-left-header-all\">已选</span>\n                    <span className=\"draggable-left-header-number\">{selectedKeys.length}</span>\n                    <span className=\"draggable-left-header-text\">可拖拽排序</span>\n                    <Button className=\"draggable-left-header-reset-modal\" type=\"primary\" shape=\"text\" onClick={handleReset}>重置</Button>\n                  </React.Fragment>\n                ),\n                filterable: true,\n                placeholder:'请输mis,名称,value进行过滤',\n                onFilter: (filterValue,selectedKeys,options,renderNoData) => {\n                  const renderUser = [];\n                  const renderFile = [];\n                  UserInfo.map(user => {\n                      filterRules.map(rule => {\n                        if(`${user[rule]}`.includes(filterValue)){\n                        renderUser.push(user)\n                      }\n                    })\n                  });\n\n                  FileInfo.map(file => {\n                    filterRules.map(rule => {\n                      if(`${file[rule]}`.includes(filterValue)){\n                        renderFile.push(file)\n                      }\n                    })\n                  });\n                  return (\n                    <React.Fragment>\n                    {renderUser.length > 0 && (\n                        <Group label=\"员工信息\">\n                        {\n                          renderUser.map(user => <Item key={user.value} value={user.value} label={user.label} />)\n                        }\n                        </Group>\n                    )}\n                    {renderFile.length > 0 && (\n                        <Group label=\"文件信息\">\n                        {\n                          renderFile.map(file => <Item key={file.value} value={file.value} label={file.label} />)\n                        }\n                        </Group>\n                    )}\n                    {\n                      renderFile.length === 0 && renderUser.length === 0 && (\n                        renderNoData\n                      )\n                    }\n                    </React.Fragment>\n                  )\n                }\n              }}\n              right={{ \n                header: () => (\n                  <React.Fragment>\n                    <span className=\"draggable-left-header-all\">已选</span>\n                    <span className=\"draggable-left-header-number\">{selectedKeys.length}</span>\n                    <span className=\"draggable-left-header-text\">可拖拽排序</span>\n                    <Button className=\"draggable-left-header-reset-modal\" type=\"primary\" shape=\"text\" onClick={handleReset}>重置</Button>\n                  </React.Fragment>\n                ),\n              }}\n              selectedKeys={selectedKeys}\n              onChange={({selectedKeys,selectedOptions,options}) => {\n                console.log('Parent change',selectedKeys,selectedOptions,options)\n                setSelectedKeys([...selectedKeys]);\n              }}\n            >\n              <Group label=\"员工信息\">\n                { Array.isArray(UserInfo) && UserInfo.map(d => <Item key={d.value} data={d} value={d.value} label={d.label} />)}\n              </Group>\n              <Group label=\"文件信息\">\n                { Array.isArray(FileInfo) && FileInfo.map(d => <Item  key={d.value} data={d} value={d.value} label={d.label} />)}\n              </Group>\n            </DragSelect>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button style={{'marginRight':'12px'}} onClick={handleClose}>\n              取消\n            </Button>\n            <Button type=\"primary\" onClick={handleOk}>\n              确定\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      )}\n    </React.Fragment>\n  )\n}\n\nReactDOM.render(<DraggableSelectDemo />, mountNode);\n````\n```css\n.mtd-modal-body {\n    overflow:hidden;\n}\n.draggable-left-header-all {\n  font-family: PingFangSC-Medium;\n  font-size: 14px;\n  color: rgba(0,0,0,0.87);\n}\n.draggable-left-header-number{\n  margin-left: 8px;\n  color: rgba(0,0,0,0.38);\n}\n.draggable-left-header-text{\n  margin-left: 8px;\n}\n.draggable-left-header-reset-modal{\n  margin-left: 84px\n}\n\n\n```",
      "---\norder: 2\ntitle: 可编辑可拖拽\n---\n\n设置项目是否可以拖拽编辑\n\n```jsx\nimport { useState } from 'react';\nimport { Button, DragSelect } from '@ss/mtd-react';\n\nconst { Group, Item } = DragSelect;\n\nconst data = [\n  { value: 'userInfo', label: '员工信息', disabled: true, draggable: false },\n  { value: 'jobLevel', label: '职级', disabled: true, draggable: false },\n  { value: 'nineCell', label: '人才九宫格', disabled: true, draggable: true },\n  { value: 'entryTs', label: '入职时间', disabled: true, draggable: true },\n  { value: 'fileType', label: '文件类型' },\n  { value: 'use', label: '用途' },\n  { value: 'hr', label: 'HRBP' },\n  { value: 'country', label: '出镜国家' },\n  { value: 'fare', label: '金额' },\n  { value: 'getMethod', label: '领取方式' },\n  { value: 'name', label: '姓名MIS' },\n];\n\nconst initialSelectKeys = ['userInfo', 'jobLevel', 'nineCell', 'entryTs', 'fileType'];\n\nconst DraggableSelectDemo = () => {\n  const [selectedKeys, setSelectedKeys] = useState([...initialSelectKeys]);\n  const handleReset = () => {\n    // do your logic ...\n    setSelectedKeys([...initialSelectKeys]);\n  };\n  const handleOk = () => {\n    // do your logic ...\n    console.log('已选' + selectedKeys);\n    setSelectedKeys([...initialSelectKeys]);\n  };\n  return (\n    <div className=\"dragSelect-wrap\">\n      <DragSelect\n        draggable={true}\n        left={{\n          header: () => (\n            <React.Fragment>\n              <span className=\"draggable-left-header-all\">全部</span>\n              <span className=\"draggable-left-header-number\">\n                {selectedKeys.length}/{data.length}\n              </span>\n            </React.Fragment>\n          ),\n        }}\n        right={{\n          header: () => (\n            <React.Fragment>\n              <span className=\"draggable-left-header-all\">已选</span>\n              <span className=\"draggable-left-header-number\">{selectedKeys.length}</span>\n              <span className=\"draggable-left-header-text\">可拖拽排序</span>\n              <Button className=\"draggable-left-header-reset\" type=\"primary\" shape=\"text\" onClick={handleReset}>\n                重置\n              </Button>\n            </React.Fragment>\n          ),\n        }}\n        selectedKeys={selectedKeys}\n        onChange={({ selectedKeys, selectedOptions, options }) => {\n          console.log('Parent change', selectedKeys, selectedOptions, options);\n          setSelectedKeys([...selectedKeys]);\n        }}\n      >\n        {data.map(({ value, label, disabled, draggable }) => (\n          <Item key={value} value={value} label={label} disabled={disabled} draggable={draggable} />\n        ))}\n      </DragSelect>\n      <Button type=\"primary\" onClick={handleOk} className=\"draggable-btn\">\n        确定\n      </Button>\n    </div>\n  );\n};\n\nReactDOM.render(<DraggableSelectDemo />, mountNode);\n```\n\n```css\n.dragSelect-wrap .mtd-draggable-select {\n  height: 400px;\n}\n.draggable-left-header-all {\n  font-family: PingFangSC-Medium;\n  font-size: 14px;\n  color: rgba(0, 0, 0, 0.87);\n}\n.draggable-left-header-number {\n  margin-left: 8px;\n  color: rgba(0, 0, 0, 0.38);\n}\n.draggable-left-header-text {\n  margin-left: 8px;\n}\n.draggable-left-header-reset {\n  margin-left: 195px;\n}\n.dragSelect-wrap .mtd-draggable-select-left,\n.dragSelect-wrap .mtd-draggable-select-right {\n  padding-bottom: 10px;\n}\n.draggable-btn {\n  margin: 20px 0 0 700px;\n}\n```\n",
      "---\norder: 1\ntitle: 基本用法\n---\n\n拖拽排序的基本用法\n\n````jsx\nimport { useState } from 'react';\nimport { Button, DragSelect } from \"@ss/mtd-react\";\n\nconst { Group, Item } = DragSelect;\n\nconst data = [\n  { value: 1, label: '员工信息' },\n  { value: 2, label: '职级' },\n  { value: 3, label: '人才九宫格' },\n  { value: 4, label: '文件类型' },\n  { value: 5, label: '用途' },\n  { value: 6, label: 'HRBP' },\n  { value: 7, label: '出镜国家' },\n  { value: 8, label: '金额' },\n  { value: 9, label: '入职时间' },\n]\n\nconst DraggableSelectDemo = () => {\n  const [selectedKeys, setSelectedKeys] = useState([]);\n  const handleReset = () => {\n    setSelectedKeys([])\n  };\n  const handleOk = () => {\n    // do your logic ...\n    console.log('已选' + selectedKeys);\n    setSelectedKeys([])\n  };\n  return (\n    <div className='dragSelect-wrap'>\n      <DragSelect\n        left={{ \n          header: () => (\n            <React.Fragment>\n              <span className=\"draggable-left-header-all\">全部</span>\n              <span className=\"draggable-left-header-number\">{selectedKeys.length}/{data.length}</span>\n            </React.Fragment>\n          ),\n        }}\n        right={{ \n          header: () => (\n            <React.Fragment>\n              <span className=\"draggable-left-header-all\">已选</span>\n              <span className=\"draggable-left-header-number\">{selectedKeys.length}</span>\n              <span className=\"draggable-left-header-text\">可拖拽排序</span>\n              <Button className=\"draggable-left-header-reset\" type=\"primary\" shape=\"text\" onClick={handleReset}>重置</Button>\n            </React.Fragment>\n          )\n        }}\n        selectedKeys={selectedKeys}\n        onChange={({selectedKeys,selectedOptions,options}) => {\n          console.log('Parent change',selectedKeys,selectedOptions,options)\n          setSelectedKeys([...selectedKeys]);\n        }}\n      >\n        {\n          data.map(({value,label})=>(<Item key={value} value={value} label={label} />))\n        }\n      </DragSelect>\n      <Button type=\"primary\" onClick={handleOk} className=\"draggable-btn\">\n        确定\n      </Button>\n    </div>\n  )\n}\n\nReactDOM.render(<DraggableSelectDemo />, mountNode);\n````\n```css\n.dragSelect-wrap .mtd-draggable-select{\n  height: 400px;\n}\n.draggable-left-header-all {\n  font-family: PingFangSC-Medium;\n  font-size: 14px;\n  color: rgba(0,0,0,0.87);\n}\n.draggable-left-header-number{\n  margin-left: 8px;\n  color: rgba(0,0,0,0.38);\n}\n.draggable-left-header-text{\n  margin-left: 8px;\n}\n.draggable-left-header-reset{\n  margin-left: 195px;\n}\n.draggable-btn{\n  margin: 20px 0 0 1000px;\n}\n\n```",
      "---\norder: 3\ntitle: 分组展示\n---\n\n设置分组展示\n\n```jsx\nimport { useState } from 'react';\nimport { Button, DragSelect } from '@ss/mtd-react';\n\nconst { Group, Item } = DragSelect;\n\nconst UserInfo = [\n  { value: 'userInfo', label: '员工信息' },\n  { value: 'jobLevel', label: '职级' },\n  { value: 'nineCell', label: '人才九宫格' },\n  { value: 'entryTs', label: '入职时间' },\n  { value: 'hr', label: 'HRBP' },\n  { value: 'country', label: '出镜国家' },\n  { value: 'fare', label: '金额' },\n  { value: 'name', label: '姓名MIS' },\n];\nconst FileInfo = [\n  { value: 'fileType', label: '文件类型' },\n  { value: 'use', label: '用途' },\n  { value: 'getMethod', label: '领取方式' },\n];\n\nconst DraggableSelectDemo = () => {\n  const [selectedKeys, setSelectedKeys] = useState([]);\n  const handleReset = () => {\n    setSelectedKeys([])\n  };\n  const handleOk = () => {\n    // do your logic ...\n    console.log('已选' + selectedKeys);\n    setSelectedKeys([])\n  };\n  return (\n    <div className='dragSelect-wrap'>\n      <DragSelect\n        left={{\n          header: () => (\n            <React.Fragment>\n              <span className=\"draggable-left-header-all\">已选</span>\n              <span className=\"draggable-left-header-number\">{selectedKeys.length}</span>\n            </React.Fragment>\n          ),\n        }}\n        right={{\n          header: () => (\n            <React.Fragment>\n              <span className=\"draggable-left-header-all\">已选</span>\n              <span className=\"draggable-left-header-number\">{selectedKeys.length}</span>\n              <span className=\"draggable-left-header-text\">可拖拽排序</span>\n              <Button\n                className=\"draggable-left-header-reset\"\n                type=\"primary\"\n                shape=\"text\"\n                onClick={handleReset}\n              >\n                重置\n              </Button>\n            </React.Fragment>\n          ),\n        }}\n        selectedKeys={selectedKeys}\n        onChange={({ selectedKeys, selectedOptions, options }) => {\n          console.log('Parent change', selectedKeys, selectedOptions, options);\n          setSelectedKeys([...selectedKeys]);\n        }}\n      >\n        <Group label=\"员工信息\">\n          {Array.isArray(UserInfo) &&\n            UserInfo.map(({ label, value, disabled, draggable }) => (\n              <Item key={value} value={value} label={label} disabled={disabled} draggable={draggable} />\n            ))}\n        </Group>\n        <Group label=\"文件信息\">\n          {Array.isArray(FileInfo) &&\n            FileInfo.map(({ label, value, draggable, disabled }) => (\n              <Item key={value} value={value} label={label} disabled={disabled} draggable={draggable} />\n            ))}\n        </Group>\n      </DragSelect>\n      <Button type=\"primary\" onClick={handleOk} className=\"draggable-btn\">\n        确定\n      </Button>\n    </div>\n  )\n}\n\nReactDOM.render(<DraggableSelectDemo />, mountNode);\n```\n\n```css\n.dragSelect-wrap .mtd-draggable-select{\n  height: 400px;\n}\n.draggable-left-header-all {\n  font-family: PingFangSC-Medium;\n  font-size: 14px;\n  color: rgba(0, 0, 0, 0.87);\n}\n.draggable-left-header-number {\n  margin-left: 8px;\n  color: rgba(0, 0, 0, 0.38);\n}\n.draggable-left-header-text {\n  margin-left: 8px;\n}\n.draggable-left-header-reset{\n  margin-left: 195px;\n}\n.dragSelect-wrap .mtd-draggable-select-left, .dragSelect-wrap .mtd-draggable-select-right{\n  padding-bottom: 10px;\n}\n.draggable-btn{\n  margin: 20px 0 0 700px;\n}\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/form",
    "content": [
      "---\norder: 13\ntitle: 自定义校验\n# noPreview: true\n---\n\n当 async-validator 的规则无法满足普通校验时候，需要自定义校验规则。\n\n```jsx\nimport { useRef } from 'react';\nimport { Form, Button, Select, Radio, Input, DatePicker } from '@ss/mtd-react';\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\nconst data = [\n  { value: 'Shanghai', label: '上海' },\n  { value: 'Beijing', label: '北京' },\n  { value: 'Chengdu', label: '成都' },\n  { value: 'Shenzhen', label: '深圳' },\n  { value: 'Guangzhou', label: '广州' },\n  { value: 'Chongqin', label: '重庆' },\n];\n\nconst CustomValidate = () => {\n  const formRef = useRef();\n\n  const validate = () => {\n    formRef.current.validateFields();\n  };\n\n  return (\n    <Form className=\"custom-validate-form\" ref={formRef} style={{ width: 500 }}>\n      <FormItem\n        span={24}\n        formItemKey=\"city\"\n        label=\"作用城市：\"\n        rules={[\n          { required: true, message: '城市为必填项' },\n          { type: 'array', min: 2, message: '最少选择两个城市' },\n          {\n            validator(rule, value, callback, source, options) {\n              value = value || [];\n              if (value.length > 3) {\n                callback('城市选择不能超过3个');\n              } else if (!value.some(item => item.value === 'Beijing')) {\n                callback('北京为必选城市');\n              } else {\n                callback(); // 成功不传任何参数\n              }\n            },\n          },\n        ]}\n      >\n        <Select toFormItem multiple>\n          {data.map((option, index) => (\n            <Option key={index} value={option.value}>\n              {option.label}\n            </Option>\n          ))}\n        </Select>\n      </FormItem>\n      <Form.Item formItemKey=\"taskType\" label=\"任务类型：\" required message=\"请选择任务类型\">\n        <Select toFormItem clearable placeholder=\"请选择任务类型\">\n          {[\n            { id: 1, name: '定时任务' },\n            { id: 2, name: '单次任务' },\n          ].map((option, index) => (\n            <Option key={index} value={option.id}>\n              {' '}\n              {option.name}{' '}\n            </Option>\n          ))}\n        </Select>\n      </Form.Item>\n      <Form.Item formItemKey=\"startPlay\" label=\"执行时间：\" required message=\"请选择开始执行时间\">\n        <DatePicker toFormItem placeholder=\"请选择开始执行时间\" format=\"YYYY.MM.DD HH:mm:ss\" />\n      </Form.Item>\n      <Form.Item formItemKey=\"cron\" label=\"执行频次：\" className=\"cron\" required span=\"12\" message=\"请选择执行频次\">\n        <Radio.Group toFormItem className=\"cron-radio\">\n          <Radio value=\"day\">天</Radio>\n          <Radio value=\"hour\">时</Radio>\n          <Radio value=\"minute\">分</Radio>\n        </Radio.Group>\n      </Form.Item>\n      <Form.Item\n        formItemKey=\"timeValue\"\n        className=\"cron-combine\"\n        span=\"12\"\n        rules={[\n          { required: true, message: '请输入执行频次' },\n          { message: '仅支持输入数字', pattern: /^\\d+$/g },\n          {\n            validator(rule, value, callback, source, options) {\n              const { cron = '' } = formRef.current.getFieldsValue();\n              let errorMessage = undefined;\n              value = +value; // 数字类型处理\n              switch (cron) {\n                case 'minute':\n                  if (value < 0 || value > 59) errorMessage = '分钟范围为0至59分';\n                  break;\n                case 'hour':\n                  if (value < 0 || value > 23) errorMessage = '小时范围为0至23时';\n                  break;\n                case 'day':\n                  if (value < 1 || value > 31) errorMessage = '天数范围为1至31天';\n                  break;\n                default:\n                  errorMessage = '请输入执行频次';\n              }\n              // callback参数为undefined或者不传为校验正常\n              callback(errorMessage);\n            },\n          },\n        ]}\n      >\n        <Input addonAfter=\"天/小时/分\" />\n      </Form.Item>\n      <FormItem span={24} labelWidth=\"6em\">\n        <Button type=\"primary\" onClick={validate}>\n          校验\n        </Button>\n      </FormItem>\n    </Form>\n  );\n};\n\nReactDOM.render(<CustomValidate />, mountNode);\n```\n\n```css\n.cron-combine .mtd-form-item-body {\n  text-align: right;\n}\n```\n",
      "---\norder: 4\ntitle: label postion\n# noPreview: true\n---\n\n对于 label 的控制我们提供了三种布局左对齐(left)、右对齐(right)、顶部对齐(top)\n\n```jsx\nimport { useState } from 'react';\nimport { Form, Input, Radio } from '@ss/mtd-react';\n\nconst App = () =>{\n  const [labelPosition, setLabelPosition] = useState('left');\n  \n  const onChange = value => {\n    setLabelPosition(value);\n  };\n\n  return (\n    <div className=\"label-position-demo\">\n      <Radio.Group value={labelPosition} onChange={onChange}>\n        <Radio value=\"left\">左对齐</Radio>\n        <Radio value=\"right\">右对齐</Radio>\n        <Radio value=\"top\">顶部对齐</Radio>\n      </Radio.Group>\n      <Form labelPosition={labelPosition}>\n        <Form.Item formItemKey=\"name\" label=\"组件名称：\">\n          <Input toFormItem />\n        </Form.Item>\n        <Form.Item formItemKey=\"cate\" label=\"组件分类：\">\n          <Input toFormItem />\n        </Form.Item>\n        <Form.Item formItemKey=\"useDesc\" label=\"组件用途：\">\n          <Input toFormItem />\n        </Form.Item>\n      </Form>\n    </div>\n  );\n}\nReactDOM.render(<App />, mountNode);\n```\n\n```css\n.label-position-demo {\n  width: 500px;\n}\n.label-position-demo .mtd-radio-group {\n  margin-bottom: 16px;\n}\n```\n",
      "---\norder: 11\ntitle: 自定义Form.Item嵌套组件\n# noPreview: true\n---\n\nForm.Item 除了嵌套 Input、Select 等组件，也可以自定义组件，自定义的组件一定要加个`onChange`方法回传值，Form 才能获取自定义组件的值，并接受`value`并。\n\n```jsx\nimport { useMemo, useRef } from 'react';\nimport { Form, Input, Button, Modal } from '@ss/mtd-react';\n\nconst FormItem = Form.Item;\n\n// 自定义组件\nconst IPInput = props => {\n  const ips = useMemo(() => props.value && props.value.split('.'), [props.value]) || [];\n  // Form会拿到自定义组件，在props上加上onchange事件， 所以你能调用 props.onChange\n  // 调用props.onChange 回传值给Form组件后，这样Form的getFieldsValue方法才能获取自定义组件的值\n  const onChange = (e, index) => {\n    ips[index] = e.target.value;\n    props.onChange && props.onChange(ips.join('.'));\n  };\n\n  return (\n    <div className=\"ip-input\">\n      <Input value={ips[0] || ''} onChange={e => onChange(e, 0)} clearable={false} />\n      <span>.</span>\n      <Input value={ips[1] || ''} onChange={e => onChange(e, 1)} clearable={false} />\n      <span>.</span>\n      <Input value={ips[2] || ''} onChange={e => onChange(e, 2)} clearable={false} />\n      <span>.</span>\n      <Input value={ips[3] || ''} onChange={e => onChange(e, 3)} clearable={false} />\n    </div>\n  );\n};\n\nconst FormDemo = () => {\n  const formRef = useRef(null);\n\n  const getValue = () => {\n    if (formRef.current.validateFields()) {\n      const data = formRef.current.getFieldsValue();\n      Modal.info({\n        title: '表单数据',\n        message: JSON.stringify(data),\n      });\n    }\n  };\n\n  const setValue = () => {\n    let fieldsValue = {\n      site: 'mtd.sankuai.com',\n      ip: '10.201.85.266',\n    };\n    formRef.current.setFieldsValue(fieldsValue);\n  };\n\n  return (\n    <Form ref={formRef} style={{ width: 400 }} defaultFieldsValue={{ site: 'www.meituan.com' }}>\n      <FormItem span={24} formItemKey=\"site\" label=\"网址：\">\n        <span style={{ color: '#4E73FF' }} toFormItem>\n          *\n        </span>\n      </FormItem>\n      <FormItem span={24} formItemKey=\"ip\" label=\"ip地址：\" required>\n        <IPInput toFormItem />\n      </FormItem>\n      <FormItem span={24} labelWidth=\"6em\">\n        <Button type=\"primary\" onClick={setValue} style={{ marginRight: 12 }}>\n          赋值\n        </Button>\n        <Button type=\"primary\" onClick={getValue}>\n          取值\n        </Button>\n      </FormItem>\n    </Form>\n  );\n};\n\nReactDOM.render(<FormDemo />, mountNode);\n```\n\n```css\n.ip-input {\n  display: table;\n}\n.ip-input span {\n  display: table-cell;\n  width: 0.01%;\n  padding: 0 2px;\n  font-size: 24px;\n  vertical-align: bottom;\n}\n.ip-input .mtd-input {\n  display: table-cell;\n  width: 25%;\n}\n```\n",
      "---\norder: 9\ntitle: 数据联动\n# noPreview: true\n---\n\n使用 onFieldValueChange 监听 Form 中某个字段改变，更新其他字段也很常见。\n\n```jsx\nimport { useRef } from 'react';\nimport { Form, Input, Button, Select } from '@ss/mtd-react';\n\nconst App = () => {\n  const formRef = useRef(null);\n\n  const handleSubmit = () => {\n    if (formRef.current.validateFields()) {\n      const data = formRef.current.getFieldsValue();\n      console.log('form date:', data);\n    }\n  };\n\n  const onFieldValueChangeHandle = (fieldKey, value) => {\n    if (fieldKey === 'onlySelect') {\n      formRef.current.setFieldsValue({ name: value.value });\n    }\n  };\n\n  return (\n    <Form ref={formRef} labelWidth=\"8em\" className=\"form-set-value\" onFieldValueChange={onFieldValueChangeHandle}>\n      <Form.Item formItemKey=\"name\" label=\"输入框：\" message=\"请输入内容\" required>\n        <Input toFormItem placeholder=\"输入姓名\" />\n      </Form.Item>\n      <Form.Item formItemKey=\"onlySelect\" label=\"单选下拉：\">\n        <Select toFormItem placeholder=\"单选框\">\n          <Select.Option key=\"zhangsan\" value=\"张三\">\n            张三\n          </Select.Option>\n          <Select.Option key=\"lisi\" value=\"李四\">\n            李四\n          </Select.Option>\n          <Select.Option key=\"wangwu\" value=\"王五\">\n            王五\n          </Select.Option>\n        </Select>\n      </Form.Item>\n      <Form.Item>\n        <Button type=\"primary\" onClick={handleSubmit}>\n          提交\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\nReactDOM.render(<App />, mountNode);\n```\n\n```css\n.form-set-value {\n  width: 400px;\n}\n```\n",
      "---\norder: 1\ntitle: useContext\n# noPreview: true\n---\n\nForm 设置 useContext=true 后，不再限制只能使用 FormItem，可支持任意组件标签嵌套 FormItem，使用更加灵活。\n可以结合组件 Row, Col，Div 等实现不同布局\n\n```jsx\nimport { Form, Button, Row, Col } from '@ss/mtd-react';\nimport { Input, Select, Checkbox, Radio, RangePicker } from '@ss/mtd-react';\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\nconst FormDemo = () => {\n  return (\n    <Form useContext style={{ width: 500 }} defaultFieldsValue={{ content: '恒电' }}>\n      <Row gutter={24}>\n        <Col span={10} className=\"rightBorder\">\n          <FormItem formItemKey=\"name\" label=\"活动名称：\">\n            <Input toFormItem />\n          </FormItem>\n          <FormItem formItemKey=\"content\" label=\"活动地点：\">\n            <span toFormItem />\n          </FormItem>\n        </Col>\n        <Col span={14}>\n          <FormItem formItemKey=\"detail\" label=\"活动描述：\">\n            <Input.TextArea toFormItem />\n          </FormItem>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nReactDOM.render(<FormDemo />, mountNode);\n```\n\n```css\n.rightBorder {\n  border-right: 1px solid #eee;\n}\n```\n",
      "---\norder: 6\ntitle: 搜索布局\n# noPreview: true\n---\n\n三列栅格的表单布局，常用于表格的高级搜索。\n部分定制样式代码，可以控制搜索条件的展开收起。\n\n```jsx\nimport { useState, useRef } from 'react';\nimport { Form, Input, Button, Icon } from '@ss/mtd-react';\n\nconst FormItem = Form.Item;\n\nconst FormLayoutSearch = () => {\n  const [expand, setExpand] = useState(false);\n  const formRef = useRef(null);\n\n  const handleToggle = () => {\n    setExpand(!expand);\n  };\n\n  const handleReset = () => {\n    formRef.current.reset();\n  };\n\n  const handleSearch = () => {\n    if (formRef.current.validateFields()) {\n      let formData = formRef.current.getFieldsValue();\n      //执行搜索逻辑\n      console.log(formData);\n    }\n  };\n\n  const renderFields = () => {\n    let count = expand ? 11 : 5;\n    let children = [];\n    for (let i = 1; i <= count; i++) {\n      children.push(\n        <FormItem\n          formItemKey={`field-${i}`}\n          key={i}\n          span={8}\n          label={`Field ${i}：`}\n          rules={{ required: true, message: 'Input something!' }}\n        >\n          <Input toFormItem placeholder={`placeholder-${i}`} />\n        </FormItem>,\n      );\n    }\n    return children;\n  };\n\n  return (\n    <Form ref={formRef} className=\"form-layout-search\">\n      {renderFields()}\n      <FormItem span={8} className=\"form-item-search\">\n        <Button type=\"primary\" onClick={handleSearch}>\n          搜索\n        </Button>\n        <Button style={{ marginLeft: 8 }} onClick={handleReset}>\n          重置\n        </Button>\n        <a className=\"form-layout-search-toggle\" style={{ marginLeft: 8, fontSize: 12 }} onClick={handleToggle}>\n          Collapse <Icon type={expand ? 'up-thick' : 'down-thick'} />\n        </a>\n      </FormItem>\n    </Form>\n  );\n};\nReactDOM.render(<FormLayoutSearch />, mountNode);\n```\n\n```css\n.form-layout-search {\n  width: 720px;\n}\n.form-layout-search .form-item-search .mtd-form-item-body {\n  text-align: right;\n}\n.form-layout-search-toggle:hover {\n  cursor: pointer;\n}\n```\n",
      "---\norder: 10\ntitle: 类型枚举\n# noPreview: true\n---\n\nForm 作为一个容器，FormItem 包裹的元素只要提供了 value 和 onChange，就可以直接享受 Form 数据处理机制。\n\n下拉树和上传完成之后会补充进来。\n\n```jsx\nimport { useState, useRef } from 'react';\nimport {\n  Form,\n  Input,\n  Radio,\n  Button,\n  Checkbox,\n  Select,\n  TreeSelect,\n  Table,\n  Icon,\n  Upload,\n  Filelist,\n  DatePicker,\n  TimePicker,\n  RangePicker,\n  AutoComplete,\n} from '@ss/mtd-react';\n\nconst RadioGroup = Radio.Group;\n\nconst treeData = [\n  { id: 'mt', name: '美团平台' },\n  {\n    id: 'jt',\n    name: '集团',\n    children: [\n      {\n        id: 'jcyf',\n        name: '基础研发平台',\n        children: [\n          {\n            id: 'qypt',\n            name: '企业平台研发部',\n            children: [\n              { id: 'hr', name: 'HR研发中心' },\n              { id: 'it', name: 'IT服务运营中心' },\n              { id: 'dx', name: '大象业务部' },\n              { id: 'fw', name: '平台服务中心' },\n            ],\n          },\n          {\n            id: 'xx',\n            name: '信息安全中心',\n            children: [\n              { id: 'ss', name: '基础设施安全组' },\n              { id: 'ptyf', name: '平台研发组' },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  { id: 'dp', name: '点评平台' },\n];\n\nconst defaultValue = {\n  name: '张三',\n  password: 123123,\n  email: 'zhangsan',\n  memo: '张三要写备注',\n  time: '21:13:14',\n  date: Date.now(),\n  durDate: [1538323200000, 1540483199000],\n  number: 123.123,\n  onlySelect: { value: 'hanzu', label: '汉族' },\n  mutiSelect: [\n    { value: 'Shanghai', label: '上海' },\n    { value: 'Beijing', label: '北京' },\n  ],\n  onlySelectKeyValue: 'hanzu',\n  onlyMultiSelectKeyValue: ['hanzu', 'huizu'],\n  treeSelect: { id: 'mt', name: '美团平台' },\n  mutlTreeSelect: [\n    { id: 'mt', name: '美团平台' },\n    { id: 'jt', name: '集团' },\n  ],\n  singleRadio: '1',\n  checkbox: ['zuqiu', 'youyong'],\n  checkbox2: true,\n  autoName: '李白',\n};\n\nconst App = () => {\n  const [file, setFile] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const formRef = useRef(null);\n\n  const handleSubmit = () => {\n    const data = {\n      ...formRef.current.getFieldsValue(),\n      uploader: file && file.url,\n    };\n    console.log('form data:', data);\n  };\n\n  const onUpload = file => {\n    console.log('onUpload', file);\n    setLoading(true);\n  };\n\n  const onError = (error, file) => {\n    console.log('onError', error, file);\n    setLoading(false);\n  };\n\n  const onSuccess = (res, file) => {\n    setFile(null);\n    setLoading(false);\n  };\n\n  const onRemove = () => {\n    setFile(null);\n  };\n\n  return (\n    <div>\n      <Form ref={formRef} labelWidth=\"8em\" className=\"all-type\" defaultFieldsValue={defaultValue}>\n        <Form.Item formItemKey=\"company\" label=\"公司：\">\n          <div>\n            <span>美团点评</span>\n            <Icon type=\"home-o\" style={{ marginLeft: '10px' }} />\n          </div>\n        </Form.Item>\n        <Form.Item formItemKey=\"name\" label=\"输入框：\" message=\"请输入内容\" required>\n          <Input toFormItem placeholder=\"输入姓名\" className=\"all-type__name\" />\n        </Form.Item>\n        <Form.Item formItemKey=\"password\" label=\"密码框：\">\n          <Input toFormItem type=\"password\" placeholder=\"输入密码\" className=\"all-type__password\" />\n        </Form.Item>\n        <Form.Item formItemKey=\"number\" label=\"数字框：\">\n          <Input toFormItem type=\"number\" placeholder=\"输入数字\" className=\"all-type__number\" />\n        </Form.Item>\n        <Form.Item formItemKey=\"autoName\" label=\"自动完成：\" message=\"内容不能为空\">\n          <AutoComplete toFormItem filterable={false} placeholder=\"请输入\">\n            {['李白', '李贺', '杜甫', '白居易', '屈原'].map(option => (\n              <AutoComplete.Option key={option} value={option}>\n                {option}\n              </AutoComplete.Option>\n            ))}\n          </AutoComplete>\n        </Form.Item>\n        <Form.Item formItemKey=\"email\" label=\"邮箱：\">\n          <Input toFormItem className=\"all-type__email\" addonAfter=\"@meituan.com\" placeholder=\"输入邮箱\" />\n        </Form.Item>\n        <Form.Item formItemKey=\"memo\" label=\"备注框：\">\n          <Input.TextArea toFormItem maxLength={500} showCount rows={3} placeholder=\"输入备注\" className=\"all-type__memo\" />\n        </Form.Item>\n        <Form.Item formItemKey=\"time\" label=\"时间选择器：\">\n          <TimePicker toFormItem format=\"%H:%M:%S\" placeholder=\"请选择时间\" />\n        </Form.Item>\n        <Form.Item formItemKey=\"date\" label=\"日期选择器：\">\n          <DatePicker toFormItem placeholder=\"请选择日期\" />\n        </Form.Item>\n        <Form.Item formItemKey=\"durDate\" label=\"区间日期选择：\">\n          <RangePicker single toFormItem placeholder={['选择起始时间', '选择结束时间']} />\n        </Form.Item>\n        <Form.Item formItemKey=\"onlySelect\" label=\"单选下拉：\">\n          <Select toFormItem className=\"all-type__nation\" placeholder=\"单选框\">\n            <Select.Option key=\"hanzu\" value=\"hanzu\">\n              汉族\n            </Select.Option>\n            <Select.Option key=\"huizu\" value=\"huizu\">\n              回族\n            </Select.Option>\n            <Select.Option key=\"baizu\" value=\"baizu\">\n              白族\n            </Select.Option>\n            <Select.Option key=\"mengguzu\" value=\"mengguzu\">\n              蒙古族\n            </Select.Option>\n          </Select>\n        </Form.Item>\n        <Form.Item formItemKey=\"mutiSelect\" label=\"多选下拉：\">\n          <Select multiple toFormItem className=\"all-type__nation\" placeholder=\"多选框\">\n            <Select.Option key=\"hanzu\" value=\"hanzu\">\n              汉族\n            </Select.Option>\n            <Select.Option key=\"huizu\" value=\"huizu\">\n              回族\n            </Select.Option>\n            <Select.Option key=\"baizu\" value=\"baizu\">\n              白族\n            </Select.Option>\n            <Select.Option key=\"mengguzu\" value=\"mengguzu\">\n              蒙古族\n            </Select.Option>\n          </Select>\n        </Form.Item>\n        <Form.Item formItemKey=\"onlySelectKeyValue\" label=\"单选只取key：\">\n          <Select toFormItem className=\"all-type__nation\" placeholder=\"单选框\" onlyKeyValue filterOption>\n            <Select.Option key=\"hanzu\" value=\"hanzu\">\n              汉族\n            </Select.Option>\n            <Select.Option key=\"huizu\" value=\"huizu\">\n              回族\n            </Select.Option>\n            <Select.Option key=\"baizu\" value=\"baizu\">\n              白族\n            </Select.Option>\n            <Select.Option key=\"mengguzu\" value=\"mengguzu\">\n              蒙古族\n            </Select.Option>\n          </Select>\n        </Form.Item>\n        <Form.Item formItemKey=\"onlyMultiSelectKeyValue\" label=\"多选只取key：\">\n          <Select multiple toFormItem className=\"all-type__nation\" placeholder=\"多选框\" onlyKeyValue filterOption>\n            <Select.Option key=\"hanzu\" value=\"hanzu\">\n              汉族\n            </Select.Option>\n            <Select.Option key=\"huizu\" value=\"huizu\">\n              回族\n            </Select.Option>\n            <Select.Option key=\"baizu\" value=\"baizu\">\n              白族\n            </Select.Option>\n            <Select.Option key=\"mengguzu\" value=\"mengguzu\">\n              蒙古族\n            </Select.Option>\n          </Select>\n        </Form.Item>\n        <Form.Item formItemKey=\"treeSelect\" label=\"树下拉：\">\n          <TreeSelect\n            toFormItem\n            filterable={false}\n            treeProps={{ keyField: 'id', labelField: 'name' }}\n            data={treeData}\n          />\n        </Form.Item>\n        <Form.Item formItemKey=\"mutlTreeSelect\" label=\"多选树下拉：\">\n          <TreeSelect\n            toFormItem\n            multiple\n            filterable={false}\n            treeProps={{ keyField: 'id', labelField: 'name' }}\n            data={treeData}\n          />\n        </Form.Item>\n        <Form.Item formItemKey=\"singleRadio\" label=\"单选框：\">\n          <RadioGroup toFormItem>\n            <Radio value=\"1\">男</Radio>\n            <Radio value=\"2\">女</Radio>\n          </RadioGroup>\n        </Form.Item>\n        <Form.Item formItemKey=\"checkbox\" label=\"多选框组：\">\n          <Checkbox.Group toFormItem>\n            <Checkbox key=\"zuqiu\" value=\"zuqiu\">\n              足球\n            </Checkbox>\n            <Checkbox key=\"lanqiu\" value=\"lanqiu\">\n              篮球\n            </Checkbox>\n            <Checkbox key=\"youyong\" value=\"youyong\">\n              游泳\n            </Checkbox>\n            <Checkbox key=\"wudao\" value=\"wudao\">\n              舞蹈\n            </Checkbox>\n          </Checkbox.Group>\n        </Form.Item>\n        <Form.Item formItemKey=\"checkbox2\" label=\"单个多选框：\">\n          <Checkbox toFormItem key=\"beijing\" value=\"zuqiu\">\n            北京\n          </Checkbox>\n        </Form.Item>\n        <Form.Item formItemKey=\"uploader\" label=\"上传组件：\">\n          <Upload\n            action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\n            onUpload={onUpload}\n            onError={onError}\n            onSuccess={onSuccess}\n          >\n            <Button icon=\"export-o\" loading={loading}>\n              {loading ? '上传中...' : '上传文件'}\n            </Button>\n          </Upload>\n          {file && (\n            <Filelist style={{ width: 300, marginTop: '10px' }}>\n              <Filelist.Item key={file.url} name={file.name} url={file.url} onRemove={onRemove} />\n            </Filelist>\n          )}\n        </Form.Item>\n        <Form.Item label=\"按钮：\">\n          <Button type=\"primary\" onClick={handleSubmit}>\n            提交\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\nReactDOM.render(<App />, mountNode);\n```\n\n```css\n.all-type {\n  width: 450px;\n}\n```\n",
      "---\norder: 8\ntitle: 联动控制\n# noPreview: true\n---\n\nForm 中某个字段改变之后，控制其他字段显示、隐藏、必填、非必填等也是很常见的诉求。\n\n```jsx\nimport { useState, useRef } from 'react';\nimport { Form, Radio, Input, Button } from '@ss/mtd-react';\n\nconst FormItem = Form.Item;\nconst RadioGroup = Radio.Group;\n\nconst defaultFieldsValue = {\n  openType: '1',\n  sysName: '考勤系统',\n  menuCode: 'attend-record',\n  menuName: '考勤记录',\n  memo: '考勤月历的菜单页',\n};\n\nconst App = () => {\n  const [linkExpand, setLinkExpand] = useState(defaultFieldsValue.openType !== '2');\n  const formRef = useRef(null);\n\n  const handleOpenTypeChange = value => {\n    formRef.current.setFieldsValue({ openType: value });\n    setLinkExpand(value === '2' ? false : true);\n  };\n\n  const handleSubmit = () => {\n    if (formRef.current.validateFields()) {\n      console.log(formRef.current.getFieldsValue());\n    }\n  };\n\n  return (\n    <Form ref={formRef} labelWidth=\"8em\" className=\"form-control\" defaultFieldsValue={defaultFieldsValue}>\n      <FormItem formItemKey=\"sysName\" span={24} label=\"系统：\">\n        <span>考勤系统</span>\n      </FormItem>\n      <FormItem formItemKey=\"menuCode\" span={24} label=\"菜单编码：\" rules={[{ required: true, message: '必须填写' }]}>\n        <Input toFormItem />\n      </FormItem>\n      <FormItem formItemKey=\"menuName\" span={24} label=\"菜单名称：\" rules={[{ required: true, message: '必须填写' }]}>\n        <Input toFormItem />\n      </FormItem>\n      <FormItem formItemKey=\"openType\" span={24} label=\"新窗口打开：\">\n        <RadioGroup toFormItem onChange={handleOpenTypeChange}>\n          <Radio value=\"1\">是</Radio>\n          <Radio value=\"2\">否</Radio>\n        </RadioGroup>\n      </FormItem>\n      {linkExpand && (\n        <FormItem formItemKey=\"linkUrl\" span={24} label=\"外链：\" rules={[{ required: true, message: '必须填写' }]}>\n          <Input toFormItem />\n        </FormItem>\n      )}\n      <FormItem formItemKey=\"memo\" span={24} label=\"备注：\">\n        <Input toFormItem />\n      </FormItem>\n      <FormItem>\n        <Button type=\"primary\" onClick={handleSubmit}>\n          提交\n        </Button>\n      </FormItem>\n    </Form>\n  );\n};\nReactDOM.render(<App />, mountNode);\n```\n\n```css\n.form-control {\n  width: 400px;\n}\n```\n",
      "---\norder: 3\ntitle: 任意布局\n# noPreview: true\n---\n\n栅格布局，总共 24 等分，通过 span 控件栅格占比，offset 控制栅格距离左侧的偏移占比，一行超过 24 份即自动换行。\n\n```jsx\nimport { useRef } from 'react';\nimport { Form, Input, Button, Radio } from '@ss/mtd-react';\nconst RadioGroup = Radio.Group;\n\nconst App = () => {\n  const formRef = useRef(null);\n\n  const handleOpenTypeChange = value => {\n    formRef.current.setFieldsValue({ openType: value });\n  };\n\n  return (\n    <Form className=\"layout-basic\" ref={formRef} defaultFieldsValue={{ openType: '1' }}>\n      <Form.Item span={11} formItemKey=\"row1-1\" label=\"员工：\" required>\n        <Input toFormItem className=\"layout-basic__employee\" placeholder=\"员工姓名\" />\n      </Form.Item>\n      <Form.Item span={11} offset={2} formItemKey=\"row1-2\" label=\"职务：\">\n        <Input toFormItem className=\"layout-basic__job\" placeholder=\"职务信息\" />\n      </Form.Item>\n      <Form.Item formItemKey=\"row2\" label=\"部门：\" required>\n        <Input toFormItem className=\"layout-basic__org\" placeholder=\"部门信息全称\" />\n      </Form.Item>\n      <Form.Item span={6} formItemKey=\"row3-1\" label=\"居住地：\">\n        <Input toFormItem placeholder=\"国家\" />\n      </Form.Item>\n      <Form.Item span={4} formItemKey=\"row3-2\" labelWidth=\"10px\">\n        <Input toFormItem placeholder=\"省份\" />\n      </Form.Item>\n      <Form.Item span={4} formItemKey=\"row3-3\" labelWidth=\"10px\">\n        <Input toFormItem placeholder=\"城市\" />\n      </Form.Item>\n      <Form.Item span={4} formItemKey=\"row3-4\" labelWidth=\"10px\">\n        <Input toFormItem placeholder=\"区/镇\" />\n      </Form.Item>\n      <Form.Item span={6} formItemKey=\"row3-5\" labelWidth=\"10px\">\n        <Input toFormItem placeholder=\"其他\" />\n      </Form.Item>\n      <Form.Item formItemKey=\"row4\" className=\"tips-item\" labelWidth=\"6em\">\n        <span>如需修改城市信息，请发送邮件至hr.tiaozheng@meituan.com。</span>\n      </Form.Item>\n      <Form.Item span={11} formItemKey=\"row5-1\" label=\"手机：\" required>\n        <Input toFormItem className=\"layout-basic__phone\" placeholder=\"手机号码\" />\n      </Form.Item>\n      <Form.Item span={11} offset={2} formItemKey=\"row5-2\" label=\"工作电话：\">\n        <Input toFormItem placeholder=\"工作电话\" />\n      </Form.Item>\n      <Form.Item formItemKey=\"openType\" span={24} label=\"用途：\">\n        <RadioGroup toFormItem onChange={handleOpenTypeChange}>\n          <Radio value=\"1\">签证</Radio>\n          <Radio value=\"2\">房贷</Radio>\n          <Radio value=\"3\">车贷</Radio>\n          <Radio value=\"4\">居住证</Radio>\n          <Radio value=\"5\">商家验证</Radio>\n          <Radio value=\"6\">社交媒体认证</Radio>\n          <Radio value=\"7\">其他</Radio>\n        </RadioGroup>\n      </Form.Item>\n    </Form>\n  );\n};\nReactDOM.render(<App />, mountNode);\n```\n\n```css\n.layout-basic {\n  width: 720px;\n}\n.layout-basic .tips-item {\n  margin-bottom: 6px;\n  position: relative;\n  top: -10px;\n  color: #999;\n}\n```\n",
      "---\norder: 7\ntitle: 赋值取值\n# noPreview: true\n---\n\nForm 对值的处理，有所不同：\n\n- 提供了 defaultFieldsValue 来设置表单的初始默认值，与 reset 之后的状态对应。\n- 提供了可供外部调用的 getFieldsValue 和 setFieldsValue 方法来赋值和取值。\n- 提供了 onFieldValueChange，可以接收到任意值的改变。\n\n```jsx\nimport { useRef } from 'react';\nimport { Form, Button, Input, Select, RangePicker, Radio, Checkbox, Modal } from '@ss/mtd-react';\nconst Option = Select.Option;\nconst FormItem = Form.Item;\n\nconst defaultFieldsValue = {\n  gender: 'female',\n  hobby: ['eat'],\n};\nconst data = {\n  name: '张三',\n  mail: 'zhangsan@meituan.com',\n  city: { value: 'shanghai', label: '上海' },\n  date: ['2018-10-12', '2018-12-04'],\n  gender: 'male',\n  hobby: ['eat', 'run'],\n  desc: '这是一条说明。',\n};\n\nconst FormDemo = () => {\n  const formRef = useRef();\n\n  const handleValueChange = (itemKey, itemValue) => {\n    console.log(itemKey, itemValue);\n  };\n\n  const setFormValue = () => {\n    formRef.current.setFieldsValue(data);\n  };\n\n  const getFormValue = () => {\n    let value = formRef.current.getFieldsValue();\n    Modal.info({\n      title: '表单数据',\n      message: JSON.stringify(value),\n    });\n  };\n\n  const saveHandle = () => {\n    let validated = formRef.current.validateFields();\n    if (validated) {\n      let value = formRef.current.getFieldsValue();\n      console.log('执行保存', value);\n    }\n  };\n\n  const resetHandle = () => {\n    formRef.current.reset();\n  };\n\n  return (\n    <Form\n      ref={formRef}\n      labelWidth=\"8em\"\n      className=\"form-value-basic\"\n      defaultFieldsValue={defaultFieldsValue}\n      onFieldValueChange={handleValueChange}\n    >\n      <FormItem formItemKey=\"name\" label=\"姓名：\" required>\n        <Input toFormItem placeholder=\"请输入名字\" />\n      </FormItem>\n      <FormItem formItemKey=\"mail\" label=\"邮箱：\" required>\n        <Input toFormItem placeholder=\"请输入邮箱\" dispatchChange={['onBlur']} />\n      </FormItem>\n      <FormItem\n        formItemKey=\"date\"\n        label=\"时间：\"\n        required\n        rules={[\n          {\n            required: true,\n            message: 'date is required',\n            validator: (rules, value) => !!(value && value[0] && value[1]),\n          },\n        ]}\n      >\n        <RangePicker\n          toFormItem\n          single\n          valueFormat=\"YYYY-MM-DD\"\n          format=\"YYYY年MM月DD日\"\n          placeholder={['选择开始时间', '选择结束时间']}\n        />\n      </FormItem>\n      <FormItem formItemKey=\"city\" label=\"城市：\" required>\n        <Select toFormItem placeholder=\"请选择城市\">\n          <Option value=\"beijing\">北京</Option>\n          <Option value=\"shanghai\">上海</Option>\n          <Option value=\"shenzhen\">深圳</Option>\n          <Option value=\"hangzhou\">杭州</Option>\n        </Select>\n      </FormItem>\n      <FormItem formItemKey=\"gender\" label=\"性别：\" required>\n        <Radio.Group toFormItem>\n          <Radio value=\"male\">男</Radio>\n          <Radio value=\"female\">女</Radio>\n        </Radio.Group>\n      </FormItem>\n      <FormItem formItemKey=\"hobby\" label=\"爱好：\" required>\n        <Checkbox.Group toFormItem>\n          <Checkbox value=\"eat\">美食</Checkbox>\n          <Checkbox value=\"sleep\">睡觉</Checkbox>\n          <Checkbox value=\"run\">跑步</Checkbox>\n          <Checkbox value=\"movie\">看电影</Checkbox>\n        </Checkbox.Group>\n      </FormItem>\n      <FormItem formItemKey=\"desc\" label=\"备注：\" required>\n        <Input.TextArea toFormItem placeholder=\"请输入些什么...\" />\n      </FormItem>\n      <FormItem className=\"operate\">\n        <Button type=\"primary\" onClick={setFormValue}>\n          赋值\n        </Button>\n        <Button type=\"primary\" onClick={getFormValue}>\n          取值\n        </Button>\n        <Button type=\"primary\" onClick={saveHandle}>\n          提交\n        </Button>\n        <Button onClick={resetHandle}>重置</Button>\n      </FormItem>\n    </Form>\n  );\n};\n\nReactDOM.render(<FormDemo />, mountNode);\n```\n\n```css\n.form-value-basic {\n  width: 480px;\n}\n.form-value-basic .operate {\n  text-algin: center;\n}\n.form-value-basic .operate .mtd-button:not(:last-child) {\n  margin-right: 10px;\n}\n```\n",
      "---\norder: 14\ntitle: 离开前拦截\n# noPreview: true\n---\n\nForm 同时提供了获取手动更改数据的方法：getTouchedFields。\n\n在这个 API 的基础上，我们提供离开前校验的控制。\n\n```jsx\nimport { Input, Select, Checkbox, Radio, RangePicker, Form, Button, notification, Modal } from '@ss/mtd-react';\nconst FormItem = Form.Item;\nconst Option = Select.Option;\nconst formRef = React.createRef();\n\nconst FormDemo = () => {\n  return (\n    <Form ref={formRef} style={{ width: 500 }}>\n      <FormItem span={24} formItemKey=\"name\" label=\"活动名称：\">\n        <Input toFormItem />\n      </FormItem>\n      <FormItem span={24} formItemKey=\"area\" label=\"活动区域：\">\n        <Select toFormItem>\n          <Option value=\"haidian\">海淀</Option>\n          <Option value=\"chaoyang\">朝阳</Option>\n          <Option value=\"wangjing\">望京</Option>\n          <Option value=\"shunyi\">顺义</Option>\n        </Select>\n      </FormItem>\n      <FormItem formItemKey=\"date\" label=\"活动区间：\">\n        <RangePicker\n          toFormItem\n          single\n          valueFormat=\"YYYY-MM-DD\"\n          format=\"YYYY年MM月DD日\"\n          placeholder={['选择开始时间', '选择结束时间']}\n        />\n      </FormItem>\n      <FormItem formItemKey=\"type\" label=\"活动性质：\">\n        <Checkbox.Group toFormItem>\n          <Checkbox value=\"1\">线上运营</Checkbox>\n          <Checkbox value=\"2\">线下推广</Checkbox>\n          <Checkbox value=\"3\">策划party</Checkbox>\n          <Checkbox value=\"4\">梯台走秀</Checkbox>\n        </Checkbox.Group>\n      </FormItem>\n      <FormItem formItemKey=\"resource\" label=\"活动性质：\">\n        <Radio.Group toFormItem>\n          <Radio value=\"1\">品牌赞助</Radio>\n          <Radio value=\"2\">场地面粉</Radio>\n        </Radio.Group>\n      </FormItem>\n      <FormItem formItemKey=\"desc\" label=\"活动形式：\" required>\n        <Input.TextArea toFormItem />\n      </FormItem>\n      <FormItem labelWidth=\"6em\">\n        <Button type=\"primary\" onClick={createHandle} style={{ marginRight: 12 }}>\n          立即创建\n        </Button>\n        <Button onClick={cancelHandle}>取消</Button>\n      </FormItem>\n    </Form>\n  );\n};\n\nfunction createHandle() {\n  console.log(formRef.current.getFieldsValue());\n  notification.open({\n    title: '创建成功!',\n    message: '成功创建一条活动',\n  });\n  formRef.current.reset();\n}\nfunction cancelHandle() {\n  let touchedFields = formRef.current.getTouchedFields();\n  if (touchedFields && touchedFields.length > 0) {\n    Modal.confirm({\n      title: '页面已经被修改，确认要离开嘛？',\n      message: '修改的字段：' + JSON.stringify(touchedFields),\n    });\n  }\n}\n\nReactDOM.render(<FormDemo />, mountNode);\n```\n",
      "---\norder: 2\ntitle: 典型用法\n# noPreview: true\n---\n\n没有使用 useContext 情况下，Form 子节点只能使用<Form.Item>或者<Form.Item>数组\n\n```jsx\nimport { useRef } from 'react';\nimport { Form, Input, Button, Radio, Checkbox, InputNumber, Switch } from '@ss/mtd-react';\n\nconst defaultValue = {\n  company: '美团点评',\n  remember: true,\n  sex: '1',\n  job: true,\n};\n\nconst App = () => {\n  const formRef = useRef(null);\n\n  const handleSubmit = () => {\n    if (formRef.current.validateFields()) {\n      const data = formRef.current.getFieldsValue();\n      console.log('form date:', data);\n    }\n  };\n  const handleCancel = () => {\n    console.log('operate cancel.');\n  };\n\n  const renderItem = () => {\n    return [\n      <Form.Item formItemKey=\"name\" label=\"姓名：\" message=\"姓名不能为空\" required>\n        <Input toFormItem placeholder=\"请输入姓名\" />\n      </Form.Item>,\n      <Form.Item\n        formItemKey=\"age\"\n        label=\"年龄：\"\n        rules={[\n          { type: 'number', required: true, message: '年龄不能为空' },\n          { message: '年龄不能小于30', validator: (rules, value) => value > 30 },\n        ]}\n      >\n        <InputNumber\n          toFormItem\n          controls={false}\n          placeholder=\"请输入年龄\"\n          style={{ textAlign: 'left', width: '100%' }}\n        />\n      </Form.Item>,\n      <Form.Item formItemKey=\"sex\" message=\"性别不能为空\" label=\"性别：\">\n        <Radio.Group toFormItem>\n          <Radio value=\"1\">男</Radio>\n          <Radio value=\"2\">女</Radio>\n        </Radio.Group>\n      </Form.Item>,\n    ];\n  };\n\n  return (\n    <div>\n      <Form ref={formRef} className=\"form-basic\" defaultFieldsValue={defaultValue}>\n        <Form.Item formItemKey=\"company\" label=\"公司：\">\n          <span toFormItem></span>\n        </Form.Item>\n        {renderItem()}\n        <Form.Item formItemKey=\"job\" label=\"已工作：\">\n          <Switch toFormItem checkedChildren=\"是\" unCheckedChildren=\"否\" />\n        </Form.Item>\n        <Form.Item formItemKey=\"remember\" tirgger=\"onChange\" labelWidth=\"6em\">\n          <Checkbox className=\"form-basic-remember\" toFormItem>\n            remember me\n          </Checkbox>\n          <a className=\"form-basic-help\">help me</a>\n        </Form.Item>\n        <Form.Item labelWidth=\"6em\">\n          <div className=\"form-basic-operate\">\n            <Button type=\"primary\" onClick={handleSubmit}>\n              提交\n            </Button>\n            <Button className=\"btn-cancel\" onClick={handleCancel}>\n              取消\n            </Button>\n          </div>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\nReactDOM.render(<App />, mountNode);\n```\n\n```css\n.form-basic {\n  width: 400px;\n}\n/* .form-basic-operate {\n  text-align: center;\n} */\n.btn-cancel {\n  margin-left: 12px;\n}\n.form-basic-remember,\n.form-basic-help {\n  display: inline-block;\n}\n.form-basic-help {\n  float: right;\n}\n```\n",
      "---\norder: 0\ntitle: 水平登录栏\n# noPreview: true\n---\n\n水平登录场景，表单的基本用法\n\n```jsx\nimport { Form, Input, Button, AutoComplete } from '@ss/mtd-react';\n\nconst formRef = React.createRef();\n\nfunction handleSubmit() {\n  if (formRef.current.validateFields()) {\n    const data = formRef.current.getFieldsValue();\n    console.log('form data:', data);\n  }\n}\n\nReactDOM.render(\n  <Form ref={formRef} style={{ width: '600px' }} >\n    <Form.Item span=\"10\" formItemKey=\"username\" style={{ paddingRight: 20 }} required message=\"登录名不能为空\">\n      <Input toFormItem placeholder=\"username\" />\n    </Form.Item>\n    <Form.Item span=\"10\" style={{ paddingRight: 20 }} formItemKey=\"password\" required message=\"密码不能为空\">\n      <Input toFormItem placeholder=\"password\" />\n    </Form.Item>\n    <Form.Item span=\"4\">\n      <Button type=\"primary\" onClick={handleSubmit}>\n        登录\n      </Button>\n    </Form.Item>\n  </Form>,\n  mountNode\n);\n```\n",
      "---\norder: 12\ntitle: 动态校验\n# noPreview: true\n---\n\n根据不同情况，执行不同的校验规则,请确保 validator 中内容没有报错，若果有报错会导致校验返回 true\n\n```jsx\nimport { useState, useRef } from 'react';\nimport { Form, Input, Button, Checkbox, notification } from '@ss/mtd-react';\nconst FormItem = Form.Item;\n\nconst FormDemo = () => {\n  const [isValidating, setIsValidating] = useState(false);\n  const formRef = useRef(null);\n  const asyncFormRef = useRef(null);\n\n  const handleFieldValueChange = (code, value) => {\n    if (code == 'nickNameRequired') {\n      formRef.current.validateFields(['nickName']);\n    }\n  };\n\n  const validate = () => {\n    return formRef.current.validateFields();\n  };\n\n  const asyncValidate = async () => {\n    try {\n      setIsValidating(true);\n      await asyncFormRef.current.asyncValidateFields();\n      notification.success({ title: '异步校验成功' });\n    } catch ({ invalidFields, errors }) {\n      notification.error({ title: '异步校验失败', message: invalidFields.join('、') });\n      // 打印错误堆栈信息，当callback参数为错误堆栈时才能正确展示，参数为普通字符串，只能错误字段和错误message\n      console.error(...errors);\n    } finally {\n      setIsValidating(false);\n    }\n  };\n\n  return (\n    <>\n      <div>\n        <div className=\"form-title\">同步校验</div>\n        <Form ref={formRef} style={{ width: 400 }} onFieldValueChange={handleFieldValueChange}>\n          <FormItem span={24} formItemKey=\"userName\" label=\"用户名：\" required>\n            <Input toFormItem placeholder=\"请输入用户名：\" />\n          </FormItem>\n          <FormItem\n            span={24}\n            formItemKey=\"nickName\"\n            label=\"昵称：\"\n            rules={[\n              {\n                validator(rule, value, cb, formValue) {\n                  if (formValue && formValue.nickNameRequired && !value) {\n                    cb('昵称必填');\n                  }\n                  cb();\n                },\n              },\n            ]}\n          >\n            <Input toFormItem placeholder=\"请输入昵称：\" />\n          </FormItem>\n          <FormItem span={24} formItemKey=\"nickNameRequired\" labelWidth=\"6em\">\n            <Checkbox toFormItem>昵称必填</Checkbox>\n          </FormItem>\n          <FormItem span={24} labelWidth=\"6em\">\n            <Button type=\"primary\" onClick={validate}>\n              校验\n            </Button>\n          </FormItem>\n        </Form>\n      </div>\n      <div>\n        <div className=\"form-title\">异步校验（如果你的表单校验里面包含异步的校验，请参考此demo）</div>\n        <Form ref={asyncFormRef} style={{ width: 400 }}>\n          <FormItem\n            span={24}\n            formItemKey=\"nickName\"\n            label=\"昵称：\"\n            required\n            rules={{\n              validator: async (rule, value, callback) => {\n                if (value === '' || value === null) {\n                  callback('昵称必填');\n                  return;\n                }\n                try {\n                  await fetch('https://www.mocky.io/v2/5cc8019d300000980a055e76');\n                  // 校验成功，必须调用callback\n                  callback();\n                } catch (e) {\n                  // 校验不成功，返回错误堆栈时，错误提示会取e.message展示，返回字符串时直接展示。\n                  callback(e.message ? e : '昵称校验失败！');\n                }\n              },\n            }}\n          >\n            <Input toFormItem placeholder=\"请输入昵称：\" />\n          </FormItem>\n          <FormItem span={24} labelWidth=\"6em\">\n            <Button type=\"primary\" loading={isValidating} onClick={asyncValidate}>\n              异步校验\n            </Button>\n          </FormItem>\n        </Form>\n      </div>\n    </>\n  );\n};\n\nReactDOM.render(<FormDemo />, mountNode);\n```\n\n```css\n.form-title {\n  padding-bottom: 12px;\n}\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/tooltip",
    "content": [
      "---\norder: 3\ntitle: 位置调整\n---\n\n可以调整箭头和弹框位置\n\n```jsx\nimport { Tooltip, Button } from '@ss/mtd-react';\n\nconst text = `志不立，如无舵这舟，无衔之马，漂荡奔逸，终亦何所底乎\n-  明·王守仁\n`;\n\nconst ButtonWidth = 60;\n\nReactDOM.render(\n  <div className=\"demo-tooltip\">\n    <Tooltip placement=\"top\" message={text}>\n      <Button size=\"small\">向左偏移</Button>\n    </Tooltip>\n  </div>,\n  mountNode\n);\n```\n\n```css\n.demo-tooltip {\n  width: 240px;\n  margin: auto;\n}\n.demo-tooltip-btn {\n  width: 100px;\n  height: 50px;\n}\n.demo-tooltip .mtd-button {\n  margin: 5px;\n}\n```\n",
      "---\norder: 5\ntitle: 触发\n---\n\n文字提示提供 `hover` `click` `focus` 三种触发方式\n\n```jsx\nimport { Tooltip, Input, Button } from '@ss/mtd-react';\n\nconst text = `Mathematics is the only science where one never knows what\none is talking about nor whether what is said is true.\n-- Russell\n`;\nReactDOM.render(\n  <div>\n    <Tooltip message={text} trigger=\"hover\">\n      <Button>Hover</Button>\n    </Tooltip>\n    <Tooltip message={text} trigger=\"click\">\n      <Button style={{ margin: '0 20px', display: 'inline-block' }}>Click</Button>\n    </Tooltip>\n    <Tooltip message={text} trigger=\"focus\">\n      <Input placeholder=\"请输入内容\" style={{ width: '200px', display: 'inline-block', verticalAlign: 'middle' }} />\n    </Tooltip>\n  </div>,\n  mountNode\n);\n```\n",
      "---\norder: 6\ntitle: 自定义样式\n---\n\n可以通过 `className` `style` 自定义弹出层样式\n\n```jsx\nimport { Tooltip, Button } from '@ss/mtd-react'\n\nconst text = `关心公益应当是每个有相当教养的人所共同的。 -  托尔斯泰`;\n\nReactDOM.render(\n  <div>\n    <Tooltip message={text} className=\"block-tooltip-custom\" style={{ border: '2px solid #4E73FF' }}>\n      <Button>Hover</Button>\n    </Tooltip>\n  </div>,\n  mountNode\n);\n```\n\n```css\n.block-tooltip-custom {\n  width: 150px;\n}\n.block-tooltip-custom .mtd-tooltip-inner{\n  color: #4E73FF;\n  background: white;\n}\n\n.block-tooltip-custom .mtd-tooltip-arrow {\n  background: white;\n  box-shadow: 1px 1px 0px 0px #4E73FF;\n}\n```\n",
      "---\norder: 2\ntitle: 颜色\n---\n\n可以使用 `drak` 和 `light` 两种颜色，默认为 `dark`\n\n```jsx\nimport { Tooltip, Button } from '@ss/mtd-react';\n\nReactDOM.render(\n  <div>\n    <Tooltip message=\"最黑暗的时刻也是最接近光明的时刻\">\n      <Button style={{ margin: '20px' }}>Dark</Button>\n    </Tooltip>\n    <Tooltip message=\"纵然是深沉的黑夜，也遮不住一丝光亮\" color=\"light\">\n      <Button>Light</Button>\n    </Tooltip>\n  </div>,\n  mountNode\n);\n```\n",
      "---\norder: 0\ntitle: 基本使用\n---\n\n基本使用。\n\n```jsx\nimport { Tooltip, Button } from '@ss/mtd-react';\n\nconst TooltipDemo = ()=> {\n  const handleChange = visible => {\n    console.log('visible', visible);\n  };\n  return (\n    <div>\n      <Tooltip message=\"文字内容\" autoDestory>\n        <Button>示例</Button>\n      </Tooltip>\n      <Tooltip message=\"文字内容\" defaultVisible>\n        <Button style={{ margin: '20px' }}>默认显示</Button>\n      </Tooltip>\n      <Tooltip message=\"文字内容\" visible onVisibleChange={handleChange} zIndex={99}>\n        <Button>受控</Button>\n      </Tooltip>\n    </div>\n  );\n}\nReactDOM.render(<TooltipDemo />, mountNode);\n```\n",
      "---\norder: 3\ntitle: 位置\n---\n\n12 个位置\n\n```jsx\nimport { Tooltip, Button } from '@ss/mtd-react';\n\nconst text = `What the deuce is it to me?  You say that we go around the sun.  If we went\naround the moon it would not make a pennyworth of difference to me or my work.\n-- Sherlock Holmes, \"A Study in Scarlet\"\n`;\n\nconst ButtonWidth = 60;\n\nReactDOM.render(\n  <div className=\"demo-tooltip\">\n    <div style={{ marginLeft: ButtonWidth, whiteSpace: 'nowrap' }}>\n      <Tooltip placement=\"topLeft\" message={text}>\n        <Button size=\"small\">上左</Button>\n      </Tooltip>\n      <Tooltip placement=\"top\" message={text}>\n        <Button size=\"small\">上边</Button>\n      </Tooltip>\n      <Tooltip placement=\"topRight\" message={text}>\n        <Button size=\"small\">上右</Button>\n      </Tooltip>\n    </div>\n    <div style={{ width: ButtonWidth, float: 'left' }}>\n      <Tooltip placement=\"leftTop\" message={text}>\n        <Button size=\"small\">左上</Button>\n      </Tooltip>\n      <Tooltip placement=\"left\" message={text}>\n        <Button size=\"small\">左边</Button>\n      </Tooltip>\n      <Tooltip placement=\"leftBottom\" message={text}>\n        <Button size=\"small\">左下</Button>\n      </Tooltip>\n    </div>\n    <div style={{ width: ButtonWidth, marginLeft: ButtonWidth * 4 }}>\n      <Tooltip placement=\"rightTop\" message={text}>\n        <Button size=\"small\">右上</Button>\n      </Tooltip>\n      <Tooltip placement=\"right\" message={text}>\n        <Button size=\"small\">右边</Button>\n      </Tooltip>\n      <Tooltip placement=\"rightBottom\" message={text}>\n        <Button size=\"small\">右下</Button>\n      </Tooltip>\n    </div>\n    <div style={{ marginLeft: ButtonWidth, clear: 'both', whiteSpace: 'nowrap' }}>\n      <Tooltip placement=\"bottomLeft\" message={text}>\n        <Button size=\"small\">下左</Button>\n      </Tooltip>\n      <Tooltip placement=\"bottom\" message={text}>\n        <Button size=\"small\">下边</Button>\n      </Tooltip>\n      <Tooltip placement=\"bottomRight\" message={text}>\n        <Button size=\"small\">下右</Button>\n      </Tooltip>\n    </div>\n  </div>,\n  mountNode\n);\n```\n\n```css\n.demo-tooltip {\n  width: 240px;\n  margin: auto;\n}\n.demo-tooltip-btn {\n  width: 100px;\n  height: 50px;\n}\n.demo-tooltip .mtd-button {\n  margin: 5px;\n}\n```\n",
      "---\norder: 1\ntitle: 大小\n---\n\n文字提示提供 `normal` `small` 两种尺寸\n\n```jsx\nimport { Tooltip, Button } from '@ss/mtd-react';\n\nReactDOM.render(\n  <div>\n    <Tooltip message=\"文字内容\" size=\"normal\">\n      <Button style={{ margin: '20px' }}>默认</Button>\n    </Tooltip>\n    <Tooltip message=\"文字内容\" size=\"small\">\n      <Button>Small</Button>\n    </Tooltip>\n  </div>,\n  mountNode\n);\n```\n",
      "---\norder: 4\ntitle: 自动销毁Dom\n---\n\n可通过autoDestory属性控制是否移除弹窗的Dom结构，在弹窗特别多的情况下，可节约性能。\n\n```jsx\nimport { Tooltip, Button } from '@ss/mtd-react';\n\nconst TooltipDemo = ()=> {\n  const handleChange = visible => {\n    console.log('visible', visible);\n  };\n  return (\n    <div>\n      <Tooltip message=\"弹窗隐藏时dom自动销毁\" autoDestory>\n        <Button>弹窗隐藏时dom自动销毁</Button>\n      </Tooltip>\n    </div>\n  );\n}\nReactDOM.render(<TooltipDemo />, mountNode);\n```\n",
      "---\norder: 6\ntitle: 延迟\n---\n\n延迟显示和隐藏\n\n```jsx\nimport { Tooltip, Button } from '@ss/mtd-react';\n\nconst text = `一个月本来只有三十天，古人把每个夜晚的时间算做半日，就多了十五天。从这个意义上说来，夜晚的时间实际上不就等于生命的三分之一吗？ -  邓拓`;\n\nReactDOM.render(\n  <div>\n    <Tooltip message={text} delayShow={1000} delayHide={1000}>\n      <Button>延迟 1s 显示和隐藏</Button>\n    </Tooltip>\n    <Tooltip message={text} delayShow={0} delayHide={0}>\n      <Button style={{marginLeft: '20px'}}>0s 显示和隐藏</Button>\n    </Tooltip>\n  </div> ,\n  mountNode\n);\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/calendar",
    "content": [
      "---\norder: 4\ntitle: 自定义日期单元格\n---\n\n通过dateRender/dateFullRender可自定义日期单元格内容，区别在于dateRender是追加内容到日期单元格，而dateFullRender是完全覆盖日期单元格。\n\n```jsx\nimport { Calendar, List } from \"@ss/mtd-react\";\n\nfunction getListData(){\n  const data = [];\n  for (let i = 1; i < 3; i++) {\n    data.push({\n      id: i,\n      name: '看书',\n    });\n  }\n  return data;\n}\n\nfunction Demo(props){\n  const dateFullRender = (currentDate)=>{\n    if(currentDate.date()==10){\n      return <div className=\"special-date\">10</div>;\n    }\n    return (\n      <div className=\"other-date\">{currentDate.date()}</div>\n      );\n  };\n  const dateRender = currentDate => {\n    if(currentDate.date()==10){\n      const data = getListData();\n      return (<ul className=\"todoList\">\n        {data.map(item => (\n          <li key={item.id}>{item.name}</li>\n        ))}\n      </ul>)\n    }\n  };\n  return (\n    <div>\n      <ul>\n       <li className=\"dateFullRender\">\n        <h3>dateFullRender完全覆盖日期单元格</h3>\n        <Calendar dateFullRender={dateFullRender} />\n       </li>\n       <li className=\"dateRender\">\n         <h3>dateRender追加到日期单元格</h3>\n        <Calendar dateRender={dateRender} />\n       </li>\n      </ul>\n    </div>\n  )\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n```css\n.dateFullRender .mtd-calendar-cell-today {\n  border-top: 2px solid blue;\n}\n.dateFullRender .mtd-calendar-cell-selected {\n  background: #ccc;\n}\n.special-date, .other-date {\n  display: block;\n  position: relative;\n  width: 100%;\n  height: 100%;\n  padding: 10px;\n  height: 26px;\n}\n.special-date:after {\n  content: '薪';\n  position: absolute;\n  width: 18px;\n  height: 18px;\n  line-height: 18px;\n  top: 3px;\n  left: 24px;\n  color: white;\n  background-color: red;\n  text-align:center;\n  border-radius: 50%;\n  font-size: 0.5em;\n}\n\n.todoList {\n  width: 100%\n  display:flex;\n  align-center:center;\n}\n.todoList li {\n  position: relative;\n  display: block;\n  width: 100%;\n  padding-left: 8px;\n  font-size: 12px;\n}\n.todoList li:before {\n  content: '';\n  display:inline-block;\n  width:6px;\n  height:6px;\n  border-radius:50%;\n  margin-right:2px;\n  background-color: green;\n}\n\n```\n",
      "---\norder: 6\ntitle: 自定义头部\n---\n\n通过headerRender方法实现头部自定义\n\n```jsx\nimport {useState} from 'react';\nimport { Calendar, Button, Icon } from \"@ss/mtd-react\";\nimport dayjs from 'dayjs';\n\nconst handleOnPanelChange = (time, mode)=> console.log(time, mode)\nconst handleOnChange = time=> console.log(time);\nconst operates = {\n  /**\n   * time {dayjs}\n   * value {number}\n   * unit {year | month | day 等 详见：https://dayjs.gitee.io/docs/zh-CN/manipulate/add }\n   *  **/\n  add(time, value, unit) {\n    return time.add(value, unit);\n  },\n  /**\n   * time {dayjs}\n   * value {number}\n   * unit {year | month | day 等 详见：https://dayjs.gitee.io/docs/zh-CN/manipulate/subtract }\n   *  **/\n  subtract(time, value, unit) {\n    return time.subtract(value, unit);\n  },\n}\n\nfunction Demo(props) {\n  const handleHeaderRender = ({value, pageShowDate, mode, onChangeSelectedDate, onChangePageShowDate, onChangeMode}) => {\n    return <div className=\"custom-header\">\n      <div className=\"page-show-date\">\n        <Button\n          icon='left'\n          onClick={() => {\n            let newPageShowDate;\n            newPageShowDate = operates.subtract(pageShowDate, 1, 'month');\n            onChangePageShowDate(newPageShowDate);\n          }}\n          shape=\"circle\"\n          hoverShape\n        />\n        <span className=\"show-date\">{pageShowDate.format('YYYY年MM月')}</span>\n        <Button\n          icon='right'\n          onClick={() => {\n            let newPageShowDate;\n            newPageShowDate = operates.add(pageShowDate, 1, 'month');\n            onChangePageShowDate(newPageShowDate);\n          }}\n          shape=\"circle\"\n          hoverShape\n        />\n      </div>\n      <Button className=\"quick-select\" onClick={()=> {\n        let today = dayjs();\n        onChangeSelectedDate(today);\n      }} >今天</Button>\n    </div>\n  }\n  return (\n    <>\n      <div>\n        <h2>自定义头部</h2>\n        <Calendar\n          value=\"2022-2-21\"\n          headerRender={handleHeaderRender}\n          onPanelChange={handleOnPanelChange}\n          onChange={handleOnChange}/>\n      </div>\n        <div>\n          <h2>无头部</h2>\n          <Calendar\n            value=\"2022-2-21\"\n            headerRender={()=> null}\n            onPanelChange={handleOnPanelChange}\n            onChange={handleOnChange}/>\n        </div>\n    </>)\n}\nReactDOM.render(<Demo />, mountNode);\n```\n\n```css\n.custom-header {\n  display:flex;\n  height: 32px;\n  padding: 24px;\n  align-items: center;\n}\n.page-show-date, .quick-select {\n  display:flex;\n  align-center: center;\n  line-height: 32px;\n}\n.show-date {\n  margin: 0 8px;\n}\n.quick-select {margin-left: 8px;}\n\n```\n",
      "---\norder: 1\ntitle: 基础使用\n---\n\n通过onPanelChange方法可设置面板变化时的回调，通过onChange方法可设置选择日期变化时的回调。\n\n```jsx\nimport { Calendar } from \"@ss/mtd-react\";\n\nReactDOM.render(\n  <div className=\"basic-demo\">\n    <Calendar value=\"2021-11-24\" onPanelChange={(time, mode)=> console.log(time, mode)}  onChange={time=> console.log(time)}/>\n  </div>, mountNode);\n```\n",
      "---\norder: 3\ntitle: 不可选日期\n---\n\n通过设置disabledDate控制不能选择的日期。\n\n```jsx\nimport { Calendar } from \"@ss/mtd-react\";\n\nfunction disabledDate(currentDate){\n  const date = new Date();\n  date.setHours(0, 0, 0, 0);\n  return currentDate < date;\n}\n\nReactDOM.render(\n  <div className=\"basic-demo\">\n    <Calendar disabledDate={disabledDate}  />\n  </div>, mountNode);\n```\n",
      "---\norder: 5\ntitle: 受控\n---\n\n通过value控制日期组件展示日期。\n\n```jsx\nimport {useState} from 'react';\nimport { Calendar, DatePicker } from \"@ss/mtd-react\";\nconst handleOnPanelChange = (time, mode)=> console.log(time, mode)\nconst handleOnChange = time=> console.log(time);\nfunction Demo(props) {\n  const [value, setValue] = useState(new Date('2021-12-3'));\n  return (\n    <>\n      <DatePicker value={new Date(value)} placeholder=\"选择日期\" onChange={value => setValue(value)} />\n      <Calendar value={value} onPanelChange={handleOnPanelChange}  onChange={handleOnChange}/>\n    </>\n  )\n}\nReactDOM.render(<Demo />, mountNode);\n```\n\n```css\n.mtd-date-picker {\n  margin-bottom: 10px;\n  width: 240px;\n}\n```\n",
      "---\norder: 2\ntitle: 周简写\n---\n\n通过isShortWeek属性可设置周显示是否为简写形式，如“周一”显示为“一”。\n\n```jsx\nimport { Calendar } from \"@ss/mtd-react\";\n\nReactDOM.render(\n  <div className=\"basic-demo\">\n    <Calendar value=\"2021-11-24\" isShortWeek onPanelChange={(time, mode)=> console.log(time, mode)}  onChange={time=> console.log(time)}/>\n  </div>, mountNode);\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/radio",
    "content": [
      "---\norder: 2\ntitle: 状态\n---\n\n单选框的选中状态由`checked`控制，禁用状态由`disabled`控制。\n\n````jsx\nimport { Radio } from \"@ss/mtd-react\";\n\nReactDOM.render(\n  <div className=\"radio-satus\">\n    <Radio>未选中</Radio>\n    <Radio checked>已选中</Radio>\n    <Radio disabled>未选中禁用</Radio>\n    <Radio disabled checked>已选中禁用</Radio>\n  </div>\n  , mountNode);\n````\n```css\n.radio-satus .mtd-radio {\n  margin-right: 50px;\n}\n```\n",
      "---\norder: 6\ntitle: 自定义样式\n---\n\n可以通过自定义样式，实现如下展示效果。\n\n````jsx\nimport { useState } from 'react';\nimport { Radio, Button, Icon } from \"@ss/mtd-react\";\n\nconst RadioCard = (props) => {\n  const { checked, onChange, icon, title, desc } = props;\n  return (\n    <div\n      className={`mtd-radio-card checked-${checked}`}\n      onClick={(e) => {\n        e.target['checked'] = !checked;\n        onChange(e);\n      }}\n    >\n      <div className=\"mtd-radio-card-title\">\n        <Icon type={icon}/>\n        <span>{title}</span>\n      </div>\n      <div className=\"mtd-radio-card-desc\">{desc}</div>\n    </div>\n  )\n};\n\nconst Demo = (props) => {\n  const [value, setValue] = useState('beijing');\n  const handleRadioChange = (value) => {\n    setValue(value);\n  };\n  return (\n    <Radio.Group value={value} className=\"radio-card\" onChange={handleRadioChange}>\n      <RadioCard icon=\"star-o\" value=\"beijing\" title=\"北京\" desc=\"北京是中国的首都\" />\n      <RadioCard icon=\"star-o\" value=\"shanghai\" title=\"上海\" desc=\"上海是中国的明珠\" />\n      <RadioCard icon=\"star-o\" value=\"guangzhou\" title=\"广州\" desc=\"广州是广东的省会\" />\n    </Radio.Group>\n  )\n};\n\nReactDOM.render(<Demo />, mountNode);\n````\n\n```css\n.mtd-radio-card {\n  display: inline-block;\n  margin-right:25px;\n  padding: 12px 16px;\n  border: 1px solid rgba(0,0,0,.13);\n  border-radius: 4px;\n  cursor: pointer;\n  color: rgba(0,0,0 .87);\n  transition: all .3s ease-in-out;\n}\n.mtd-radio-card:not(.checked-true):hover {\n  box-shadow: 0 2px 4px 0 rgba(0,0,0,0.02), 0 4px 6px 6px rgba(0,0,0,0.02), 0 4px 6px 0 rgba(0,0,0,0.04);\n  border-color: transparent;\n}\n.mtd-radio-card.checked-true {\n  border-color: #0a70f5;\n}\n.mtd-radio-card-title{\n  margin-bottom: 4px;\n  text-align:center;\n}\n.mtd-radio-card-desc{\n  color: rgba(0,0,0,.24);\n  font-size: 12px;\n}\n```\n",
      "---\norder: 4\ntitle: 选项卡形式 #\n---\n\n在类目少、名称短时，需要突出信息时使用，Radio.Button需配合Radio.Group一起使用。\n\n````jsx\nimport { useState } from 'react';\nimport { Radio, Button } from \"@ss/mtd-react\";\n\nconst Demo = (props) => {\n  const [value, setValue] = useState('beijing');\n  const handleRadioChange = (value) => {\n    setValue(value);\n  };\n  return (\n    <Radio.Group value={value} className=\"radio-button\" onChange={handleRadioChange}>\n      <Radio.Button key=\"Beijing\" value=\"beijing\">北京</Radio.Button>\n      <Radio.Button key=\"Shanghai\" value=\"shanghai\">上海</Radio.Button>\n      <Radio.Button key=\"Guangzhou\" value=\"guangzhou\">广州</Radio.Button>\n    </Radio.Group>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n````\n",
      "---\norder: 0\ntitle: 基本用法\n---\n\n单独使用时用于切换到选中状态。\n\n````jsx\nimport { useState } from 'react';\nimport { Radio } from \"@ss/mtd-react\";\n\nconst Demo = (props) => {\n  const [checked, setChecked] = useState(false);\n  const handleClick = (e) => {\n    setChecked(e.target.checked);\n  };\n  return (\n    <Radio checked={checked} onChange={handleClick}>\n      选项\n    </Radio>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n````\n",
      "---\norder: 5\ntitle: 自定义样式\n---\n\n可以通过自定义样式，实现如下展示效果。\n\n````jsx\nimport { useState } from 'react';\nimport { Radio } from \"@ss/mtd-react\";\n\nconst Demo = (props) => {\n  const [city, setCity] = useState('北京');\n  const handleRadioChange = (value) => {\n    setCity(value);\n  };\n  return (\n    <Radio.Group className=\"custom-radio\" value={city} onChange={handleRadioChange}>\n      <Radio key='beijing'  value='北京'>北京</Radio>\n      <Radio key='shanghai' value='上海'>上海</Radio>\n      <Radio key='guangzhou' value='广州'>广州</Radio>\n      <Radio key='shenzhen' value='深圳'>深圳</Radio>\n      <Radio key='hangzhou' value='杭州'>杭州</Radio>\n    </Radio.Group>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n````\n```css\n.custom-radio .mtd-radio-input-wrapper {\n  display: none;\n}\n.custom-radio .mtd-radio-label {\n  padding-left: 0;\n  transition: all .3s ease-in-out;\n}\n.custom-radio .mtd-radio-group-item{\n  margin-right: 0px;\n  padding: 2px 8px;\n  border-radius: 2px;\n}\n.custom-radio .mtd-radio-checked .mtd-radio-label{\n  color: #0a70f5;\n}\n```\n",
      "---\norder: 1\ntitle: 尺寸\n---\n\n单选框有三种内置大小`size`，默认大小为`normal`。\n\n````jsx\nimport { Radio } from \"@ss/mtd-react\";\n\nReactDOM.render(\n  <div className=\"radio-size\">\n    <Radio.Group value=\"beijing\" size='small'>\n        <Radio key='beijing' value='beijing'>北京</Radio>\n        <Radio key='shanghai' value='shanghai'>上海</Radio>\n    </Radio.Group>\n    <Radio.Group value=\"beijing\">\n        <Radio key='beijing' value='beijing'>北京</Radio>\n        <Radio key='shanghai' value='shanghai'>上海</Radio>\n    </Radio.Group>\n    <Radio.Group value=\"beijing\" size='large'>\n        <Radio key='beijing' value='beijing'>北京</Radio>\n        <Radio key='shanghai' value='shanghai'>上海</Radio>\n    </Radio.Group>\n  </div>\n  , mountNode);\n````\n```css\n.radio-size .mtd-radio-group {\n  margin-right: 60px;\n}\n```\n",
      "---\norder: 3\ntitle: 单选框组\n---\n\n使用 `Radio.Group`实现一组互斥的选项组。\n\n````jsx\nimport { useState } from 'react';\nimport { Radio } from \"@ss/mtd-react\";\n\nconst Demo = (props) => {\n  const [place, setPlace] = useState('beijing');\n  const handleRadioChange = (value) => {\n    setPlace(value);\n  };\n  return (\n    <Radio.Group value={place} onChange={handleRadioChange} className=\"radio-group\">\n      <Radio key='beijing' value='beijing'>北京</Radio>\n      <Radio key='shanghai' value='shanghai'>上海</Radio>\n      <Radio key='guangzhou' value='guangzhou'>广州</Radio>\n      <Radio key='shenzhen' value='shenzhen' disabled>深圳</Radio>\n    </Radio.Group>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n````\n```css\n.radio-group .mtd-radio {\n  margin-right: 20px;\n}\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/card",
    "content": [
      "---\norder: 1\ntitle: 基本样式\n---\n\n卡片可以包含标题、内容、操作区域。\n\n````jsx\nimport { Card } from \"@ss/mtd-react\";\n\nfunction CardDemo(){\n    return (\n        <div>\n          <Card style={{width:\"400px\"}}\n            header={'送别'}\n            bodyStyle={{lineHeight:\"30px\"}}>\n            <p>水色南天远，舟行若在虚。</p>\n            <p>迁人发佳兴，吾子访闲居。</p>\n            <p>日落看归鸟，潭澄羡跃鱼。</p>\n            <p>圣朝思贾谊，应降紫泥书。</p>\n          </Card>\n        </div>\n    );\n}\nReactDOM.render(<CardDemo />, mountNode);\n````\n",
      "---\norder: 3\ntitle: 简单卡片\n---\n\n卡片可以容纳任何相关信息的布局。\n\n````jsx\nimport { Card } from \"@ss/mtd-react\";\n\nfunction CardDemo(){\n    return (\n        <div>\n          <Card style={{width:\"400px\"}} >\n            <div className=\"title\">早发白帝城</div>\n            <div className=\"author\">唐代-李白</div>\n            <p className=\"content\">风吹柳花满店香，吴姬压酒唤客尝。</p>\n            <p className=\"content\">金陵子弟来相送，欲行不行各尽觞。</p>\n            <p className=\"content\">请君试问东流水，别意与之谁短长。</p>\n          </Card>\n        </div>\n    );\n}\nReactDOM.render(<CardDemo />, mountNode);\n````\n\n```css\n.title {\n  font-size: 16px;\n  color: #333333;\n}\n```\n",
      "---\norder: 2\ntitle: 卡片阴影\n---\n\n卡片的应用可以有多种形式，可根据需要进行配置。\n\n````jsx\nimport { Card } from \"@ss/mtd-react\";\n\nfunction CardDemo(){\n    return (\n        <div className=\"shadow-demo\">\n            <Card shadow=\"always\">常显阴影</Card>\n            <Card shadow=\"hover\">悬浮显示阴影</Card>\n            <Card shadow=\"never\">不显示阴影</Card>\n        </div>\n    );\n}\nReactDOM.render(<CardDemo />, mountNode);\n````\n\n```css\n.shadow-demo {\n  display: flex;\n  justify-content: space-around;\n}\n.shadow-demo .mtd-card {\n  width: 220px;\n  text-align: center;\n}\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/loading",
    "content": [
      "---\norder: 4\ntitle: 方向\n---\n\nLoading 提供了 direction参数，可设置 `horizontal` `vertical`两种图标和文字位置关系， 默认为`horizontal`\n\n```jsx\nimport { Loading } from '@ss/mtd-react'\n\nReactDOM.render(\n  <div className=\"size-demo\">\n    <Loading  message=\"正在加载中\" />\n    <Loading direction=\"vertical\" message=\"正在加载中\" />\n  </div>,\n  mountNode\n);\n```\n\n",
      "---\norder: 0\ntitle: 基本用法\n---\n\n基本用法\n\n```jsx\nimport { Loading } from '@ss/mtd-react'\n\nReactDOM.render(<Loading />, mountNode);\n```\n\n",
      "---\norder: 3\ntitle: 延迟显示\n---\n\n延迟显示 loading 效果。当 Loading 状态在 delay 时间内结束，则不显示 loading 状态。\n\n```jsx\nimport { useState } from 'react';\nimport { Loading, Announcement, Switch } from '@ss/mtd-react';\n\nconst Demo = () => {\n  const [ loading, setLoading] = useState(false);\n\n  return (\n    <div>\n      <Switch\n        checkedChildren=\"开启\"\n        unCheckedChildren=\"关闭\"\n        onChange={() => setLoading(!loading)}\n        style={{ marginBottom: '20px' }}\n      />\n      <Loading loading={loading} delay={1000}>\n        <Announcement\n          type=\"info\"\n          title=\"勤学功深心似镜，苦练日久手出灵\"\n          description=\"勤学功深心似镜，苦练日久手出灵\"\n        />\n      </Loading>\n    </div>\n  );\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n",
      "---\norder: 1\ntitle: 尺寸\n---\n\nLoading提供 `normal` `small` `large` 三种大小，默认为 `normal`\n\n```jsx\nimport { Loading } from '@ss/mtd-react'\n\nReactDOM.render(\n  <div className=\"size-demo\">\n    <Loading size=\"small\" />\n    <Loading size=\"normal\" />\n    <Loading size=\"large\" />\n  </div>,\n  mountNode\n);\n```\n```css\n.size-demo .mtd-loading {\n  padding: 0 20px;\n}\n```\n",
      "---\norder: 5\ntitle: 自定义\n---\n\n可自定义加载指示器、加载文案。\n\n```jsx\nimport { Loading, Icon } from '@ss/mtd-react'\n\nReactDOM.render(\n  <div className=\"size-demo\">\n    <Loading indicator={<Icon type=\"loading\" size=\"large\" className=\"custom-loading\" />} />\n    <Loading indicator={<Icon type=\"loading\" className=\"custom-loading\"/>} message=\"正在加载中\" />\n  </div>,\n  mountNode\n);\n```\n\n```css\n.custom-loading{\n  font-size:28px;\n}\n```\n",
      "---\norder: 2\ntitle: 容器显示加载\n---\n\n可以直接把内容内嵌到 Loading 中，将现有容器变为加载状态。\n\n```jsx\nimport { useState } from 'react';\nimport { Loading, Announcement, Switch } from '@ss/mtd-react';\n\nconst Demo = () => {\n  const [ loading, setLoading] = useState(false);\n\n  return (\n      <div>\n        <Switch\n          checkedChildren=\"开启\"\n          unCheckedChildren=\"关闭\"\n          onChange={() => setLoading(!loading)}\n          style={{ marginBottom: '20px' }}\n        />\n        <Loading loading={loading}>\n          <Announcement\n            title=\"勤学功深心似镜，苦练日久手出灵\"\n            description=\"勤学功深心似镜，苦练日久手出灵\"\n            type=\"info\"\n          />\n        </Loading>\n      </div>\n    );\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/input-number",
    "content": [
      "---\norder: 6\ntitle: 四舍五入\n---\n\n对于设置`precision`属性的组件，使用`round`属性控制超出精度的位数进行四舍五入\n\n````jsx\nimport { useState } from \"react\";\nimport { InputNumber } from \"@ss/mtd-react\";\n\nconst Demo = () => {\n  const [valueMap, setvalueMap] = useState({\n    value1: 1.234,\n    value2: 2.345,\n    value3: 5.678,\n  });\n\n  const handleChange = (index, value) => {\n    setvalueMap(prevState => ({ ...prevState, [`value${index}`]: value }));\n  };\n  return (\n    <div style={{ textAlign: 'left', display: 'flex', alignItems: 'center', justifyContent: 'space-around' }}>\n      <div>\n        <p>保留2位 去尾数</p>\n        <InputNumber\n          value={valueMap.value1}\n          round\n          precision={2}\n          onChange={value => handleChange(1, value)}\n        />\n      </div>\n      <div>\n        <p>保留2位 进一位</p>\n        <InputNumber\n          value={valueMap.value2}\n          round\n          precision={2}\n          onChange={value => handleChange(2, value)}\n        />\n      </div>\n      <div>\n        <p>保留0位 进一位</p>\n        <InputNumber\n          value={valueMap.value3}\n          round\n          precision={0}\n          onChange={value => handleChange(3, value)}\n        />\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n````\n",
      "---\norder: 1\ntitle: 基本样式\n---\n\n````jsx\nimport { useState } from \"react\"; \nimport { InputNumber } from \"@ss/mtd-react\";\n\nconst Demo = () => {\n  const [value, setvalue] = useState(3);\n\n  const handleChange = count => {\n    console.log('handleChange', count);\n    setvalue(count);\n  };\n\n  return <InputNumber value={value} min={0} onChange={handleChange} />;\n};\n\nReactDOM.render(<Demo />, mountNode);\n````\n\n```css\n#components-inputnumber-demo-01-base + div + div.preview {\n  text-align: center;\n  padding: 40px;\n  overflow: auto;\n}\n```\n",
      "---\norder: 3\ntitle: 类型\n---\n\n````jsx\nimport { useState } from \"react\";\nimport { InputNumber } from \"@ss/mtd-react\";\n\nconst Demo = () => {\n  const [valueMap, setvalueMap] = useState({\n    value1: 1,\n    value2: 1,\n    value3: 1,\n  });\n\n  const handleChange = (index, value) => {\n    setvalueMap(prevState => ({ ...prevState, [`value${index}`]: value }));\n  };\n\n  return (\n    <div style={{ textAlign: 'left', display: 'flex', alignItems: 'center', justifyContent: 'space-around' }}>\n      <div>\n        <p>按钮在左右</p>\n        <InputNumber\n          value={valueMap.value1}\n          onChange={value => handleChange(1, value)}\n        />\n      </div>\n      <div>\n        <p>按钮在右侧</p>\n        <InputNumber\n          value={valueMap.value2}\n          controlsPosition='right'\n          onChange={value => handleChange(2, value)}\n        />\n      </div>\n      <div>\n        <p>无按钮</p>\n        <InputNumber\n          value={valueMap.value3}\n          controls={false}\n          onChange={value => handleChange(3, value)}\n        />\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n````\n",
      "---\norder: 5\ntitle: 控制\n---\n\n某些业务下数字输入框需要进行步数增减、精度、和单位的控制\n\n````jsx\nimport { useState } from \"react\";\nimport { InputNumber } from \"@ss/mtd-react\";\n\nconst Demo = () => {\n  const [valueMap, setvalueMap] = useState({\n    value1: 1,\n    value2: 1,\n    value3: 1,\n    value4: 1,\n  });\n\n  const handleChange = (index, value) => {\n    setvalueMap(prevState => ({ ...prevState, [`value${index}`]: value }));\n  };\n\n  return (\n    <div style={{ textAlign: 'left', display: 'flex', alignItems: 'center', justifyContent: 'space-around' }}>\n      <div>\n        <p>步数</p>\n        <InputNumber\n          value={valueMap.value1}\n          step={2}\n          onChange={value => handleChange(1, value)}\n        />\n      </div>\n      <div>\n        <p>精度</p>\n        <InputNumber\n          value={valueMap.value2}\n          precision={2}\n          onChange={value => handleChange(2, value)}\n        />\n      </div>\n      <div>\n        <p>单位</p>\n        <InputNumber\n          value={valueMap.value3}\n          formatter={num => `¥${num}`}\n          parser={num => num.replace('¥', '')}\n          onChange={value => handleChange(3, value)}\n        />\n        <InputNumber\n          value={valueMap.value4}\n          formatter={num => `${num}%`}\n          parser={num => num.replace('%', '')}\n          onChange={value => handleChange(4, value)}\n        />\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n````\n",
      "---\norder: 2\ntitle: 大小\n---\n\n````jsx\nimport { useState } from \"react\";\nimport { InputNumber } from \"@ss/mtd-react\";\n\nconst Demo = () => {\n  const [valueMap, setvalueMap] = useState({\n    value1: 1,\n    value2: 1,\n    value3: 1,\n  });\n\n  const handleChange = (index, value) => {\n    setvalueMap(prevState => ({ ...prevState, [`value${index}`]: value }));\n  };\n\n  return (\n    <div style={{ textAlign: 'left', display: 'flex', alignItems: 'center', justifyContent: 'space-around' }}>\n      <div>\n        <p>小号</p>\n        <InputNumber\n          value={valueMap.value1}\n          size='small'\n          onChange={value => handleChange(1, value)}\n        />\n      </div>\n      <div>\n        <p>中号</p>\n        <InputNumber\n          value={valueMap.value2}\n          onChange={value => handleChange(2, value)}\n        />\n      </div>\n      <div>\n        <p>大号</p>\n        <InputNumber\n          value={valueMap.value3}\n          size='large'\n          onChange={value => handleChange(3, value)}\n        />\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n````\n",
      "---\norder: 5\ntitle: 文字对齐\n---\n\n````jsx\nimport { useState } from \"react\";\nimport { InputNumber } from \"@ss/mtd-react\";\n\nconst Demo = () => {\n  const [valueMap, setvalueMap] = useState({\n    value1: 1,\n    value2: 1,\n    value3: 1,\n  });\n\n  const handleChange = (index, value) => {\n    setvalueMap(prevState => ({ ...prevState, [`value${index}`]: value }));\n  };\n\n  return (\n    <div style={{ textAlign: 'left', display: 'flex', alignItems: 'center', justifyContent: 'space-around' }}>\n      <div>\n        <p>左对齐</p>\n        <InputNumber\n          value={valueMap.value1}\n          style={{ textAlign: 'left' }}\n          onChange={value => handleChange(1, value)}\n        />\n      </div>\n      <div>\n        <p>居中对齐</p>\n        <InputNumber\n          value={valueMap.value2}\n          onChange={value => handleChange(2, value)}\n        />\n      </div>\n      <div>\n        <p>右对齐</p>\n        <InputNumber\n          value={valueMap.value3}\n          style={{ textAlign: 'right' }}\n          onChange={value => handleChange(3, value)}\n        />\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n````\n",
      "---\norder: 4\ntitle: 状态\n---\n\n````jsx\nimport { useState } from \"react\";\nimport { InputNumber } from \"@ss/mtd-react\";\n\nconst Demo = () => {\n  const [valueMap, setvalueMap] = useState({\n    value1: 1,\n    value2: 1,\n    value3: null\n  });\n\n  const handleChange = (index, value) => {\n    setvalueMap(prevState => ({ ...prevState, [`value${index}`]: value }));\n  };\n\n  return (\n    <div style={{ textAlign: 'left', display: 'flex', alignItems: 'center', justifyContent: 'space-around' }}>\n      <div>\n        <p>正常态</p>\n        <InputNumber\n          value={valueMap.value1}\n          onChange={value => handleChange(1, value)}\n        />\n      </div>\n      <div>\n        <p>禁用态</p>\n        <InputNumber\n          value={valueMap.value2}\n          disabled\n          onChange={value => handleChange(2, value)}\n        />\n      </div>\n      <div className=\"error-demo\">\n        <p>错误态</p>\n        <div>\n          <InputNumber\n            value={valueMap.value3}\n            invalid\n            onChange={value => handleChange(3, value)}\n          />\n          <div className=\"mtd-form-item-error-tip\">输入不可为空</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n````\n```css\n.error-demo .mtd-form-item-error-tip{\n  color:#FF6459;\n}\n```"
    ]
  },
  {
    "url": "/mtd/react/components/auto-complete",
    "content": [
      "---\norder: 2\ntitle: 多选\n---\n\n设置 `multiple = true` 可支持多选。\n\n```jsx\nimport { useState } from 'react';\nimport { AutoComplete } from '@ss/mtd-react';\n\nconst Option = AutoComplete.Option;\n\nconst Demo = () => {\n  const [cities, setCities] = useState([\n    '北京',\n    '上海',\n    '深圳',\n    '杭州',\n    '成都',\n    '南京',\n    '武汉',\n    '厦门',\n    '天津',\n    '重庆',\n  ]);\n\n  const onChange = option => {\n    console.log(option);\n  };\n\n  return (\n    <AutoComplete\n      placeholder={`输入'北京,上海'试一下`}\n      multiple\n      maxTagCount={2}\n      onChange={onChange}\n      style={{ width: 360 }}\n    >\n      {cities.map(city => (\n        <Option key={city} value={city}>\n          {city}\n        </Option>\n      ))}\n    </AutoComplete>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n",
      "---\norder: 1\ntitle: 基本用法\n---\n\n基本使用，通过 `options` 设置自动完成的数据源。\n\n```jsx\nimport { useState } from 'react';\nimport { AutoComplete } from '@ss/mtd-react';\n\nconst Option = AutoComplete.Option;\n\nconst Demo = () => {\n  const [dataSource, setDataSource] = useState([]);\n\n  const handleFilter = filter => {\n    setDataSource(!filter ? [] : [filter, filter + filter, filter + filter + filter]);\n  };\n\n  return (\n    <AutoComplete style={{ width: 240 }} placeholder=\"input here\" onFilter={handleFilter} notFoundMessage=\"无数据\">\n      {dataSource.map((option, index) => (\n        <Option key={index} value={option}>\n          {option}\n        </Option>\n      ))}\n    </AutoComplete>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n",
      "---\norder: 4\ntitle: 查询模式\n# noPreview: true\n---\n\n完全自定义 Option，显示复杂的布局。\n\n```jsx\nimport { AutoComplete } from '@ss/mtd-react';\nconst Option = AutoComplete.Option;\nconst OptionGroup = AutoComplete.OptionGroup;\n\nconst dataSource = [\n  {\n    title: '话题',\n    children: [\n      {\n        title: 'mtd-react设计规范',\n        count: 30000,\n        disabled: true,\n      },\n      {\n        title: 'mtd-react的form设计',\n        count: 10800,\n      },\n    ],\n  },\n  {\n    title: '问题',\n    children: [\n      {\n        title: 'mtd-react是什么',\n        count: 40000,\n      },\n      {\n        title: 'mtd-react的依赖有哪些',\n        count: 54000,\n      },\n    ],\n  },\n  {\n    title: '文章',\n    children: [\n      {\n        title: 'mtd-react在美团',\n        count: 60000,\n      },\n      {\n        title: 'mtd-react之定制主题',\n        count: 12000,\n      },\n    ],\n  },\n];\n\nconst renderTitle = title => {\n  return (\n    <div>\n      {title}\n      <a style={{ float: 'right' }} href=\"javascript:;\">\n        更多\n      </a>\n    </div>\n  );\n};\n\nconst Demo = () => {\n  return (\n    <AutoComplete\n      className=\"autocomplete-search\"\n      placeholder=\"input here\"\n      renderInputLabel={option => option.value}\n      popLayer={{ className: 'autocomplete-search-dropdown' }}\n      style={{ width: 240 }}\n      onChange={value => console.log(value)}\n    >\n      {dataSource.map(group => {\n        return (\n          <OptionGroup key={group.title} label={renderTitle(group.title)}>\n            {(group.children || []).map(option => {\n              return (\n                <Option key={option.title} disabled={option.disabled} value={option.title}>\n                  {option.title}\n                  <span className=\"autocomplete-search-item-count\">{option.count}</span>\n                </Option>\n              );\n            })}\n          </OptionGroup>\n        );\n      })}\n      <Option disabled key=\"all\" className=\"show-all\" value=\"show-all\">\n        <a href=\"javascript:;\">查看所有结果</a>\n      </Option>\n    </AutoComplete>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n```css\n.mtd-autoComplete {\n  display: inline-block;\n}\n.autocomplete-search-dropdown .mtd-autoComplete-group-title {\n  color: #666;\n  font-weight: bold;\n}\n\n.autocomplete-search-item-count {\n  position: absolute;\n  color: #999;\n  right: 16px;\n}\n.autocomplete-search-dropdown .show-all {\n  text-align: center;\n  cursor: default;\n}\n```\n",
      "---\norder: 2\ntitle: 分词\n---\n\nAutoComplete 多选默认 enter 键生成一项，也可设置分词符 `tokenSeparators`，输入内容后，按下分词符时自动生成一项。\n\n```jsx\nimport { useState } from 'react';\nimport { AutoComplete } from '@ss/mtd-react';\n\nconst Option = AutoComplete.Option;\n\nconst Demo = () => {\n  const [cities, setCities] = useState([\n    '北京',\n    '上海',\n    '深圳',\n    '杭州',\n    '成都',\n    '南京',\n    '武汉',\n    '厦门',\n    '天津',\n    '重庆',\n  ]);\n\n  const handleFilter = filter => {\n    console.log('filter:', filter);\n  };\n\n  const onChange = option => {\n    console.log('option:', option);\n  };\n\n  return (\n    <div className=\"content\">\n      <AutoComplete\n        placeholder=\"输入内容后，按下enter键试一下\"\n        multiple\n        onChange={onChange}\n        onFilter={handleFilter}\n        style={{ width: 360 }}\n      >\n        {cities.map(city => (\n          <Option key={city} value={city}>\n            {city}\n          </Option>\n        ))}\n      </AutoComplete>\n      <AutoComplete\n        placeholder=\"输入内容后按下'，'键试一下\"\n        multiple\n        tokenSeparators=\"，\"\n        onChange={onChange}\n        onFilter={handleFilter}\n        style={{ width: 360 }}\n      >\n        {cities.map(city => (\n          <Option key={city} value={city}>\n            {city}\n          </Option>\n        ))}\n      </AutoComplete>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n```css\n.content {\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n}\n```\n",
      "---\norder: 5\ntitle: 异步拉取数据源\n---\n\n模拟一个从服务器端获取数据源的展示过程。\n\n```jsx\nimport { useState } from 'react';\nimport { AutoComplete, Loading } from '@ss/mtd-react';\n\nconst Option = AutoComplete.Option;\n\nconst Demo = () => {\n  const [dataSource, setDataSource] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const handleFilter = filter => {\n    setDataSource([]);\n    setLoading(true);\n    fetchData(filter);\n  };\n\n  const fetchData = filter => {\n    setTimeout(() => {\n      const cities = ['北京', '上海', '深圳', '杭州', '成都', '南京', '武汉', '厦门', '天津', '重庆'];\n      setDataSource(cities);\n      setLoading(false);\n    }, 1000);\n  };\n\n  return (\n    <AutoComplete\n      loading={loading}\n      loadingMessage={<Loading />}\n      onFilter={handleFilter}\n      placeholder=\"input here\"\n      style={{ width: 240 }}\n    >\n      {dataSource.map((option, index) => (\n        <Option key={option} value={option}>\n          {option}\n        </Option>\n      ))}\n    </AutoComplete>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/progress",
    "content": [
      "---\norder: 0\ntitle: 基本使用\nnoPreview: false\n---\n\n基本使用。\n\n```jsx\nimport { useState } from 'react';\nimport { Progress, Button} from '@ss/mtd-react';\n\nlet value = 0;\nconst Demo = () => {\n  const [percentage, setPercentage] = useState(100);\n  const handleClick = () => {\n    value = 0;\n    const f1 = () => {\n      setTimeout(() => {\n        if(value < 100) {\n          value++;\n          setPercentage(value)\n          f1()\n        }\n      }, 100)\n    }\n    f1()\n  };\n  return(\n    <div>\n      <div className=\"demo-box\">\n        <Progress className=\"progress-base\" percentage={percentage} />\n      </div>\n      <Button onClick={handleClick} >预览效果</Button>\n    </div>\n  )\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n```css\n  .demo-box{\n    width: 350px;\n    margin-left: 20px;\n    display: inline-block;\n    margin-bottom: 40px;\n  }\n  .demo-progress-small {\n    width: 250px;\n  }\n```",
      "---\norder: 2\ntitle: 状态\nnoPreview: false\n---\n\n进度条会根据进程情况出现成功、失败两种状态。\n\n```jsx\nimport { useState } from 'react';\nimport { Progress ,Button} from '@ss/mtd-react';\n\nlet value1 = 10, value2 = 10;\nconst Demo = () => {\n  const [percentage1, setPercentage1] = useState(100);\n  const [percentage2, setPercentage2] = useState(60);\n  const handleClick1 = () => {\n    value1 = 10;\n    const f1 = () => {\n      setTimeout(() => {\n        if(value1 < 100) {\n          value1++;\n          setPercentage1(value1)\n          f1()\n        }\n      }, 100)\n    }\n    f1()\n  }\n  const handleClick2 = () => {\n    value2 = 10;\n    const f1 = () => {\n      setTimeout(() => {\n        if(value2 < 60) {\n          value2++;\n          setPercentage2(value2)\n          f1()\n        }\n      }, 100)\n    }\n    f1()\n  }\n  return(\n    <div>\n      <div className=\"demo-box\">\n        <Progress percentage={percentage1} status={percentage1>=100? 'success':'default'}></Progress>\n      </div>\n      <Button onClick={handleClick1}>预览效果</Button>\n      <div className=\"demo-box\">\n        <Progress percentage={percentage2} status={percentage2>=60? 'error':'default'}></Progress>\n      </div>\n      <Button onClick={handleClick2}>预览效果</Button>\n    </div>\n  )\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n",
      "---\norder: 1\ntitle: 大小\nnoPreview: false\n---\n\n\n```jsx\nimport { Progress} from '@ss/mtd-react';\n\nReactDOM.render(\n  <div className=\"demo-box\">\n    <Progress percentage={65} strokeWidth={6} className=\"demo-progress-small\"></Progress><br/>\n    <Progress percentage={65}></Progress>\n  </div>,\n  mountNode\n);\n```\n```css\n  .demo-box{\n    width: 350px;\n    margin-left: 20px;\n    display: inline-block;\n    margin-bottom: 40px;\n  }\n  .demo-progress-small {\n    width: 250px;\n  }\n```",
      "---\norder: 3\ntitle: 环形进度条\nnoPreview: false\n---\n\n多用于屏幕空间受限区域的进度展示。\n\n```jsx\nimport { Progress} from '@ss/mtd-react';\n\nReactDOM.render(\n  <div>\n    <div className=\"demo-circle\">\n      <Progress percentage={72} type=\"circle\" width={50}></Progress>\n    </div>\n    <div className=\"demo-circle\">\n      <Progress percentage={72} type=\"circle\" width={30} showInfo={false}></Progress>\n      <div>72%</div>\n    </div>\n    <div className=\"demo-circle\">\n      <Progress percentage={100} type=\"circle\" width={30} status=\"success\"></Progress>\n      <div style={{color: '#5ABB3C'}}>完成</div>\n    </div>\n    <div className=\"demo-circle\">\n      <Progress percentage={72} type=\"circle\" width={30} status=\"error\"></Progress>\n      <div style={{color: '#FF6459'}}>失败</div>\n    </div>\n  </div>,\n  mountNode\n);\n```\n```css\n  .demo-circle {\n    display: inline-block;\n    width: 50px;\n    font-size: 12px;\n    text-align: center;\n  }\n```"
    ]
  },
  {
    "url": "/mtd/react/components/time-picker",
    "content": [
      "---\norder: 5\ntitle: 时间范围\n---\n\nautoExchange 属性控制时间范围前小后大，默认开启\n\n```jsx\nimport { TimePicker } from '@ss/mtd-react';\n\nReactDOM.render(\n  <div className=\"block\">\n    <TimePicker.RangePicker\n      format=\"HH:mm:ss\"\n      style={{ width: 240, marginTop: '10px' }}\n      placeholder={['起始时间', '结束时间']}\n    />\n    <TimePicker.RangePicker\n      autoExchange={false}\n      format=\"HH:mm:ss\"\n      style={{ width: 240, marginTop: '10px' }}\n      placeholder={['起始时间', '结束时间']}\n    />\n    <TimePicker.RangePicker\n      format=\"HH:mm:ss\"\n      style={{ width: 240, marginTop: '10px' }}\n      placeholder={['起始时间', '结束时间']}\n      defaultPanelTime={['00:00:00', '00:00:00']}\n    />\n  </div>,\n  mountNode,\n);\n```\n",
      "---\norder: 1\ntitle: 基础用法\n---\n\n```jsx\nimport { TimePicker } from '@ss/mtd-react';\n\nfunction change(v){\n  console.log(v);\n}\nReactDOM.render(\n  <div className=\"time-basic\">\n    <TimePicker format=\"HH:mm:ss\" placeholder=\"精确到秒\" onChange={change}/>\n    <TimePicker format=\"hh:mm:ss\" placeholder=\"12小时制\" onChange={change}/>\n    <TimePicker format=\"HH:mm:ss\" placeholder=\"设置默认时间\" onChange={change} defaultPanelTime=\"00:00:00\"/>\n  </div>,\n  mountNode\n);\n```\n\n```css\n.time-basic .mtd-time-picker{\n    display:inline-block;\n    width:200px;\n    margin-right:40px;\n}\n```",
      "---\norder: 6\ntitle: 步长选项\n---\n\n可以使用 hourStep minuteStep secondStep 按步长展示可选的时分秒\n\n```jsx\nimport { TimePicker } from '@ss/mtd-react';\n\nReactDOM.render(\n  <div className=\"block\">\n    <TimePicker format=\"HH:mm:ss\" minuteStep={15} secondStep={10} style={{ width: 240 }} placeholder=\"精确到秒\" />\n  </div>,\n  mountNode\n);\n```\n",
      "---\norder: 3\ntitle: 不可选时间\n---\n\nTimePicker 设置 disabledHours、disabledMinutes 和 disabledSeconds 控制不能选择的时间\n\n```jsx\nimport { TimePicker } from '@ss/mtd-react';\n\nfunction disabledHours(h) {\n  return h > 20;\n}\nfunction disabledMinutes(m, selectedHour) {\n  if (selectedHour < 10) {\n    return m > 9 && m < 18;\n  }\n}\nfunction disabledSeconds(s, selectedHour, selectedMinute) {\n  if (selectedHour > 10 && selectedMinute > 40) {\n    return s > 40;\n  }\n}\nfunction disabled12Hours(h) {\n  return h > 20;\n}\n\nfunction DatePickerDemo() {\n  return (\n    <div className=\"time-disabled\">\n      <TimePicker\n        placeholder=\"选择时间\"\n        disabledHours={disabledHours}\n        disabledMinutes={disabledMinutes}\n        disabledSeconds={disabledSeconds}\n        format=\"HH:mm:ss\"\n      />\n      <TimePicker\n        placeholder=\"隐藏不可选择的时间\"\n        hideDisabledOptions\n        disabledHours={disabledHours}\n        disabledMinutes={disabledMinutes}\n        disabledSeconds={disabledSeconds}\n        format=\"HH:mm:ss\"\n      />     \n      <TimePicker\n        placeholder=\"禁用12小时制小时\"\n        disabledHours={disabled12Hours}\n        format=\"hh:mm:ss\"\n      />\n    </div>\n  );\n}\n\nReactDOM.render(<DatePickerDemo />, mountNode);\n```\n\n```css\n.time-disabled .mtd-time-picker {\n  display: inline-block;\n  width: 200px;\n  margin-right: 40px;\n}\n```\n",
      "---\norder: 4\ntitle: 时间确认\n---\n\n选择时间后，点击确认按钮触发onChange\n\n```jsx\nimport {TimePicker} from \"@ss/mtd-react\";\n\nReactDOM.render(<div className=\"block\">\n    <TimePicker confirmable value=\"12:12\" style={{width:240}} onChange={v => console.log(v)} />\n</div>, mountNode);\n```",
      "---\norder: 2\ntitle: 大小\n---\n\n```jsx\nimport { TimePicker } from '@ss/mtd-react';\n\nReactDOM.render(\n  <div className=\"time-size\">\n    <TimePicker size=\"small\" placeholder=\"小号\" />\n    <TimePicker placeholder=\"默认\" />\n    <TimePicker size=\"large\" placeholder=\"大号\" />\n  </div>,\n  mountNode\n);\n```\n\n```css\n.time-size .mtd-time-picker {\n  display: inline-block;\n  width: 200px;\n  margin-right: 40px;\n}\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/input",
    "content": [
      "---\norder: 2\ntitle: 状态\n---\n\n通过设置 `disabled` 属性控制组件的禁用状态，默认为可用。\n\n```jsx\nimport { Input } from '@ss/mtd-react';\n\nReactDOM.render(\n  <div className=\"input-demo-size\">\n    <Input value=\"禁用状态\" disabled />\n    <Input value=\"只读状态\" readOnly clearable={false} />\n    <Input placeholder=\"最长5个字符\" maxLength=\"5\" />\n  </div>,\n  mountNode\n);\n```\n",
      "---\norder: 7\ntitle: 前缀/后缀图标\n---\n\n通过设置 `prefix` 属性添加前缀图标，设置 `suffix` 属性添加后缀图标。\n\n```jsx\nimport { Input, Icon } from '@ss/mtd-react';\n\nReactDOM.render(\n  <div className=\"input-demo-prefix\">\n    <Input placeholder=\"请输入用户名\" prefix={<Icon type=\"avatar-o\" />} />\n    <Input\n      clearable={false}\n      placeholder=\"请输入搜索内容\"\n      suffix={\n        <Icon\n          type=\"search\"\n          style={{ cursor: 'pointer' }}\n          onClick={() => {\n            console.log('handle search');\n          }}\n        />\n      }\n    />\n    <Input placeholder=\"输入百分比\" suffix=\"%\" />\n  </div>,\n  mountNode\n);\n```\n\n```css\n.input-demo-prefix {\n  width: 300px;\n  display: inline;\n}\n.input-demo-prefix .mtd-input {\n  display: inline-block;\n  margin: 0 20px;\n}\n```\n",
      "---\norder: 8\ntitle: 前置/后置标签\n---\n\n通过设置 `addonBefore` 属性添加前置标签、设置 `addonAfter` 属性添加后置标签。\n\n```jsx\nimport { Input, Select } from '@ss/mtd-react';\n\nReactDOM.render(\n  <div className=\"input-demo-addon\">\n    <Input addonBefore=\"http://\" />\n    <Input addonBefore={<span>邮 箱</span>} addonAfter=\"@meituan.com\" placeholder=\"输入邮箱\" />\n  </div>,\n  mountNode\n);\n```\n\n```css\n.input-demo-addon .mtd-input {\n  display: inline-block;\n  margin: 0 20px;\n  width: 300px;\n}\n```\n",
      "---\norder: 1\ntitle: 尺寸\n---\n\n可通过`size`属性设置尺寸,共提供 `normal`、`small`、`large` 三种尺寸。\n\n```jsx\nimport { Input } from '@ss/mtd-react';\n\nReactDOM.render(\n  <div className=\"input-demo-size\">\n    <Input placeholder=\"small\" size=\"small\" />\n    <Input placeholder=\"normal\" size=\"normal\" />\n    <Input placeholder=\"large\" size=\"large\" />\n  </div>,\n  mountNode\n);\n```\n\n```css\n.input-demo-size {\n  width: 300px;\n  display: inline;\n}\n.input-demo-size .mtd-input {\n  display: inline-block;\n  margin: 0 20px;\n}\n```\n",
      "---\norder: 0\ntitle: 基本用法\n---\n\n```jsx\nimport { Input } from '@ss/mtd-react';\n\nReactDOM.render(\n  <Input\n    dispatchChange={['onBlur']}\n    onChange={e => console.log(e.target.value)}\n    placeholder=\"请输入内容\"\n    style={{ width: 300, margin: '0 auto' }}\n  />,\n  mountNode\n);\n```\n",
      "---\norder: 4\ntitle: 可清空\n---\n\n通过设置 `clearable` 属性控制清空按钮是否显示，默认为显示。\n\n```jsx\nimport { useState } from 'react';\nimport { Input } from '@ss/mtd-react';\n\nconst Demo = () => {\n  const [value, setValue] = useState('显示清空按钮');\n\n  const handleClick = e => {\n    setValue(e.target.value);\n  };\n\n  return (\n    <Input\n      clearable\n      value={value}\n      placeholder=\"请输入内容\"\n      style={{ width: 300, margin: '0 auto' }}\n      onChange={handleClick}\n    />\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n",
      "---\norder: 12\ntitle: 输入框组合\n---\n\n使用 `compact` 模式时，不需要通过 `Col` 来控制宽度。\n\n```jsx\nimport { Input, Col, Row, Select, InputNumber, DatePicker, AutoComplete } from '@ss/mtd-react';\n\nconst InputGroup = Input.InputGroup;\nconst { Option } = Select;\n\nconst Demo = () => {\n  return (\n    <InputGroup compact>\n      <Select>\n        <Option value=\"0571\">0571</Option>\n        <Option value=\"0001\">0001</Option>\n      </Select>\n      <Input style={{ width: '50%' }} />\n    </InputGroup>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n",
      "---\norder: 9\ntitle: 自定义搜索框\n---\n\n通过不同组件的结合，能够实现自定义的搜索框。\n\n```jsx\nimport { Input, Icon, Button } from '@ss/mtd-react';\n\nconst Demo = () => {\n  return (\n    <div style={{ display: 'inline' }}>\n      <div className=\"input-demo-search\">\n        <Input placeholder=\"请输入搜索内容\" clearable={false} />\n        <Button className=\"icon_btn\" icon=\"search\" type=\"primary\"></Button>\n      </div>\n      <div className=\"input-demo-search\">\n        <Input placeholder=\"请输入搜索内容\" clearable={false} />\n        <Button className=\"text_btn\" type=\"primary\">\n          搜索\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n```css\n.input-demo-search {\n  width: 300px;\n  display: inline-block;\n  position: relative;\n  margin: 0 20px;\n}\n.icon_btn,\n.text_btn {\n  position: absolute;\n  right: 0px;\n  top: 0;\n  border-top-left-radius: 0px;\n  border-bottom-left-radius: 0px;\n}\n```\n",
      "---\norder: 10\ntitle: 文本域\n---\n\n通过设置 `autosize` 属性可以使得文本域的高度能够根据文本内容自动进行调整。\n\n```jsx\nimport { Input } from '@ss/mtd-react';\n\nReactDOM.render(\n  <div>\n    <Input.TextArea placeholder=\"请输入内容\" style={{ marginBottom: '20px' }} />\n    <Input.TextArea\n      placeholder=\"使用autosize设置自适应的文本高度,超过最小行数时会撑开组件，超过最大行数时会出现滚动条。\"\n      autosize={{ minRows: 3, maxRows: 5 }}\n    />\n  </div>,\n  mountNode\n);\n```\n",
      "---\norder: 5\ntitle: 受控组件\n---\n\nInput 组件可在按下回车、按下键盘、内容修改、失去焦点、获得焦点，这五个行为下受控。\n\n```jsx\nimport { useState } from 'react';\nimport { Input } from '@ss/mtd-react';\n\nconst Demo = () => {\n  const [value, setValue] = useState('');\n\n  const handleChange = e => {\n    setValue(e.target.value);\n  };\n\n  const handlePressEnter = e => {\n    console.log('PressEnter', e.target.value);\n  };\n\n  const handleKeyDown = e => {\n    console.log('KeyDown', e.target.value);\n  };\n\n  const handleBlur = e => {\n    console.log('handleBlur', e.target.value);\n  };\n\n  const handleFocus = e => {\n    console.log('Focus', e.target.value);\n  };\n\n  return (\n    <Input\n      value={value}\n      style={{ width: 300, margin: '0 auto' }}\n      placeholder=\"请输入内容\"\n      onChange={handleChange}\n      onPressEnter={handlePressEnter}\n      onKeyDown={handleKeyDown}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n    />\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n",
      "---\norder: 11\ntitle: 文本计数\n---\n\n通过设置 `maxLength` 限制输入的文本的长度，超过限制则不能输入。\n设置 `showCount` 来控制是否显示文字计数。\n只有 `maxLength` 和 `showCount` 同时设置才会显示文字计数。\n\n```jsx\nimport { Input } from '@ss/mtd-react';\n\nconst Demo = () => {\n  return (\n    <div className=\"input-demo-count\">\n      <div>\n        <Input placeholder=\"最大长度10个字\" maxLength={10} showCount style={{ width: '300px' }} />\n      </div>\n      <Input.TextArea placeholder=\"最大长度20个字\" maxLength={20} showCount />\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n```css\n.input-demo-count .mtd-input {\n  display: inline-block;\n  margin: 0 20px;\n}\n.input-demo-count .mtd-input.mtd-input-textarea {\n  display: block;\n  margin-top: 20px;\n}\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/notification",
    "content": [
      "---\norder: 4\ntitle: 自定义\n---\n\n`notification` 可承载多种元素。\n\n```jsx\nimport { Button, notification } from '@ss/mtd-react'\n\nfunction openNotification(){\n  const toaster = notification.info({\n    title: '通知标题',\n    duration: Infinity,\n    message: (\n      <div>\n        <p>财富会带来忧虑，但智慧会导致精神安宁</p>\n        <div style={{textAlign: 'right'}}>\n          <Button size=\"small\" type=\"primary\" onClick={() => toaster.close()}>\n            我知道了\n          </Button>\n        </div>\n      </div>\n    )\n  });\n}\nfunction openNotification1(){\n  notification.error({\n    title: '通知标题',\n    message: (\n      <div>\n        2018.06.12 12:00:23 信息查询失败，立即跳转查看<a href=\"javascrip:;\">失败原因</a>\n      </div>\n    ),\n    closable: true\n  });\n}\n\nReactDOM.render(\n    <div >\n      <Button onClick={openNotification} style={{marginRight:20}}>带操作按钮</Button>\n      <Button onClick={openNotification1} >带链接</Button>\n    </div>,\nmountNode);\n```\n",
      "---\norder: 2\ntitle: 消失方式\n---\n\n可通过duration控制消息提示时间，如果信息较重要，需用户确认，必须手动关闭才能消失。\n\n\n```jsx\nimport { Button,notification } from '@ss/mtd-react'\n\nfunction openNotification1(){\n  notification.info({\n      title: '提示',\n      message: '这里是一个提示，请注意！',\n      duration:Infinity,\n  });\n}\nfunction openNotification2(){\n  notification.info({\n      title: '延迟关闭',\n      message: '这里是一个提示，5s后会关闭',\n      duration: 5000\n  });\n}\nfunction openNotification3(){\n  notification.info({\n      title: '不显示关闭按钮',\n      message: '这里是一个不显示关闭按钮的提示',\n      closable: false\n  });\n}\n\nReactDOM.render(\n    <div >\n      <Button onClick={openNotification1} style={{marginRight:20}}>不会自动关闭</Button>\n      <Button onClick={openNotification2} style={{marginRight:20}}>延迟关闭</Button>\n      <Button onClick={openNotification3} >不显示关闭按钮</Button>\n    </div>,\nmountNode);\n```\n",
      "---\norder: 5\ntitle: 更新消息内容\n---\n\n可以通过唯一的 key 或者 update方法 来更新内容。\n\n```jsx\nimport { Button, notification, Loading } from '@ss/mtd-react'\n\nfunction openMessage(type) {\n  const key = 'updatable';\n  const toaster = notification.info({\n    key,\n    message: <Loading loading />,\n  });\n  setTimeout(() => {\n    notification.info({\n      message: '我更新了!',\n      key,\n    });\n  }, 1000);\n  setTimeout(() => {\n    toaster.update({\n      message: '我又更新了!',\n    });\n  }, 2000);\n}\n\nReactDOM.render(<Button onClick={openMessage}>获取消息提示</Button>, mountNode);\n```\n",
      "---\norder: 3\ntitle: 弹出位置\n---\n\n可以让 notification 从屏幕四角任意位置弹出\n\n```jsx\nimport { Button, notification } from '@ss/mtd-react';\n\nfunction openNotification(placement) {\n  notification.success({\n    title: '成功',\n    message: '这是一条成功消息',\n    placement: placement,\n  });\n}\n\nconst NotificationDemo = () => {\n  return (\n    <div>\n      <Button onClick={() => openNotification('topRight')} style={{ marginRight: 20 }}>\n        右上角\n      </Button>\n      <Button onClick={() => openNotification('bottomRight')} style={{ marginRight: 20 }}>\n        右下角\n      </Button>\n      <Button onClick={() => openNotification('bottomLeft')} style={{ marginRight: 20 }}>\n        左下角\n      </Button>\n      <Button onClick={() => openNotification('topLeft')}>左上角</Button>\n    </div>\n  );\n};\nReactDOM.render(<NotificationDemo />, mountNode);\n```\n",
      "---\norder: 0\ntitle: 基础用法\n---\n\n反馈型：用于用户主动操作后的全局反馈提示，配合状态图标来表示成功、警告、失败等反馈信息，内容较简洁，在屏幕正上方展示。\n\n```jsx\nimport { Button, notification } from '@ss/mtd-react'\n\nfunction openMessage(){\n  notification.info({\n      title: '消息',\n      message: '这是一条通知消息'\n  });\n}\n\n\nReactDOM.render(<Button onClick={openMessage} type='primary'>通知</Button>, mountNode);\n```\n",
      "---\norder: 1\ntitle: 类型与用法\n---\n\n```jsx\nimport { Button,notification } from '@ss/mtd-react'\n\nfunction openNotification(type){\n  if(type==\"open\"){\n    notification.open({\n        title: '提示',\n        message: '这是一条消息通知'\n    });\n  }\n  if(type==\"success\"){\n    notification.success({\n        title: '成功',\n        message: '这是一条成功消息通知'\n    });\n  }\n  if(type==\"warning\"){\n    notification.warning({\n        title: '警告',\n        message: '这是一条警告消息通知'\n    });\n  }\n  if(type==\"info\"){\n    notification.info({\n        title: '通知',\n        message: '这是一条通知'\n    });\n  }\n  if(type==\"error\"){\n    notification.error({\n        title: '错误',\n        message: '这是一条错误消息通知'\n    });\n  }\n\n}\n\nReactDOM.render(\n    <div >\n      <Button onClick={()=>openNotification('success')} style={{marginRight:20}}>成功</Button>\n      <Button onClick={()=>openNotification('warning')} style={{marginRight:20}}>警告</Button>\n      <Button onClick={()=>openNotification('info')} style={{marginRight:20}}>通知</Button>\n      <Button onClick={()=>openNotification('error')} >错误</Button>\n    </div>,\nmountNode);\n```"
    ]
  },
  {
    "url": "/mtd/react/components/popconfirm",
    "content": [
      "---\norder: 1\ntitle: 按钮\n---\n\n可以修改按钮文案和按钮属性\n\n```jsx\nimport { Popconfirm, Button } from '@ss/mtd-react';\n\n\nconst Demo = () => {\n  return(\n    <Popconfirm\n        message=\"你确定要删除吗？\"\n        okText=\"删除\"\n        okBtnProps={{ type: 'danger', onClick: () => console.log('onClick ok') }}\n        cancelBtnProps={{ onClick: () => console.log('onClick cancel') }}\n        onOk={() => console.log('Click OK')}\n        onCancel={() => console.log('Click Cancel')}\n      >\n        <Button>删除</Button>\n      </Popconfirm>\n  );\n}\nReactDOM.render(<Demo />, mountNode);\n```\n",
      "---\norder: 2\ntitle: 位置\n---\n\n12 个位置\n\n```jsx\nimport { Popconfirm, Button } from '@ss/mtd-react';\n\nconst text = `What the deuce is it to me?  You say that we go around the sun.  If we went\naround the moon it would not make a pennyworth of difference to me or my work.\n-- Sherlock Holmes, \"A Study in Scarlet\"\n`;\n\nconst ButtonWidth = 60;\n\nReactDOM.render(\n  <div className=\"demo-popconfirm\">\n    <div style={{ marginLeft: ButtonWidth, whiteSpace: 'nowrap' }}>\n      <Popconfirm placement=\"topLeft\" message=\"弹出框内容\">\n        <Button size=\"small\">上左</Button>\n      </Popconfirm>\n      <Popconfirm placement=\"top\" message=\"弹出框内容\">\n        <Button size=\"small\">上边</Button>\n      </Popconfirm>\n      <Popconfirm placement=\"topRight\" message=\"弹出框内容\">\n        <Button size=\"small\">上右</Button>\n      </Popconfirm>\n    </div>\n    <div style={{ width: ButtonWidth, float: 'left' }}>\n      <Popconfirm placement=\"leftTop\" message=\"弹出框内容\">\n        <Button size=\"small\">左上</Button>\n      </Popconfirm>\n      <Popconfirm placement=\"left\" message=\"弹出框内容\">\n        <Button size=\"small\">左边</Button>\n      </Popconfirm>\n      <Popconfirm placement=\"leftBottom\" message=\"弹出框内容\">\n        <Button size=\"small\">左下</Button>\n      </Popconfirm>\n    </div>\n    <div style={{ width: ButtonWidth, marginLeft: ButtonWidth * 4 }}>\n      <Popconfirm placement=\"rightTop\" message=\"弹出框内容\">\n        <Button size=\"small\">右上</Button>\n      </Popconfirm>\n      <Popconfirm placement=\"right\" message=\"弹出框内容\">\n        <Button size=\"small\">右边</Button>\n      </Popconfirm>\n      <Popconfirm placement=\"rightBottom\" message=\"弹出框内容\">\n        <Button size=\"small\">右下</Button>\n      </Popconfirm>\n    </div>\n    <div style={{ marginLeft: ButtonWidth, clear: 'both', whiteSpace: 'nowrap' }}>\n      <Popconfirm placement=\"bottomLeft\" message=\"弹出框内容\">\n        <Button size=\"small\">下左</Button>\n      </Popconfirm>\n      <Popconfirm placement=\"bottom\" message=\"弹出框内容\">\n        <Button size=\"small\">下边</Button>\n      </Popconfirm>\n      <Popconfirm placement=\"bottomRight\" message=\"弹出框内容\">\n        <Button size=\"small\">下右</Button>\n      </Popconfirm>\n    </div>\n  </div>,\n  mountNode\n);\n```\n\n```css\n.demo-popconfirm {\n  width: 240px;\n  margin: auto;\n}\n.demo-popconfirm-btn {\n  width: 100px;\n  height: 50px;\n}\n.demo-popconfirm .mtd-button {\n  margin: 5px;\n}\n```\n",
      "---\norder: 3\ntitle: 自定义 icon\n---\n\n自定义提示 icon。\n\n```jsx\nimport { Popconfirm, Button, Icon } from '@ss/mtd-react';\n\nconst Demo = () => {\n  return (\n    <div>\n        <Popconfirm message=\"你确定要删除吗？\" icon={<Icon type=\"error-circle\" />}>\n          <Button>删除</Button>\n        </Popconfirm>\n      </div>\n  );\n}\nReactDOM.render(<Demo />, mountNode);\n```\n",
      "---\norder: 0\ntitle: 基本使用\n---\n\n基本使用。\n\n```jsx\nimport { useState } from 'react';\nimport { Popconfirm, Button } from '@ss/mtd-react';\n\nconst Demo = () => {\n  const [visible, setVisible] = useState(false);\n  \n  const handleChange = (visible) => {\n    console.log('visible', visible);\n    setVisible(visible)\n  }\n  return (\n    <div>\n      <Popconfirm\n        message=\"您确定要删除现有文档内容吗？\"\n        visible={visible}\n        onVisibleChange={handleChange}\n        autoDestory\n      >\n        <Button>删除</Button>\n      </Popconfirm>\n    </div>\n  );\n}\nReactDOM.render(<Demo />, mountNode);\n```\n\n```css\n.demos-popconfirm .mtd-button {\n   margin: 0 10px;\n}\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/cascader",
    "content": [
      "---\norder: 5\ntitle: 信息回显\n---\n\n回显选中路径，可明确提示和告知用户选中信息的分类来源。\n`formatter` 仅支持返回 `string`\n\n```jsx\nimport { useState } from 'react';\nimport { Cascader } from '@ss/mtd-react';\n\nconst options = [\n  {\n    value: 'zhinan',\n    label: '指南',\n    children: [\n      {\n        value: 'shejiyuanze',\n        label: '设计原则',\n        disabled: true,\n        children: [\n          {\n            value: 'yizhi',\n            label: '一致',\n          },\n          {\n            value: 'fankui',\n            label: '反馈',\n          },\n          {\n            value: 'xiaolv',\n            label: '效率',\n          },\n          {\n            value: 'kekong',\n            label: '可控',\n          },\n        ],\n      },\n      {\n        value: 'daohang',\n        label: '导航',\n        children: [\n          {\n            value: 'cexiangdaohang',\n            label: '侧向导航',\n          },\n          {\n            value: 'dingbudaohang',\n            label: '顶部导航',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'zujian',\n    label: '组件',\n    children: [\n      {\n        value: 'basic',\n        label: 'Basic',\n        children: [\n          {\n            value: 'layout',\n            label: 'Layout 布局',\n          },\n          {\n            value: 'color',\n            label: 'Color 色彩',\n          },\n          {\n            value: 'typography',\n            label: 'Typography 字体',\n          },\n          {\n            value: 'icon',\n            label: 'Icon 图标',\n          },\n          {\n            value: 'button',\n            label: 'Button 按钮',\n          },\n        ],\n      },\n      {\n        value: 'data',\n        label: 'Data',\n        children: [\n          {\n            value: 'table',\n            label: 'Table 表格',\n          },\n          {\n            value: 'tag',\n            label: 'Tag 标签',\n          },\n          {\n            value: 'progress',\n            label: 'Progress 进度条',\n          },\n          {\n            value: 'tree',\n            label: 'Tree 树形控件',\n          },\n          {\n            value: 'pagination',\n            label: 'Pagination 分页',\n          },\n          {\n            value: 'badge',\n            label: 'Badge 标记',\n          },\n        ],\n      },\n      {\n        value: 'notice',\n        label: 'Notice',\n        children: [\n          {\n            value: 'alert',\n            label: 'Alert 警告',\n          },\n          {\n            value: 'loading',\n            label: 'Loading 加载',\n          },\n          {\n            value: 'message',\n            label: 'Message 消息提示',\n          },\n          {\n            value: 'message-box',\n            label: 'MessageBox 弹框',\n          },\n          {\n            value: 'notification',\n            label: 'Notification 通知',\n          },\n        ],\n      },\n      {\n        value: 'navigation',\n        label: 'Navigation',\n        children: [\n          {\n            value: 'menu',\n            label: 'NavMenu 导航菜单',\n          },\n          {\n            value: 'tabs',\n            label: 'Tabs 标签页',\n          },\n          {\n            value: 'breadcrumb',\n            label: 'Breadcrumb 面包屑',\n          },\n          {\n            value: 'dropdown',\n            label: 'Dropdown 下拉菜单',\n          },\n          {\n            value: 'steps',\n            label: 'Steps 步骤条',\n          },\n        ],\n      },\n      {\n        value: 'others',\n        label: 'Others',\n        children: [\n          {\n            value: 'dialog',\n            label: 'Dialog 对话框',\n          },\n          {\n            value: 'tooltip',\n            label: 'Tooltip 文字提示',\n          },\n          {\n            value: 'popover',\n            label: 'Popover 弹出框',\n          },\n          {\n            value: 'card',\n            label: 'Card 卡片',\n          },\n          {\n            value: 'carousel',\n            label: 'Carousel 走马灯',\n          },\n          {\n            value: 'collapse',\n            label: 'Collapse 折叠面板',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'ziyuan',\n    label: '资源',\n    children: [\n      {\n        value: 'axure',\n        label: 'Axure Components',\n      },\n      {\n        value: 'sketch',\n        label: 'Sketch Templates',\n      },\n      {\n        value: 'jiaohu',\n        label: '组件交互文档',\n      },\n    ],\n  },\n];\n\nconst Demo = () => {\n  const [value1, setValue1] = useState(['ziyuan', 'jiaohu']);\n  const [value2, setValue2] = useState(['ziyuan', 'jiaohu']);\n\n  const handleChange = (index, value, selectOptons) => {\n    console.log(value, selectOptons);\n    if (index === 1) setValue1(value);\n    else if (index === 2) setValue2(value);\n  };\n\n  const formatter = (labels, selectOptions, value) => {\n    return labels[labels.length - 1];\n  };\n\n  return (\n    <div style={{ textAlign: 'left', display: 'flex', alignItems: 'center', justifyContent: 'space-around' }}>\n      <div>\n        <p>显示路径</p>\n        <Cascader\n          data={options}\n          value={value1}\n          onChange={(val, selectOptons) => handleChange(1, val, selectOptons)}\n          popLayer={{\n            getContainer: () => document.querySelector('.mtd-workspace-content') || document.body,\n          }}\n        />\n      </div>\n      <div>\n        <p>仅显示末级</p>\n        <Cascader\n          data={options}\n          value={value2}\n          formatter={formatter}\n          onChange={(val, selectOptons) => handleChange(2, val, selectOptons)}\n          popLayer={{\n            getContainer: () => document.querySelector('.mtd-workspace-content') || document.body,\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n",
      "---\norder: 7\ntitle: 搜索\n---\n\n异步搜索通过直接修改数据源 `data` 属性来实现，搜索过程中将 `loading` 属性设置成 `true`，同时由于 `value` 的值不一定在数据源中，所以需要配合 `formatter` 属性来自定义输入框的展示值\n\n```jsx\nimport { useState } from 'react';\nimport { Cascader } from '@ss/mtd-react';\n\nconst options1 = [\n  {\n    value: 'zhinan',\n    label: '指南',\n    children: [\n      {\n        value: 'shejiyuanze',\n        disabled: true,\n        label: '设计原则',\n        children: [\n          {\n            value: 'yizhi',\n            label: '一致',\n          },\n          {\n            value: 'fankui',\n            label: '反馈',\n          },\n          {\n            value: 'xiaolv',\n            label: '效率',\n          },\n          {\n            value: 'kekong',\n            label: '可控',\n          },\n        ],\n      },\n      {\n        value: 'daohang',\n        label: '导航',\n        children: [\n          {\n            value: 'cexiangdaohang',\n            label: '侧向导航',\n          },\n          {\n            value: 'dingbudaohang',\n            label: '顶部导航',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'zujian',\n    label: '组件',\n    children: [\n      {\n        value: 'basic',\n        label: 'Basic',\n        children: [\n          {\n            value: 'layout',\n            label: 'Layout 布局',\n          },\n          {\n            value: 'color',\n            label: 'Color 色彩',\n          },\n          {\n            value: 'typography',\n            label: 'Typography 字体',\n          },\n          {\n            value: 'icon',\n            label: 'Icon 图标',\n          },\n          {\n            value: 'button',\n            label: 'Button 按钮',\n          },\n        ],\n      },\n      {\n        value: 'data',\n        label: 'Data',\n        children: [\n          {\n            value: 'table',\n            label: 'Table 表格',\n          },\n          {\n            value: 'tag',\n            label: 'Tag 标签',\n          },\n          {\n            value: 'progress',\n            label: 'Progress 进度条',\n          },\n          {\n            value: 'tree',\n            label: 'Tree 树形控件',\n          },\n          {\n            value: 'pagination',\n            label: 'Pagination 分页',\n          },\n          {\n            value: 'badge',\n            label: 'Badge 标记',\n          },\n        ],\n      },\n      {\n        value: 'notice',\n        label: 'Notice',\n        children: [\n          {\n            value: 'alert',\n            label: 'Alert 警告',\n          },\n          {\n            value: 'loading',\n            label: 'Loading 加载',\n          },\n          {\n            value: 'message',\n            label: 'Message 消息提示',\n          },\n          {\n            value: 'message-box',\n            label: 'MessageBox 弹框',\n          },\n          {\n            value: 'notification',\n            label: 'Notification 通知',\n          },\n        ],\n      },\n      {\n        value: 'navigation',\n        label: 'Navigation',\n        children: [\n          {\n            value: 'menu',\n            label: 'NavMenu 导航菜单',\n          },\n          {\n            value: 'tabs',\n            label: 'Tabs 标签页',\n          },\n          {\n            value: 'breadcrumb',\n            label: 'Breadcrumb 面包屑',\n          },\n          {\n            value: 'dropdown',\n            label: 'Dropdown 下拉菜单',\n          },\n          {\n            value: 'steps',\n            label: 'Steps 步骤条',\n          },\n        ],\n      },\n      {\n        value: 'others',\n        label: 'Others',\n        children: [\n          {\n            value: 'dialog',\n            label: 'Dialog 对话框',\n          },\n          {\n            value: 'tooltip',\n            label: 'Tooltip 文字提示',\n          },\n          {\n            value: 'popover',\n            label: 'Popover 弹出框',\n          },\n          {\n            value: 'card',\n            label: 'Card 卡片',\n          },\n          {\n            value: 'carousel',\n            label: 'Carousel 走马灯',\n          },\n          {\n            value: 'collapse',\n            label: 'Collapse 折叠面板',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'ziyuan',\n    label: '资源',\n    children: [\n      {\n        value: 'axure',\n        label: 'Axure Components',\n      },\n      {\n        value: 'sketch',\n        label: 'Sketch Templates',\n      },\n      {\n        value: 'jiaohu',\n        label: '组件交互文档列表类型组件之DOC文档demo生成组件',\n      },\n    ],\n  },\n];\n\n\nconst Demo = () => {\n  const [value1, setValue1] = useState(['ziyuan', 'jiaohu']);\n  const [value2, setValue2] = useState([]);\n  const [searching, setSearching] = useState(false);\n  const [options2, setOptions2] = useState(options1);\n\n  const handleChange = (index, value, selectOptons) => {\n    console.log(value, selectOptons);\n    if (index === 1) setValue1(value);\n    else if (index === 2) setValue2(value);\n  };\n  \n  const formatter = (labels, selectedOptions, value) => value.join(' / ');\n    \n  const query = (query) => {\n    setSearching(true);\n    setTimeout(() => {\n      if (!query) {\n        setOptions2(options1);\n      } else {\n        setSearching(false);\n        setOptions2([\n            {\n              value: query,\n              label: query,\n              children: [\n                {\n                  value: `${query}-children`,\n                  label: `${query}-children`,\n                },\n              ],\n            },\n            {\n              value: `${query}-1`,\n              label: `${query}-1`,\n              children: [\n                {\n                  value: `${query}-1-children`,\n                  label: `${query}-1-children`,\n                },\n              ],\n            },\n          ]);\n      }\n    }, 2000);\n  };\n\n  return (\n    <div style={{ textAlign: 'left', display: 'flex', alignItems: 'center', justifyContent: 'space-around' }}>\n      <div>\n        <p>本地搜索</p>\n        <Cascader\n          data={options1}\n          value={value1}\n          filterable\n          onChange={(val, selectOptons) => handleChange(1, val, selectOptons)}\n          isKeywordHighlight\n          popLayer={{\n            getContainer: () => document.querySelector('.mtd-workspace-content') || document.body,\n          }}\n        />\n      </div>\n      <div>\n        <p>异步搜索</p>\n        <Cascader\n          data={options2}\n          value={value2}\n          filterable\n          remote\n          loading={searching}\n          formatter={formatter}\n          remoteMethod={query}\n          onChange={(val, selectOptons) => handleChange(2, val, selectOptons)}\n          popLayer={{\n            getContainer: () => document.querySelector('.mtd-workspace-content') || document.body,\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n",
      "---\norder: 8\ntitle: 多选\n---\n\n```jsx\nimport { useState } from 'react';\nimport { Cascader } from '@ss/mtd-react';\n\nconst options = [\n  {\n    value: 'zhinan',\n    label: '指南',\n    children: [\n      {\n        value: 'shejiyuanze',\n        label: '设计原则',\n        disabled: true,\n        children: [\n          {\n            value: 'yizhi',\n            label: '一致',\n          },\n          {\n            value: 'fankui',\n            label: '反馈',\n          },\n          {\n            value: 'xiaolv',\n            label: '效率',\n          },\n          {\n            value: 'kekong',\n            label: '可控',\n          },\n        ],\n      },\n      {\n        value: 'daohang',\n        label: '导航',\n        children: [\n          {\n            value: 'cexiangdaohang',\n            label: '侧向导航',\n          },\n          {\n            value: 'dingbudaohang',\n            label: '顶部导航',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'zujian',\n    label: '组件',\n    children: [\n      {\n        value: 'basic',\n        label: 'Basic',\n        disabled: true,\n        children: [\n          {\n            value: 'layout',\n            label: 'Layout 布局',\n          },\n          {\n            value: 'color',\n            label: 'Color 色彩',\n          },\n          {\n            value: 'typography',\n            label: 'Typography 字体',\n          },\n          {\n            value: 'icon',\n            label: 'Icon 图标',\n          },\n          {\n            value: 'button',\n            label: 'Button 按钮',\n          },\n        ],\n      },\n      {\n        value: 'form',\n        label: 'Form',\n        isLeaf: true,\n      },\n      {\n        value: 'data',\n        label: 'Data',\n        children: [\n          {\n            value: 'table',\n            label: 'Table 表格',\n          },\n          {\n            value: 'tag',\n            label: 'Tag 标签',\n          },\n          {\n            value: 'progress',\n            label: 'Progress 进度条',\n          },\n          {\n            value: 'tree',\n            label: 'Tree 树形控件',\n          },\n          {\n            value: 'pagination',\n            label: 'Pagination 分页',\n          },\n          {\n            value: 'badge',\n            label: 'Badge 标记',\n          },\n        ],\n      },\n      {\n        value: 'notice',\n        label: 'Notice',\n        children: [\n          {\n            value: 'alert',\n            label: 'Alert 警告',\n          },\n          {\n            value: 'loading',\n            label: 'Loading 加载',\n          },\n          {\n            value: 'message',\n            label: 'Message 消息提示',\n          },\n          {\n            value: 'message-box',\n            label: 'MessageBox 弹框',\n          },\n          {\n            value: 'notification',\n            label: 'Notification 通知',\n          },\n        ],\n      },\n      {\n        value: 'navigation',\n        label: 'Navigation',\n        children: [\n          {\n            value: 'menu',\n            label: 'NavMenu 导航菜单',\n          },\n          {\n            value: 'tabs',\n            label: 'Tabs 标签页',\n          },\n          {\n            value: 'breadcrumb',\n            label: 'Breadcrumb 面包屑',\n          },\n          {\n            value: 'dropdown',\n            label: 'Dropdown 下拉菜单',\n          },\n          {\n            value: 'steps',\n            label: 'Steps 步骤条',\n          },\n        ],\n      },\n      {\n        value: 'others',\n        label: 'Others',\n        children: [\n          {\n            value: 'dialog',\n            label: 'Dialog 对话框',\n          },\n          {\n            value: 'tooltip',\n            label: 'Tooltip 文字提示',\n          },\n          {\n            value: 'popover',\n            label: 'Popover 弹出框',\n          },\n          {\n            value: 'card',\n            label: 'Card 卡片',\n          },\n          {\n            value: 'carousel',\n            label: 'Carousel 走马灯',\n          },\n          {\n            value: 'collapse',\n            label: 'Collapse 折叠面板',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'ziyuan',\n    label: '资源',\n    children: [\n      {\n        value: 'axure',\n        label: 'Axure Components',\n      },\n      {\n        value: 'sketch',\n        label: 'Sketch Templates',\n      },\n      {\n        value: 'jiaohu',\n        label: '组件交互文档',\n      },\n    ],\n  },\n];\n\nconst Demo = () => {\n  const [value1, setValue1] = useState([['ziyuan'], ['ziyuan', 'jiaohu']]);\n  const [value2, setValue2] = useState([]);\n  const [value3, setValue3] = useState([]);\n  const [value4, setValue4] = useState([]);\n\n  return (\n    <React.Fragment>\n      <ul className=\"custom-cascader-selectStrategy\">\n        <li>\n          <div className=\"custom-cascader-title\">\n            勾选不联动，父级、子级均可选中：选中父级时，展示父级；选中子级时，展示子级\n          </div>\n          <Cascader\n            style={{ width: 300, margin: '0 auto' }}\n            value={value1}\n            onChange={(v, option) => {\n              console.log(v, option);\n              setValue1(v);\n            }}\n            multiple\n            filterable\n            isKeywordHighlight\n            checkStrictly\n            data={options}\n            popLayer={{\n              getContainer: () => document.querySelector('.mtd-workspace-content') || document.body,\n            }}\n          />\n        </li>\n        <li>\n          <div className=\"custom-cascader-title\">勾选联动，当父级选中，输入框中均展示父级/子级</div>\n          <Cascader\n            style={{ width: 300, margin: '0 auto' }}\n            value={value2}\n            onChange={(v, option) => {\n              console.log(v, option);\n              setValue2(v);\n            }}\n            multiple\n            maxTagCount={6}\n            checkStrictly={false}\n            checkedStrategy=\"all\"\n            data={options}\n            popLayer={{\n              getContainer: () => document.querySelector('.mtd-workspace-content') || document.body,\n              maxHeight: 250,\n            }}\n          />\n        </li>\n      </ul>\n      <ul className=\"custom-cascader-selectStrategy\">\n        <li>\n          <div className=\"custom-cascader-title\">勾选联动，当父级选中，输入框中仅展示父级，不展示子级</div>\n          <Cascader\n            style={{ width: 300, margin: '0 auto' }}\n            multiple\n            value={value3}\n            onChange={(v, option) => {\n              console.log(v, option);\n              setValue3(v);\n            }}\n            checkStrictly={false}\n            data={options}\n            popLayer={{\n              getContainer: () => document.querySelector('.mtd-workspace-content') || document.body,\n            }}\n          />\n        </li>\n        <li>\n          <div className=\"custom-cascader-title\">\n            勾选联动，无论选中父级还是子级，输入框中均展示最底层子节点，不展示父节点\n          </div>\n          <Cascader\n            style={{ width: 300, margin: '0 auto' }}\n            multiple\n            value={value4}\n            onChange={(v, option) => {\n              console.log(v, option);\n              setValue4(v);\n            }}\n            checkStrictly={false}\n            checkedStrategy=\"children\"\n            data={options}\n            popLayer={{\n              getContainer: () => document.querySelector('.mtd-workspace-content') || document.body,\n            }}\n          />\n        </li>\n      </ul>\n    </React.Fragment>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n```css\n.custom-cascader-selectStrategy {\n  display: flex;\n}\n\n.custom-cascader-selectStrategy > li {\n  display: block;\n  margin: auto;\n  padding-bottom: 30px;\n  vertical-align: top;\n  width: 300px;\n}\n\n.custom-cascader-title {\n  margin-bottom: 10px;\n}\n\n.custom-cascader-selectStrategy-content {\n  max-width: 300px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.custom-cascader-selectStrategy-list li {\n  display: inline-block;\n  margin-right: 4px;\n}\n```\n",
      "---\norder: 2\ntitle: 可选父节点或子节点\n---\n\n```jsx\nimport { useState } from 'react';\nimport { Cascader } from '@ss/mtd-react';\n\nconst options = [\n  {\n    value: 'zhinan',\n    label: '指南',\n    children: [\n      {\n        value: 'shejiyuanze',\n        label: '设计原则',\n        disabled: true,\n        children: [\n          {\n            value: 'yizhi',\n            label: '一致',\n          },\n          {\n            value: 'fankui',\n            label: '反馈',\n          },\n          {\n            value: 'xiaolv',\n            label: '效率',\n          },\n          {\n            value: 'kekong',\n            label: '可控',\n          },\n        ],\n      },\n      {\n        value: 'daohang',\n        label: '导航',\n        children: [\n          {\n            value: 'cexiangdaohang',\n            label: '侧向导航',\n          },\n          {\n            value: 'dingbudaohang',\n            label: '顶部导航',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'zujian',\n    label: '组件',\n    children: [\n      {\n        value: 'basic',\n        label: 'Basic',\n        children: [\n          {\n            value: 'layout',\n            label: 'Layout 布局',\n          },\n          {\n            value: 'color',\n            label: 'Color 色彩',\n          },\n          {\n            value: 'typography',\n            label: 'Typography 字体',\n          },\n          {\n            value: 'icon',\n            label: 'Icon 图标',\n          },\n          {\n            value: 'button',\n            label: 'Button 按钮',\n          },\n        ],\n      },\n      {\n        value: 'data',\n        label: 'Data',\n        children: [\n          {\n            value: 'table',\n            label: 'Table 表格',\n          },\n          {\n            value: 'tag',\n            label: 'Tag 标签',\n          },\n          {\n            value: 'progress',\n            label: 'Progress 进度条',\n          },\n          {\n            value: 'tree',\n            label: 'Tree 树形控件',\n          },\n          {\n            value: 'pagination',\n            label: 'Pagination 分页',\n          },\n          {\n            value: 'badge',\n            label: 'Badge 标记',\n          },\n        ],\n      },\n      {\n        value: 'notice',\n        label: 'Notice',\n        children: [\n          {\n            value: 'alert',\n            label: 'Alert 警告',\n          },\n          {\n            value: 'loading',\n            label: 'Loading 加载',\n          },\n          {\n            value: 'message',\n            label: 'Message 消息提示',\n          },\n          {\n            value: 'message-box',\n            label: 'MessageBox 弹框',\n          },\n          {\n            value: 'notification',\n            label: 'Notification 通知',\n          },\n        ],\n      },\n      {\n        value: 'navigation',\n        label: 'Navigation',\n        children: [\n          {\n            value: 'menu',\n            label: 'NavMenu 导航菜单',\n          },\n          {\n            value: 'tabs',\n            label: 'Tabs 标签页',\n          },\n          {\n            value: 'breadcrumb',\n            label: 'Breadcrumb 面包屑',\n          },\n          {\n            value: 'dropdown',\n            label: 'Dropdown 下拉菜单',\n          },\n          {\n            value: 'steps',\n            label: 'Steps 步骤条',\n          },\n        ],\n      },\n      {\n        value: 'others',\n        label: 'Others',\n        children: [\n          {\n            value: 'dialog',\n            label: 'Dialog 对话框',\n          },\n          {\n            value: 'tooltip',\n            label: 'Tooltip 文字提示',\n          },\n          {\n            value: 'popover',\n            label: 'Popover 弹出框',\n          },\n          {\n            value: 'card',\n            label: 'Card 卡片',\n          },\n          {\n            value: 'carousel',\n            label: 'Carousel 走马灯',\n          },\n          {\n            value: 'collapse',\n            label: 'Collapse 折叠面板',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'ziyuan',\n    label: '资源',\n    children: [\n      {\n        value: 'axure',\n        label: 'Axure Components',\n      },\n      {\n        value: 'sketch',\n        label: 'Sketch Templates',\n      },\n      {\n        value: 'jiaohu',\n        label: '组件交互文档',\n      },\n    ],\n  },\n];\n\nconst Demo = () => {\n  const [value1, setValue1] = useState(['ziyuan', 'jiaohu']);\n  const [value2, setValue2] = useState(['ziyuan']);\n\n  const handleChange = (index, value, selectOptons) => {\n    console.log(value, selectOptons);\n    if (index === 1) setValue1(value);\n    else if (index === 2) setValue2(value);\n  };\n\n  return (\n    <div style={{ textAlign: 'left', display: 'flex', alignItems: 'center', justifyContent: 'space-around' }}>\n      <div>\n        <p>只能选择末级节点信息</p>\n        <Cascader\n          data={options}\n          value={value1}\n          onChange={(val, selectOptons) => handleChange(1, val, selectOptons)}\n          popLayer={{\n            getContainer: () => document.querySelector('.mtd-workspace-content') || document.body,\n          }}\n        />\n      </div>\n      <div>\n        <p>允许选择父级节点信息</p>\n        <Cascader\n          data={options}\n          value={value2}\n          changeOnSelect\n          onChange={(val, selectOptons) => handleChange(2, val, selectOptons)}\n          popLayer={{\n            getContainer: () => document.querySelector('.mtd-workspace-content') || document.body,\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n",
      "---\norder: 1\ntitle: 基本样式\n---\n\n```jsx\nimport { useState } from 'react';\nimport { Cascader } from '@ss/mtd-react';\n\nconst options = [\n  {\n    value: 'zhinan',\n    label: '指南',\n    children: [\n      {\n        value: 'shejiyuanze',\n        label: '设计原则',\n        disabled: true,\n        children: [\n          {\n            value: 'yizhi',\n            label: '一致',\n          },\n          {\n            value: 'fankui',\n            label: '反馈',\n          },\n          {\n            value: 'xiaolv',\n            label: '效率',\n          },\n          {\n            value: 'kekong',\n            label: '可控',\n          },\n        ],\n      },\n      {\n        value: 'daohang',\n        label: '导航',\n        children: [\n          {\n            value: 'cexiangdaohang',\n            label: '侧向导航',\n          },\n          {\n            value: 'dingbudaohang',\n            label: '顶部导航',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'zujian',\n    label: '组件',\n    children: [\n      {\n        value: 'basic',\n        label: 'Basic',\n        disabled: true,\n        children: [\n          {\n            value: 'layout',\n            label: 'Layout 布局',\n          },\n          {\n            value: 'color',\n            label: 'Color 色彩',\n          },\n          {\n            value: 'typography',\n            label: 'Typography 字体',\n          },\n          {\n            value: 'icon',\n            label: 'Icon 图标',\n          },\n          {\n            value: 'button',\n            label: 'Button 按钮',\n          },\n        ],\n      },\n      {\n        value: 'form',\n        label: 'Form',\n        isLeaf: true,\n      },\n      {\n        value: 'data',\n        label: 'Data',\n        children: [\n          {\n            value: 'table',\n            label: 'Table 表格',\n          },\n          {\n            value: 'tag',\n            label: 'Tag 标签',\n          },\n          {\n            value: 'progress',\n            label: 'Progress 进度条',\n          },\n          {\n            value: 'tree',\n            label: 'Tree 树形控件',\n          },\n          {\n            value: 'pagination',\n            label: 'Pagination 分页',\n          },\n          {\n            value: 'badge',\n            label: 'Badge 标记',\n          },\n        ],\n      },\n      {\n        value: 'notice',\n        label: 'Notice',\n        children: [\n          {\n            value: 'alert',\n            label: 'Alert 警告',\n          },\n          {\n            value: 'loading',\n            label: 'Loading 加载',\n          },\n          {\n            value: 'message',\n            label: 'Message 消息提示',\n          },\n          {\n            value: 'message-box',\n            label: 'MessageBox 弹框',\n          },\n          {\n            value: 'notification',\n            label: 'Notification 通知',\n          },\n        ],\n      },\n      {\n        value: 'navigation',\n        label: 'Navigation',\n        children: [\n          {\n            value: 'menu',\n            label: 'NavMenu 导航菜单',\n          },\n          {\n            value: 'tabs',\n            label: 'Tabs 标签页',\n          },\n          {\n            value: 'breadcrumb',\n            label: 'Breadcrumb 面包屑',\n          },\n          {\n            value: 'dropdown',\n            label: 'Dropdown 下拉菜单',\n          },\n          {\n            value: 'steps',\n            label: 'Steps 步骤条',\n          },\n        ],\n      },\n      {\n        value: 'others',\n        label: 'Others',\n        children: [\n          {\n            value: 'dialog',\n            label: 'Dialog 对话框',\n          },\n          {\n            value: 'tooltip',\n            label: 'Tooltip 文字提示',\n          },\n          {\n            value: 'popover',\n            label: 'Popover 弹出框',\n          },\n          {\n            value: 'card',\n            label: 'Card 卡片',\n          },\n          {\n            value: 'carousel',\n            label: 'Carousel 走马灯',\n          },\n          {\n            value: 'collapse',\n            label: 'Collapse 折叠面板',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'ziyuan',\n    label: '资源',\n    children: [\n      {\n        value: 'axure',\n        label: 'Axure Components',\n      },\n      {\n        value: 'sketch',\n        label: 'Sketch Templates',\n      },\n      {\n        value: 'jiaohu',\n        label: '组件交互文档',\n      },\n    ],\n  },\n];\n\nconst Demo = () => {\n  const [value, setValue] = useState(['ziyuan', 'jiaohu']);\n\n  const handleChange = (val, selectOptons) => {\n    console.log(val, selectOptons);\n    setValue(val);\n  };\n\n  return (\n    <Cascader\n      style={{ width: 300, margin: '0 auto' }}\n      data={options}\n      value={value}\n      onChange={handleChange}\n      popLayer={{\n        className: 'demo',\n        maxHeight: 120,\n      }}\n    />\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n",
      "---\norder: 3\ntitle: 交互方式\n---\n\n当层级、分类较多，选用“悬停展示下级菜单”，快速预览菜单内容。\n\n```jsx\nimport { useState } from 'react';\nimport { Cascader } from '@ss/mtd-react';\n\nconst options = [\n  {\n    value: 'zhinan',\n    label: '指南',\n    children: [\n      {\n        value: 'shejiyuanze',\n        label: '设计原则',\n        disabled: true,\n        children: [\n          {\n            value: 'yizhi',\n            label: '一致',\n          },\n          {\n            value: 'fankui',\n            label: '反馈',\n          },\n          {\n            value: 'xiaolv',\n            label: '效率',\n          },\n          {\n            value: 'kekong',\n            label: '可控',\n          },\n        ],\n      },\n      {\n        value: 'daohang',\n        label: '导航',\n        children: [\n          {\n            value: 'cexiangdaohang',\n            label: '侧向导航',\n          },\n          {\n            value: 'dingbudaohang',\n            label: '顶部导航',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'zujian',\n    label: '组件',\n    children: [\n      {\n        value: 'basic',\n        label: 'Basic',\n        children: [\n          {\n            value: 'layout',\n            label: 'Layout 布局',\n          },\n          {\n            value: 'color',\n            label: 'Color 色彩',\n          },\n          {\n            value: 'typography',\n            label: 'Typography 字体',\n          },\n          {\n            value: 'icon',\n            label: 'Icon 图标',\n          },\n          {\n            value: 'button',\n            label: 'Button 按钮',\n          },\n        ],\n      },\n      {\n        value: 'data',\n        label: 'Data',\n        children: [\n          {\n            value: 'table',\n            label: 'Table 表格',\n          },\n          {\n            value: 'tag',\n            label: 'Tag 标签',\n          },\n          {\n            value: 'progress',\n            label: 'Progress 进度条',\n          },\n          {\n            value: 'tree',\n            label: 'Tree 树形控件',\n          },\n          {\n            value: 'pagination',\n            label: 'Pagination 分页',\n          },\n          {\n            value: 'badge',\n            label: 'Badge 标记',\n          },\n        ],\n      },\n      {\n        value: 'notice',\n        label: 'Notice',\n        children: [\n          {\n            value: 'alert',\n            label: 'Alert 警告',\n          },\n          {\n            value: 'loading',\n            label: 'Loading 加载',\n          },\n          {\n            value: 'message',\n            label: 'Message 消息提示',\n          },\n          {\n            value: 'message-box',\n            label: 'MessageBox 弹框',\n          },\n          {\n            value: 'notification',\n            label: 'Notification 通知',\n          },\n        ],\n      },\n      {\n        value: 'navigation',\n        label: 'Navigation',\n        children: [\n          {\n            value: 'menu',\n            label: 'NavMenu 导航菜单',\n          },\n          {\n            value: 'tabs',\n            label: 'Tabs 标签页',\n          },\n          {\n            value: 'breadcrumb',\n            label: 'Breadcrumb 面包屑',\n          },\n          {\n            value: 'dropdown',\n            label: 'Dropdown 下拉菜单',\n          },\n          {\n            value: 'steps',\n            label: 'Steps 步骤条',\n          },\n        ],\n      },\n      {\n        value: 'others',\n        label: 'Others',\n        children: [\n          {\n            value: 'dialog',\n            label: 'Dialog 对话框',\n          },\n          {\n            value: 'tooltip',\n            label: 'Tooltip 文字提示',\n          },\n          {\n            value: 'popover',\n            label: 'Popover 弹出框',\n          },\n          {\n            value: 'card',\n            label: 'Card 卡片',\n          },\n          {\n            value: 'carousel',\n            label: 'Carousel 走马灯',\n          },\n          {\n            value: 'collapse',\n            label: 'Collapse 折叠面板',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'ziyuan',\n    label: '资源',\n    children: [\n      {\n        value: 'axure',\n        label: 'Axure Components',\n      },\n      {\n        value: 'sketch',\n        label: 'Sketch Templates',\n      },\n      {\n        value: 'jiaohu',\n        label: '组件交互文档',\n      },\n    ],\n  },\n];\n\nconst Demo = () => {\n  const [value1, setValue1] = useState(['ziyuan', 'jiaohu']);\n  const [value2, setValue2] = useState(['ziyuan', 'jiaohu']);\n\n  const handleChange = (index, value, selectOptons) => {\n    console.log(value, selectOptons);\n    if (index === 1) setValue1(value);\n    else if (index === 2) setValue2(value);\n  };\n\n  return (\n    <div style={{ textAlign: 'left', display: 'flex', alignItems: 'center', justifyContent: 'space-around' }}>\n      <div>\n        <p>悬停展开</p>\n        <Cascader\n          data={options}\n          value={value1}\n          expandTrigger={'hover'}\n          onChange={(val, selectOptons) => handleChange(1, val, selectOptons)}\n          popLayer={{\n            getContainer: () => document.querySelector('.mtd-workspace-content') || document.body,\n          }}\n        />\n      </div>\n      <div>\n        <p>点击展开</p>\n        <Cascader\n          data={options}\n          value={value2}\n          onChange={(val, selectOptons) => handleChange(2, val, selectOptons)}\n          popLayer={{\n            getContainer: () => document.querySelector('.mtd-workspace-content') || document.body,\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n",
      "---\norder: 6\ntitle: 动态加载\n---\n\n```jsx\nimport { useState } from 'react';\nimport { Cascader } from '@ss/mtd-react';\n\nconst initOptions = [\n  {\n    value: 'zhejiang',\n    label: 'Zhejiang',\n    isLeaf: false,\n  },\n  {\n    value: 'jiangsu',\n    label: 'Jiangsu',\n    isLeaf: false,\n  },\n];\n\nconst Demo = () => {\n  const [value, setValue] = useState([]);\n  const [options, setOptions] = useState(initOptions);\n\n  const handleChange = (val, selectOptons) => {\n    console.log(val, selectOptons);\n    setValue(val);\n  };\n\n  const loadData = item => {\n    const targetOption = item[item.length - 1];\n    targetOption.loading = true;\n    setTimeout(() => {\n      targetOption.loading = false;\n      targetOption.children = [\n        {\n          label: `${targetOption.label} Dynamic 1`,\n          value: 'dynamic1',\n        },\n        {\n          label: `${targetOption.label} Dynamic 2`,\n          value: 'dynamic2',\n        },\n      ];\n      setOptions([...options]);\n    }, 1000);\n  };\n\n  return (\n    <Cascader\n      style={{ width: 300, margin: '0 auto' }}\n      data={options}\n      loadData={loadData}\n      onChange={handleChange}\n      popLayer={{\n        getContainer: () => document.querySelector('.mtd-workspace-content') || document.body,\n      }}\n    />\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n",
      "---\norder: 9\ntitle: 自定义弹窗footer\n---\n\n通过 renderFooter 方法自定义级联全局 footer。\n\n```jsx\nimport { useState } from 'react';\nimport { Cascader, Button } from '@ss/mtd-react';\n\nconst options = [\n  {\n    value: 'zhinan',\n    label: '指南',\n    children: [\n      {\n        value: 'shejiyuanze',\n        label: '设计原则',\n        disabled: true,\n        children: [\n          {\n            value: 'yizhi',\n            label: '一致',\n          },\n          {\n            value: 'fankui',\n            label: '反馈',\n          },\n          {\n            value: 'xiaolv',\n            label: '效率',\n          },\n          {\n            value: 'kekong',\n            label: '可控',\n          },\n        ],\n      },\n      {\n        value: 'daohang',\n        label: '导航',\n        children: [\n          {\n            value: 'cexiangdaohang',\n            label: '侧向导航',\n          },\n          {\n            value: 'dingbudaohang',\n            label: '顶部导航',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'zujian',\n    label: '组件',\n    children: [\n      {\n        value: 'basic',\n        label: 'Basic',\n        disabled: true,\n        children: [\n          {\n            value: 'layout',\n            label: 'Layout 布局',\n          },\n          {\n            value: 'color',\n            label: 'Color 色彩',\n          },\n          {\n            value: 'typography',\n            label: 'Typography 字体',\n          },\n          {\n            value: 'icon',\n            label: 'Icon 图标',\n          },\n          {\n            value: 'button',\n            label: 'Button 按钮',\n          },\n        ],\n      },\n      {\n        value: 'form',\n        label: 'Form',\n        isLeaf: true,\n      },\n      {\n        value: 'data',\n        label: 'Data',\n        children: [\n          {\n            value: 'table',\n            label: 'Table 表格',\n          },\n          {\n            value: 'tag',\n            label: 'Tag 标签',\n          },\n          {\n            value: 'progress',\n            label: 'Progress 进度条',\n          },\n          {\n            value: 'tree',\n            label: 'Tree 树形控件',\n          },\n          {\n            value: 'pagination',\n            label: 'Pagination 分页',\n          },\n          {\n            value: 'badge',\n            label: 'Badge 标记',\n          },\n        ],\n      },\n      {\n        value: 'notice',\n        label: 'Notice',\n        children: [\n          {\n            value: 'alert',\n            label: 'Alert 警告',\n          },\n          {\n            value: 'loading',\n            label: 'Loading 加载',\n          },\n          {\n            value: 'message',\n            label: 'Message 消息提示',\n          },\n          {\n            value: 'message-box',\n            label: 'MessageBox 弹框',\n          },\n          {\n            value: 'notification',\n            label: 'Notification 通知',\n          },\n        ],\n      },\n      {\n        value: 'navigation',\n        label: 'Navigation',\n        children: [\n          {\n            value: 'menu',\n            label: 'NavMenu 导航菜单',\n          },\n          {\n            value: 'tabs',\n            label: 'Tabs 标签页',\n          },\n          {\n            value: 'breadcrumb',\n            label: 'Breadcrumb 面包屑',\n          },\n          {\n            value: 'dropdown',\n            label: 'Dropdown 下拉菜单',\n          },\n          {\n            value: 'steps',\n            label: 'Steps 步骤条',\n          },\n        ],\n      },\n      {\n        value: 'others',\n        label: 'Others',\n        children: [\n          {\n            value: 'dialog',\n            label: 'Dialog 对话框',\n          },\n          {\n            value: 'tooltip',\n            label: 'Tooltip 文字提示',\n          },\n          {\n            value: 'popover',\n            label: 'Popover 弹出框',\n          },\n          {\n            value: 'card',\n            label: 'Card 卡片',\n          },\n          {\n            value: 'carousel',\n            label: 'Carousel 走马灯',\n          },\n          {\n            value: 'collapse',\n            label: 'Collapse 折叠面板',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'ziyuan',\n    label: '资源',\n    children: [\n      {\n        value: 'axure',\n        label: 'Axure Components',\n      },\n      {\n        value: 'sketch',\n        label: 'Sketch Templates',\n      },\n      {\n        value: 'jiaohu',\n        label: '组件交互文档',\n      },\n    ],\n  },\n  {\n    value: 'zyuan',\n    label: '资源',\n    children: [\n      {\n        value: 'xure',\n        label: 'Axure Components',\n      },\n      {\n        value: 'ketch',\n        label: 'Sketch Templates',\n      },\n      {\n        value: 'jiaohu',\n        label: '组件交互文档',\n      },\n    ],\n  },\n  {\n    value: 'zuan',\n    label: '资源',\n    children: [\n      {\n        value: 'xure',\n        label: 'Axure Components',\n      },\n      {\n        value: 'ketch',\n        label: 'Sketch Templates',\n      },\n      {\n        value: 'jiaohu',\n        label: '组件交互文档',\n      },\n    ],\n  },\n];\n\nconst Demo = () => {\n  const [value1, setValue1] = useState([['ziyuan'], ['ziyuan', 'jiaohu']]);\n  const [value2, setValue2] = useState(['ziyuan', 'jiaohu']);\n  const cascaderMultipleRef = React.createRef();\n  const cascaderSingleRef = React.createRef();\n\n  const handleChange1 = (val, selectOptons) => {\n    console.log(val, selectOptons);\n    setValue1(val);\n  };\n  const handleChange2 = (val, selectOptons) => {\n    console.log(val, selectOptons);\n    setValue2(val);\n  };\n\n  return (\n    <>\n      <h2>多选</h2>\n      <ul className=\"custom-cascader-selectStrategy\">\n        <li>\n          <div className=\"custom-cascader-title\">\n            勾选不联动，父级、子级均可选中：选中父级时，展示父级；选中子级时，展示子级\n          </div>\n          <Cascader\n            ref={cascaderMultipleRef}\n            style={{ width: 300, margin: '0 auto' }}\n            value={value1}\n            onChange={handleChange1}\n            multiple\n            filterable\n            isKeywordHighlight\n            checkStrictly\n            data={options}\n            popLayer={{\n              getContainer: () => document.querySelector('.mtd-workspace-content') || document.body,\n            }}\n            renderFooter={() => {\n              return (\n                <div  className=\"custom-cascader-popover-footer\">\n                  <Button\n                    size=\"small\"\n                    type=\"primary\"\n                    onClick={() => {\n                      cascaderMultipleRef.current.blur();\n                    }}\n                  >\n                    确定\n                  </Button>\n                  <Button\n                    size=\"small\"\n                    onClick={() => {\n                      setValue1([]);\n                      cascaderMultipleRef.current.blur();\n                    }}\n                  >\n                    取消\n                  </Button>\n                </div>\n              );\n            }}\n          />\n        </li>\n      </ul>\n      <h2>单选</h2>\n      <ul className=\"custom-cascader-selectStrategy\">\n        <li>\n          <div className=\"custom-cascader-title\">基本使用</div>\n          <Cascader\n            style={{ width: 300, margin: '0 auto' }}\n            data={options}\n            value={value2}\n            onChange={handleChange2}\n            popLayer={{\n              className: 'demo',\n              maxHeight: 120,\n            }}\n            renderFooter={() => (\n              <p style={{ height: '40px', lineHeight: '40px', margin: 0, paddingLeft: '16px' }}>这里是一段说明文字</p>\n            )}\n          />\n        </li>\n      </ul>\n    </>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n```css\n.custom-cascader-selectStrategy {\n  display: flex;\n}\n\n.custom-cascader-selectStrategy > li {\n  display: block;\n  margin: auto;\n  padding-bottom: 30px;\n  vertical-align: top;\n  width: 300px;\n}\n\n.custom-cascader-title {\n  margin-bottom: 10px;\n}\n\n.custom-cascader-selectStrategy-content {\n  max-width: 300px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.custom-cascader-selectStrategy-list li {\n  display: inline-block;\n  margin-right: 4px;\n}\n\n.custom-cascader-popover-footer{\n  width: 100%;\n}\n.custom-cascader-popover-footer>.mtd-button{\n  float:right;\n  margin-right:10px;\n  margin-top: 5px;\n}\n```\n",
      "---\norder: 4\ntitle: 状态\n---\n\n下拉面板可根据场景配置 disable 状态。\n在数据源中配置 `disabled` 为 `true` 来禁用选项。可以通过 `props` 属性来指定(详见 API)\n\n```jsx\nimport { useState } from 'react';\nimport { Cascader } from '@ss/mtd-react';\n\nconst options = [\n  {\n    value: 'zhinan',\n    label: '指南',\n    children: [\n      {\n        value: 'shejiyuanze',\n        label: '设计原则',\n        disabled: true,\n        children: [\n          {\n            value: 'yizhi',\n            label: '一致',\n          },\n          {\n            value: 'fankui',\n            label: '反馈',\n          },\n          {\n            value: 'xiaolv',\n            label: '效率',\n          },\n          {\n            value: 'kekong',\n            label: '可控',\n          },\n        ],\n      },\n      {\n        value: 'daohang',\n        label: '导航',\n        children: [\n          {\n            value: 'cexiangdaohang',\n            label: '侧向导航',\n          },\n          {\n            value: 'dingbudaohang',\n            label: '顶部导航',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'zujian',\n    label: '组件',\n    children: [\n      {\n        value: 'basic',\n        label: 'Basic',\n        disabled: true,\n        children: [\n          {\n            value: 'layout',\n            label: 'Layout 布局',\n          },\n          {\n            value: 'color',\n            label: 'Color 色彩',\n          },\n          {\n            value: 'typography',\n            label: 'Typography 字体',\n          },\n          {\n            value: 'icon',\n            label: 'Icon 图标',\n          },\n          {\n            value: 'button',\n            label: 'Button 按钮',\n          },\n        ],\n      },\n      {\n        value: 'data',\n        label: 'Data',\n        children: [\n          {\n            value: 'table',\n            label: 'Table 表格',\n          },\n          {\n            value: 'tag',\n            label: 'Tag 标签',\n          },\n          {\n            value: 'progress',\n            label: 'Progress 进度条',\n          },\n          {\n            value: 'tree',\n            label: 'Tree 树形控件',\n          },\n          {\n            value: 'pagination',\n            label: 'Pagination 分页',\n          },\n          {\n            value: 'badge',\n            label: 'Badge 标记',\n          },\n        ],\n      },\n      {\n        value: 'notice',\n        label: 'Notice',\n        children: [\n          {\n            value: 'alert',\n            label: 'Alert 警告',\n          },\n          {\n            value: 'loading',\n            label: 'Loading 加载',\n          },\n          {\n            value: 'message',\n            label: 'Message 消息提示',\n          },\n          {\n            value: 'message-box',\n            label: 'MessageBox 弹框',\n          },\n          {\n            value: 'notification',\n            label: 'Notification 通知',\n          },\n        ],\n      },\n      {\n        value: 'navigation',\n        label: 'Navigation',\n        children: [\n          {\n            value: 'menu',\n            label: 'NavMenu 导航菜单',\n          },\n          {\n            value: 'tabs',\n            label: 'Tabs 标签页',\n          },\n          {\n            value: 'breadcrumb',\n            label: 'Breadcrumb 面包屑',\n          },\n          {\n            value: 'dropdown',\n            label: 'Dropdown 下拉菜单',\n          },\n          {\n            value: 'steps',\n            label: 'Steps 步骤条',\n          },\n        ],\n      },\n      {\n        value: 'others',\n        label: 'Others',\n        children: [\n          {\n            value: 'dialog',\n            label: 'Dialog 对话框',\n          },\n          {\n            value: 'tooltip',\n            label: 'Tooltip 文字提示',\n          },\n          {\n            value: 'popover',\n            label: 'Popover 弹出框',\n          },\n          {\n            value: 'card',\n            label: 'Card 卡片',\n          },\n          {\n            value: 'carousel',\n            label: 'Carousel 走马灯',\n          },\n          {\n            value: 'collapse',\n            label: 'Collapse 折叠面板',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'ziyuan',\n    label: '资源',\n    children: [\n      {\n        value: 'axure',\n        label: 'Axure Components',\n      },\n      {\n        value: 'sketch',\n        label: 'Sketch Templates',\n      },\n      {\n        value: 'jiaohu',\n        label: '组件交互文档',\n      },\n    ],\n  },\n];\n\nconst Demo = () => {\n  const [value, setValue] = useState(['ziyuan', 'jiaohu']);\n\n  const handleChange = (val, selectOptons) => {\n    console.log(val, selectOptons);\n    setValue(val);\n  };\n\n  return (\n    <Cascader\n      style={{ width: 300, margin: '0 auto' }}\n      data={options}\n      value={value}\n      onChange={handleChange}\n      popLayer={{\n        getContainer: () => document.querySelector('.mtd-workspace-content') || document.body,\n      }}\n    />\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/checkbox",
    "content": [
      "---\norder: 5\ntitle: 尺寸\n---\n\n可选值为 small、normal、large 或者不设。\n\n```jsx\nimport { Checkbox } from '@ss/mtd-react';\n\nconst CheckboxDemo = () => {\n  return (\n    <div className=\"checkbox-size-demo\">\n      <Checkbox size=\"small\">选项</Checkbox>\n      <Checkbox size=\"small\" checked>\n        选项\n      </Checkbox>\n      <Checkbox size=\"normal\">选项</Checkbox>\n      <Checkbox size=\"normal\" checked>\n        选项\n      </Checkbox>\n      <Checkbox size=\"large\">选项</Checkbox>\n      <Checkbox size=\"large\" checked>\n        选项\n      </Checkbox>\n    </div>\n  );\n};\n\nReactDOM.render(<CheckboxDemo />, mountNode);\n```\n\n```css\n.checkbox-size-demo .mtd-checkbox {\n  margin-right: 16px;\n}\n```\n",
      "---\norder: 1\ntitle: 基本用法\n---\n\n单独使用可以在选择和不选择两种状态之间切换。\n\n```jsx\nimport { useState } from 'react';\nimport { Checkbox } from '@ss/mtd-react';\n\nconst CheckboxDemo = () => {\n  const [checked, setChecked] = useState(false);\n  const checkedHandle = e => {\n    setChecked(e.target.checked);\n  };\n  return (\n    <Checkbox checked={checked} onChange={checkedHandle}>\n      选项\n    </Checkbox>\n  );\n};\n\nReactDOM.render(<CheckboxDemo />, mountNode);\n```\n",
      "---\norder: 2\ntitle: 状态\n---\n\n可编辑状态、半选状态和禁用状态。\n\n```jsx\nimport { Checkbox } from '@ss/mtd-react';\n\nconst CheckboxDemo = () => {\n  return (\n    <div className=\"checkbox-state-demo\">\n      <Checkbox>选项</Checkbox>\n      <Checkbox checked>选项</Checkbox>\n      <Checkbox indeterminate>选项</Checkbox>\n      <Checkbox disabled>选项</Checkbox>\n      <Checkbox checked disabled>\n        选项\n      </Checkbox>\n      <Checkbox indeterminate disabled>\n        选项\n      </Checkbox>\n    </div>\n  );\n};\n\nReactDOM.render(<CheckboxDemo />, mountNode);\n```\n\n```css\n.checkbox-state-demo .mtd-checkbox {\n  margin-right: 16px;\n}\n```\n",
      "---\norder: 6\ntitle: 自定义样式1\n---\n\ncheckbox 可以通过自定义样式，达到如下效果。\n\n```jsx\nimport { useState } from 'react';\nimport { Checkbox } from '@ss/mtd-react';\n\nconst CheckboxDemo = () => {\n  const [value, setValue] = useState(['A', 'B', 'C']);\n\n  const changeHandle = value => {\n    setValue(value);\n  };\n  \n  return (\n    <div className=\"checkbox-style-demo\">\n      <Checkbox.Group value={value} onChange={changeHandle}>\n        <Checkbox value=\"A\">北京</Checkbox>\n        <Checkbox value=\"B\">上海</Checkbox>\n        <Checkbox value=\"C\">广州</Checkbox>\n        <Checkbox value=\"D\">深圳</Checkbox>\n        <Checkbox value=\"E\">杭州</Checkbox>\n        <Checkbox value=\"F\">厦门</Checkbox>\n        <Checkbox value=\"G\">成都</Checkbox>\n      </Checkbox.Group>\n    </div>\n  );\n};\n\nReactDOM.render(<CheckboxDemo />, mountNode);\n```\n\n```css\n.checkbox-style-demo .mtd-checkbox-input-wrapper {\n  display: none;\n}\n\n.checkbox-style-demo .mtd-checkbox-label {\n  padding-left: 0;\n}\n\n.checkbox-style-demo .mtd-checkbox-group-item {\n  padding: 2px 8px;\n  border-radius: 2px;\n}\n\n.checkbox-style-demo .mtd-checkbox-checked {\n  color: #4e73ff;\n  background-color: #b0d6ff;\n}\n```\n",
      "---\norder: 4\ntitle: 全选\n---\n\nindeterminate 属性用以表示 checkbox 的不确定状态，一般用于实现全选的效果。\n\n```jsx\nimport { useState } from 'react';\nimport { Checkbox } from '@ss/mtd-react';\n\nconst CheckboxGroup = Checkbox.Group;\n\nconst CheckboxDemo = () => {\n  const [value, setValue] = useState(['A', 'B', 'C']);\n\n  const changeHandle = value => {\n    setValue(value);\n  };\n\n  const selectAllHandle = e => {\n    if (e.target.checked) {\n      setValue(['A', 'B', 'C', 'D', 'E']);\n    } else {\n      setValue([]);\n    }\n  };\n\n  return (\n    <div className=\"checkbox-selectall-demo\">\n      <div>\n        <Checkbox\n          checked={value.length == 5}\n          indeterminate={value.length < 5 && value.length > 0}\n          onChange={selectAllHandle}\n        >\n          全选\n        </Checkbox>\n      </div>\n      <CheckboxGroup value={value} onChange={changeHandle}>\n        <Checkbox value=\"A\">复选框 A</Checkbox>\n        <Checkbox value=\"B\">复选框 B</Checkbox>\n        <Checkbox value=\"C\">复选框 C</Checkbox>\n        <Checkbox value=\"D\">复选框 D</Checkbox>\n        <Checkbox value=\"E\">复选框 E</Checkbox>\n      </CheckboxGroup>\n    </div>\n  );\n};\n\nReactDOM.render(<CheckboxDemo />, mountNode);\n```\n\n```css\n.checkbox-selectall-demo > div {\n  margin-bottom: 10px;\n}\n```\n",
      "---\norder: 3\ntitle: 多选框组\n---\n\n适用于多个勾选框绑定到同一个数组的情景。\n\n```jsx\nimport { useState } from 'react';\nimport { Checkbox } from '@ss/mtd-react';\n\nconst CheckboxGroup = Checkbox.Group;\n\nconst CheckboxDemo = () => {\n  const [value, setValue] = useState(['A', 'B', 'E']);\n\n  const changeHandle = value => {\n    setValue(value);\n  };\n\n  return (\n    <CheckboxGroup value={value} onChange={changeHandle}>\n      <Checkbox value=\"A\">复选框 A</Checkbox>\n      <Checkbox value=\"B\">复选框 B</Checkbox>\n      <Checkbox value=\"C\">复选框 C</Checkbox>\n      <Checkbox value=\"D\" disabled>\n        复选框 D\n      </Checkbox>\n      <Checkbox value=\"E\" disabled>\n        复选框 E\n      </Checkbox>\n    </CheckboxGroup>\n  );\n};\n\nReactDOM.render(<CheckboxDemo />, mountNode);\n```\n",
      "---\norder: 7\ntitle: 自定义样式2\n---\n\ncheckbox 也可以通过自定义样式，达到如下效果。\n\n```jsx\nimport { useState } from 'react';\nimport { Checkbox, Icon } from '@ss/mtd-react';\n\nconst CheckboxGroup = Checkbox.Group;\n\nconst CheckboxButton = props => {\n  const handleChange = e => {\n    e.target.checked = !props.checked;\n    props.onChange && props.onChange(e);\n  };\n\n  const className = 'mtd-checkbox-card ' + (props.checked ? 'mtd-checkbox-card-checked' : '');\n\n  return (\n    <div className={className} onClick={handleChange}>\n      <div className=\"mtd-checkbox-card-title\">\n        <Icon type={props.icon} />\n        <span>{props.title}</span>\n      </div>\n      <div className=\"mtd-checkbox-card-desc\">{props.desc}</div>\n    </div>\n  );\n};\n\nconst CheckboxDemo = () => {\n  const [value, setValue] = useState(['beijing']);\n\n  const changeHandle = value => {\n    setValue(value);\n  };\n\n  return (\n    <div className=\"checkbox-custom-demo\">\n      <Checkbox.Group value={value} onChange={changeHandle}>\n        <CheckboxButton value=\"beijing\" title=\"北京\" icon=\"star-o\" desc=\"北京是中国的首都\" />\n        <CheckboxButton value=\"shanghai\" title=\"上海\" icon=\"star-o\" desc=\"上海是中国的东方明珠\" />\n        <CheckboxButton value=\"guangzhou\" title=\"广州\" icon=\"star-o\" desc=\"广州是广州的省会\" />\n      </Checkbox.Group>\n    </div>\n  );\n};\n\nReactDOM.render(<CheckboxDemo />, mountNode);\n```\n\n```css\n.mtd-checkbox-card {\n  display: inline-block;\n  margin-right: 25px;\n  padding: 12px 16px;\n  border: 1px solid rgba(0, 0, 0, 0.13);\n  border-radius: 4px;\n  cursor: pointer;\n  color: rgba(0, 0, 0 0.87);\n  transition: all 0.3s ease-in-out;\n}\n\n.mtd-checkbox-card:not(.mtd-checkbox-card-checked):hover {\n  border-color: transparent;\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.02), 0 4px 6px 6px rgba(0, 0, 0, 0.02), 0 4px 6px 0 rgba(0, 0, 0, 0.04);\n}\n\n.mtd-checkbox-card-checked {\n  border-color: #0a70f5;\n  box-shadow: none;\n}\n\n.mtd-checkbox-card-title {\n  margin-bottom: 4px;\n  text-align: center;\n}\n\n.mtd-checkbox-card-desc {\n  color: rgba(0, 0, 0, 0.24);\n  font-size: 12px;\n  line-height: 20px;\n}\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/transfer",
    "content": [
      "---\norder: 0\ntitle: 有禁用项\n---\n\n有禁用项。\n\n```jsx\nimport { useState } from 'react';\nimport { Transfer, Button } from '@ss/mtd-react';\n\nconst mockData = [\n  '李翔',\n  '李常春',\n  '曾涵',\n  '姚梦芳',\n  '杜家华',\n  '郑雷',\n  '李伟',\n  '朱钰',\n  '吴婷梅',\n  '曹一龙',\n  '李常鑫',\n  '李江逸',\n].map((v, idx) => ({\n  disable: v === '郑雷',\n  key: `item_${idx}`,\n  label: v,\n}));\n\nconst DEFAULT_SELECTED_KEY = ['item_0'];\nconst DEFAULT_TARGET_KEY = ['item_8', 'item_9', 'item_10', 'item_11'];\n\nconst TransferDemo = () => {\n  const [selectedKeys, setSelectedKeys] = useState(DEFAULT_SELECTED_KEY);\n  const [targetKeys, setTargetKeys] = useState(DEFAULT_TARGET_KEY);\n\n  const changeHandle = (targetKeys, direction, moveKeys) => {\n    console.log(targetKeys, direction, moveKeys);\n    setTargetKeys(targetKeys);\n  };\n\n  const selectedHandle = (sourceSelectedKeys, targetSelectedKeys) => {\n    console.log('selectedHandle', sourceSelectedKeys, targetSelectedKeys);\n    setSelectedKeys([...sourceSelectedKeys, ...targetSelectedKeys]);\n  };\n\n  return (\n    <Transfer\n      data={mockData}\n      props={{ key: 'key', label: 'label', disabled: 'disable' }}\n      targetKeys={targetKeys}\n      selectedKeys={selectedKeys}\n      onChange={changeHandle}\n      onSelectedChange={selectedHandle}\n    />\n  );\n};\nReactDOM.render(<TransferDemo />, mountNode);\n```\n\n```css\n\n```\n",
      "---\norder: 0\ntitle: 自定义渲染条目\n---\n\n自定义渲染每一个 Transfer Item，可用于渲染复杂数据，自定义渲染内容。\n\n```jsx\nimport { useState } from 'react';\nimport { Transfer, Button } from '@ss/mtd-react';\n\nconst mockData = [\n  '李翔',\n  '李常春',\n  '曾涵',\n  '姚梦芳',\n  '杜家华',\n  '郑雷',\n  '李伟',\n  '朱钰',\n  '吴婷梅',\n  '曹一龙',\n  '李常鑫',\n  '李江逸',\n].map((v, idx) => ({\n  key: `item_${idx}`,\n  label: v,\n  description: `description of ${v}`,\n}));\n\nconst DEFAULT_SELECTED_KEY = ['item_0'];\nconst DEFAULT_TARGET_KEY = ['item_8', 'item_9', 'item_10', 'item_11'];\n\nconst TransferDemo = () => {\n  const [selectedKeys, setSelectedKeys] = useState(DEFAULT_SELECTED_KEY);\n  const [targetKeys, setTargetKeys] = useState(DEFAULT_TARGET_KEY);\n\n  const changeHandle = (targetKeys, direction, moveKeys) => {\n    console.log(targetKeys, direction, moveKeys);\n    setTargetKeys(targetKeys);\n  };\n\n  const selectedHandle = (sourceSelectedKeys, targetSelectedKeys) => {\n    console.log('selectedHandle', sourceSelectedKeys, targetSelectedKeys);\n    setSelectedKeys([...sourceSelectedKeys, ...targetSelectedKeys]);\n  };\n\n  const renderItem = item => {\n    return <i style={{ display: 'inline' }}>{item.description}</i>;\n  };\n\n  const filterHandle = (filter, option) => {\n    return option.name.indexOf(filter) > -1;\n  };\n\n  return (\n    <Transfer\n      data={mockData}\n      targetKeys={targetKeys}\n      selectedKeys={selectedKeys}\n      render={renderItem}\n      onChange={changeHandle}\n      onSelectedChange={selectedHandle}\n    />\n  );\n};\nReactDOM.render(<TransferDemo />, mountNode);\n```\n\n```css\n\n```\n",
      "---\norder: 0\ntitle: 插槽展示\n---\n\n插槽展示。\n\n```jsx\nimport { useState } from 'react';\nimport { Transfer, Button } from '@ss/mtd-react';\n\nconst mockData = [1, 2, 3, 4, 5, 6, 7, 8].map(v => ({\n  key: `item_${v}`,\n  label: `content_${v}`,\n}));\n\nconst DEFAULT_SELECTED_KEY = ['item_0'];\nconst DEFAULT_TARGET_KEY = ['item_8', 'item_9', 'item_10', 'item_11'];\n\nconst TransferDemo = () => {\n  const [selectedKeys, setSelectedKeys] = useState(DEFAULT_SELECTED_KEY);\n  const [targetKeys, setTargetKeys] = useState(DEFAULT_TARGET_KEY);\n\n  const changeHandle = (targetKeys, direction, moveKeys) => {\n    console.log('changeHandle--', targetKeys, direction, moveKeys);\n    setTargetKeys(targetKeys);\n  };\n\n  const selectedHandle = (sourceSelectedKeys, targetSelectedKeys) => {\n    console.log('selectedHandle--', sourceSelectedKeys, targetSelectedKeys);\n    setSelectedKeys([...sourceSelectedKeys, ...targetSelectedKeys]);\n  };\n\n  const handleFoot = () => console.log('handleFoot--');\n\n  return (\n    <Transfer\n      className=\"transfer-slot\"\n      data={mockData}\n      targetKeys={targetKeys}\n      titles={['source', 'target']}\n      selectedKeys={selectedKeys}\n      operations={['向右', '向左']}\n      leftFooter={\n        <Button onClick={handleFoot} className=\"sort-btn\" size=\"small\">\n          左侧底部按钮\n        </Button>\n      }\n      rightFooter={\n        <Button onClick={handleFoot} className=\"sort-btn\" size=\"small\">\n          右侧底部按钮\n        </Button>\n      }\n      empty={[<p>数据源为空</p>, <p>选中数据为空</p>]}\n      onChange={changeHandle}\n      onSelectedChange={selectedHandle}\n    />\n  );\n};\nReactDOM.render(<TransferDemo />, mountNode);\n```\n\n```css\n.transfer-slot .mtd-transfer-panel-footer {\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  padding-right: 16px;\n}\n```\n",
      "---\norder: 0\ntitle: 自定义数据取值字段\n---\n\n自定义数据取值字段, 支持 key、label、disabled 自定义指定\n\n```jsx\nimport { useState } from 'react';\nimport { Transfer, Button } from '@ss/mtd-react';\n\nconst mockData = [\n  '李翔',\n  '李常春',\n  '曾涵',\n  '姚梦芳',\n  '杜家华',\n  '郑雷',\n  '李伟',\n  '朱钰',\n  '吴婷梅',\n  '曹一龙',\n  '李常鑫',\n  '李江逸',\n].map((v, idx) => ({\n  code: `item_${idx}`,\n  name: v,\n  isShow: idx % 2,\n}));\n\nconst DEFAULT_SELECTED_KEY = ['item_0'];\nconst DEFAULT_TARGET_KEY = ['item_8', 'item_9', 'item_10', 'item_11'];\n\nconst TransferDemo = () => {\n  const [selectedKeys, setSelectedKeys] = useState(DEFAULT_SELECTED_KEY);\n  const [targetKeys, setTargetKeys] = useState(DEFAULT_TARGET_KEY);\n  const [data, setData] = useState(mockData);\n\n  const changeHandle = (targetKeys, direction, moveKeys) => {\n    console.log('targetKeys', targetKeys, 'direction', direction, 'moveKeys', moveKeys);\n    setTargetKeys(targetKeys);\n  };\n\n  const selectedHandle = (sourceSelectedKeys, targetSelectedKeys) => {\n    console.log('selectedHandle', sourceSelectedKeys, 'targetSelectedKeys', targetSelectedKeys);\n    setSelectedKeys([...sourceSelectedKeys, ...targetSelectedKeys]);\n  };\n\n  const filterHandle = (filter, option) => {\n    return option.name.indexOf(filter) > -1;\n  };\n  const toSetData = () => {\n    data.unshift({ \n      code: `item_${data.length}`,\n      name: `push_${data.length}`,\n      isShow: 0})\n    setData([...data])\n  }\n\n  return (\n    <div>\n      <Button onClick={()=>toSetData()}>动态调整data</Button>\n      <Transfer\n      data={data}\n      targetKeys={targetKeys}\n      titles={['source', 'target']}\n      selectedKeys={selectedKeys}\n      filterable={true}\n      filterPlaceholder=\"请输入过滤条件\"\n      filterMethod={filterHandle}\n      props={{\n        key: 'code',\n        label: 'name',\n        disabled: 'isShow',\n      }}\n      onChange={changeHandle}\n      onSelectedChange={selectedHandle}\n    />\n    </div>\n  );\n};\nReactDOM.render(<TransferDemo />, mountNode);\n```\n\n```css\n\n```\n",
      "---\norder: 0\ntitle: 有搜索\n---\n\n带搜索框的穿梭框，可以自定义搜索函数。\n\n```jsx\nimport { useState } from 'react';\nimport { Transfer, Button } from '@ss/mtd-react';\n\nconst mockData = [\n  '李翔',\n  '李常春',\n  '曾涵',\n  '姚梦芳',\n  '杜家华',\n  '郑雷',\n  '李伟',\n  '朱钰',\n  '吴婷梅',\n  '曹一龙',\n  '李常鑫',\n  '李江逸',\n].map((v, idx) => ({\n  key: `item_${idx}`,\n  label: v,\n}));\n\nconst DEFAULT_SELECTED_KEY = ['item_0'];\nconst DEFAULT_TARGET_KEY = ['item_8', 'item_9', 'item_10', 'item_11'];\n\nconst TransferDemo = () => {\n  const [selectedKeys, setSelectedKeys] = useState(DEFAULT_SELECTED_KEY);\n  const [targetKeys, setTargetKeys] = useState(DEFAULT_TARGET_KEY);\n\n  const changeHandle = (targetKeys, direction, moveKeys) => {\n    console.log(targetKeys, direction, moveKeys);\n    setTargetKeys(targetKeys);\n  };\n\n  const selectedHandle = (sourceSelectedKeys, targetSelectedKeys) => {\n    console.log('selectedHandle', sourceSelectedKeys, targetSelectedKeys);\n    setSelectedKeys([...sourceSelectedKeys, ...targetSelectedKeys]);\n  };\n\n  const filterHandle = (filter, option) => {\n    console.log('filter', filter, 'option', option);\n    return option.label.indexOf(filter) > -1;\n  };\n\n  return (\n    <Transfer\n      data={mockData}\n      targetKeys={targetKeys}\n      selectedKeys={selectedKeys}\n      filterable={true}\n      filterPlaceholder=\"请输入过滤条件\"\n      filterMethod={filterHandle}\n      onChange={changeHandle}\n      onSelectedChange={selectedHandle}\n    />\n  );\n};\nReactDOM.render(<TransferDemo />, mountNode);\n```\n\n```css\n\n```\n",
      "---\norder: 0\ntitle: 基本使用\n---\n\n最基本的用法，展示了 data、targetKeys、回调函数 onChange onSelectChange 的用法。\n\n```jsx\nimport { useState } from 'react';\nimport { Transfer, Button } from '@ss/mtd-react';\n\nconst mockData = [\n  '李翔',\n  '李常春',\n  '曾涵',\n  '姚梦芳',\n  '杜家华',\n  '郑雷',\n  '李伟',\n  '朱钰',\n  '吴婷梅',\n  '曹一龙',\n  '李常鑫',\n  '李江逸',\n].map((v, idx) => ({\n  key: `item_${idx}`,\n  label: v,\n}));\n\nconst DEFAULT_SELECTED_KEY = ['item_0'];\nconst DEFAULT_TARGET_KEY = ['item_8', 'item_9', 'item_10', 'item_11'];\n\nconst TransferDemo = () => {\n  const [selectedKeys, setSelectedKeys] = useState(DEFAULT_SELECTED_KEY);\n  const [targetKeys, setTargetKeys] = useState(DEFAULT_TARGET_KEY);\n\n  const changeHandle = (targetKeys, direction, moveKeys) => {\n    console.log('changeHandle--', targetKeys, direction, moveKeys);\n    setTargetKeys(targetKeys);\n  };\n\n  const selectedHandle = (sourceSelectedKeys, targetSelectedKeys) => {\n    console.log('selectedHandle--', sourceSelectedKeys, targetSelectedKeys);\n    setSelectedKeys([...sourceSelectedKeys, ...targetSelectedKeys]);\n  };\n\n  return (\n    <Transfer\n      data={mockData}\n      titles={['source', 'target']}\n      targetKeys={targetKeys}\n      selectedKeys={selectedKeys}\n      onChange={changeHandle}\n      onSelectedChange={selectedHandle}\n    />\n  );\n};\n\nReactDOM.render(<TransferDemo />, mountNode);\n```\n\n```css\n\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/slider",
    "content": [
      "---\norder: 4\ntitle: 离散点\n---\n\n方便快速选择预定值。当step 为 null 时，只能滑动到离散点\n\n```jsx\nimport { Slider } from '@ss/mtd-react';\n\nconst marks = {\n  10: '10°',\n  30: '30°',\n  90: '90°',\n}\nconst marksJsx = {\n  10: '10°',\n  30: '30°',\n  90: <span style={{ color: 'red' }}>90°</span>,\n}\nReactDOM.render(\n  <div>\n    <Slider marks={marks} />\n    <Slider marks={marksJsx} step={null} />\n  </div>,\n  mountNode\n);\n```\n",
      "---\norder: 8\ntitle: 阈值滑块\n---\n\n当滑块位置超过特定数值时，改变颜色进行提示，方便区分区域状态。\n\n```jsx\nimport { Slider } from '@ss/mtd-react';\n\nconst thresholds = {\n  10: '#62C0FF',\n  30: 'rgb(255, 202, 84)',\n  60: 'hsl(24, 100%, 68%)',\n}\nReactDOM.render(<Slider thresholds={thresholds} />,mountNode);\n```\n",
      "---\norder: 6\ntitle: 垂直滑块\n---\n\n滑块可以垂直显示\n\n```jsx\nimport { Slider } from '@ss/mtd-react';\n\nReactDOM.render(\n  <div className=\"slider-demo\">\n    <Slider vertical />\n    <Slider vertical range />\n  </div>,\n  mountNode\n);\n```\n```css\n .slider-demo{\n   height: 200px;\n }\n```",
      "---\norder: 3\ntitle: 步长\n---\n\n步长，取值必须大于 0，并且可被 (max - min) 整除。\n\n```jsx\nimport { Slider, Icon } from '@ss/mtd-react';\n\nReactDOM.render(\n  <div>\n    <Slider step={10} />\n  </div>,\n  mountNode\n);\n```\n",
      "---\norder: 2\ntitle: 大小\n---\n\n支持 small normal\n\n```jsx\nimport { Slider } from '@ss/mtd-react';\n\nReactDOM.render(\n  <div>\n    <Slider />\n    <Slider size=\"small\" />\n  </div>,\n  mountNode\n);\n```\n",
      "---\norder: 2\ntitle: 可禁用\n---\n\n禁用\n\n```jsx\nimport { Slider } from '@ss/mtd-react';\n\nReactDOM.render(<Slider disabled value={30} />, mountNode);\n```\n\n",
      "---\norder: 7\ntitle: 自定义文字提示\n---\n\n自定义文字提示\n\n```jsx\nimport { Slider } from '@ss/mtd-react';\n\nReactDOM.render(\n  <div>\n    <Slider tooltipFormator={(value) => `${value}%`} />\n    <Slider showTooltip={false} />\n  </div>,\n  mountNode\n);\n```\n",
      "---\norder: 0\ntitle: 基本使用\n---\n\n基本使用。\n\n```jsx\nimport { Slider } from '@ss/mtd-react';\nconst handleChange = (v) => {\n  console.log(v);\n}\nconst handleAfterChange = (v) => {\n  console.log('onAfterChange', v)\n}\n\nReactDOM.render(<Slider style={{ width: 300 }} max={200} min={-100} step={4}  onChange={handleChange} onAfterChange={handleAfterChange} />, mountNode);\n```\n\n```css\n.demos-slider .preview {\n  text-align: center!important;\n}\n.demos-slider .mtd-slider:not(.mtd-slider-vertical) {\n  width: 400px;\n  margin-left:  auto;\n  margin-right:  auto;\n  display: inline-block;\n}\n.demos-slider .mtd-slider-vertical {\n  height: 260px;\n  margin-right: 100px;\n}\n```\n",
      "---\norder: 5\ntitle: 范围选择\n---\n\n当所选内容为数值范围（区间）时，支持起止点滑块拖动\n\n```jsx\nimport { useState } from 'react';\nimport { Slider } from '@ss/mtd-react';\n\nconst Demo = () => {\n  const [value, setValue] = useState([10, 50]);\n\n  const handleChange = val => {\n    setValue(val);\n  };\n\n  return <Slider range value={value} onAfterChange={handleChange} />;\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/message",
    "content": [
      "---\norder: 3\ntitle: 更新消息内容\n---\n\n可以通过唯一的 key 或者 update方法 来更新内容。\n\n```jsx\nimport { Button, message, Loading } from '@ss/mtd-react'\n\nfunction openMessage(type) {\n  const key = 'updatable';\n  const messageInstance = message.info({\n    key,\n    message: <Loading loading />,\n  });\n  setTimeout(() => {\n    message.info({\n      message: '我更新了!',\n      key,\n    });\n  }, 1000);\n  setTimeout(() => {\n    messageInstance.update({\n      message: '我又更新了!',\n    });\n  }, 2000);\n}\n\nReactDOM.render(<Button onClick={openMessage}>获取消息提示</Button>, mountNode);\n```\n",
      "---\norder: 2\ntitle: 消失方式\n---\n\n可通过duration控制消息提示时间，如果信息较重要，需用户确认，必须手动关闭才能消失。\n\n\n```jsx\nimport { Button,message } from '@ss/mtd-react'\n\nfunction openNotification1(){\n  message.info({\n      title: '提示',\n      message: '这里是一个不会自动关闭的消失提示',\n      duration:Infinity,\n  });\n}\nfunction openNotification2(){\n  message.info({\n      title: '延迟关闭',\n      message: '这里是一个5s后会关闭的消失提示',\n      duration: 5000\n  });\n}\nfunction openNotification3(){\n  message.info({\n      title: '显示关闭按钮',\n      message: '这里是一个显示关闭按钮的消息提示',\n      closable: true\n  });\n}\n\nReactDOM.render(\n    <div >\n      <Button onClick={openNotification1} style={{marginRight:20}}>不会自动关闭</Button>\n      <Button onClick={openNotification2} style={{marginRight:20}}>延迟关闭</Button>\n      <Button onClick={openNotification3} >显示关闭按钮</Button>\n    </div>,\nmountNode);\n```\n",
      "---\norder: 4\ntitle: 自定义样式\n---\n\n使用 style 和 className 来定义样式。\n\n```jsx\nimport { Button, message } from '@ss/mtd-react'\n\nfunction openMessage(type){\n  message.info({\n    message: '这是一条消息提示',\n    className: 'custom-class',\n    style: { marginTop: '100px' }\n  });\n}\n\nReactDOM.render(<Button onClick={openMessage}>自定义样式</Button>, mountNode);\n```\n",
      "---\norder: 0\ntitle: 基础用法\n---\n\n从顶部出现，3 秒后自动消失。\n\n```jsx\nimport { Button, message } from '@ss/mtd-react'\n\nfunction openMessage(type){\n  message.info({\n    message: '这是一条消息提示'\n  });\n}\n\nReactDOM.render(<Button onClick={openMessage} type='primary'>消息提示</Button>, mountNode);\n```\n",
      "---\norder: 0\ntitle: 类型与用法\n---\n\n```jsx\nimport { Button, message } from '@ss/mtd-react'\n\nfunction openMessage(){\n  message.open({\n    message: '这是一个消息提示，可以自动关闭的消息提示'\n  });\n}\n\nfunction openTypeMessage(type){\n  if(type==\"success\"){\n    message.success({\n        message: '这是一条成功消息反馈'\n    });\n  }\n  if(type==\"warning\"){\n    message.warning({\n        message: '这是一条警告消息反馈'\n    });\n  }\n  if(type==\"info\"){\n    message.info({\n        message: '这是一条消息反馈'\n    });\n  }\n  if(type==\"error\"){\n    message.error({\n        message: '这是一条错误消息反馈'\n    });\n  }\n  if(type==\"loading\"){\n    message.loading({\n        message: '这是一条加载中的消息反馈'\n    });\n  }\n}\n\nReactDOM.render(\n    <div >\n      <Button onClick={openMessage} style={{marginRight:20}}>基础</Button>\n      <Button onClick={()=>openTypeMessage('success')} style={{marginRight:20}}>成功</Button>\n      <Button onClick={()=>openTypeMessage('warning')} style={{marginRight:20}}>警告</Button>\n      <Button onClick={()=>openTypeMessage('info')} style={{marginRight:20}}>信息</Button>\n      <Button onClick={()=>openTypeMessage('error')} style={{marginRight:20}}>失败</Button>\n      <Button onClick={()=>openTypeMessage('loading')}>loading</Button>\n    </div>,\nmountNode);\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/collapse",
    "content": [
      "---\norder: 6\ntitle: 多种子元素嵌套\n---\n\n````jsx\nimport { Collapse,Table,Form,Input,Radio,Checkbox } from \"@ss/mtd-react\";\n\nconst data = [\n  { key: 0, name: '于明', gender: '男', birth: '2018年3月15日', addr: '中国浙江省宁波市江北区市民路988号' },\n  { key: 1, name: '郝洋', gender: '男', birth: '2018年6月1日', addr: '中国广东省佛山市禅城区大高路290号' },\n  { key: 2, name: '金芳', gender: '女', birth: '2018年1月1日', addr: '中国广东省深圳市宝山区示范新村307号' }\n];\n\nconst defaultValue = {\n  company: '美团点评',\n  sex: \"1\"\n}\n\nfunction CollapseDemo() {\n  return (\n    <div className=\"demo-collapse\">\n      <Collapse defaultValue={[\"1\"]}>\n        <Collapse.Item code=\"1\" title=\"人口数据\">\n          <Table rowKey=\"key\" data={data}>\n            <Table.Column dataKey=\"name\" >姓名</Table.Column>\n            <Table.Column dataKey=\"gender\">性别</Table.Column>\n            <Table.Column dataKey=\"birth\">出生年月</Table.Column>\n            <Table.Column dataKey=\"addr\">地址</Table.Column>\n          </Table>\n        </Collapse.Item>\n        <Collapse.Item code=\"2\" title=\"填写申请\"  >\n          <Form defaultFieldsValue={defaultValue} >\n            <Form.Item formItemKey=\"company\" label=\"公司：\">\n              <span toFormItem></span>\n            </Form.Item>\n            <Form.Item formItemKey=\"name\" label=\"姓名：\" >\n              <Input toFormItem placeholder=\"请输入姓名\" />\n            </Form.Item>\n            <Form.Item formItemKey=\"age\" label=\"年龄：\" >\n              <Input toFormItem placeholder=\"请输入年龄\" />\n            </Form.Item>\n            <Form.Item formItemKey=\"sex\" label=\"性别：\">\n              <Radio.Group toFormItem>\n                <Radio value=\"1\">男</Radio>\n                <Radio value=\"2\">女</Radio>\n              </Radio.Group>\n            </Form.Item>\n          </Form>\n        </Collapse.Item>\n      </Collapse>\n    </div>\n  );\n}\nReactDOM.render(<CollapseDemo />, mountNode);\n````\n",
      "---\norder: 4\ntitle: 单选/多选展开\n---\n\n通过设置是否为手风琴样式`accordion`来指定同时展开一个面板或多个面板。\n\n````jsx\nimport { useState } from 'react';\nimport { Collapse } from '@ss/mtd-react';\n\nconst data = [\n  {\n    title: \"春日\",\n    content:\n      <div>\n        一春略无十日晴，处处浮云将雨行。<br />\n        野田春水碧于镜，人影渡傍鸥不惊。<br />\n        桃花嫣然出篱笑，似开未开最有情。<br />\n        茅茨烟暝客衣湿，破梦午鸡啼一声。<br />\n      </div>\n  }, {\n    title: \"夏日山中\",\n    content:\n      <div>\n        懒摇白羽扇，裸体青林中。<br />\n        脱巾挂石壁，露顶洒松风。<br />\n      </div>\n  },\n  {\n    title: \"秋词\",\n    content:\n      <div>\n        自古逢秋悲寂寥，我言秋日胜春朝。<br />\n        晴空一鹤排云上，便引诗情到碧霄。<br />\n      </div>\n  }, {\n    title: \"冬柳\",\n    content:\n      <div>\n        柳汀斜对野人窗，零落衰条傍晓江。<br />\n        正是霜风飘断处，寒鸥惊起一双双。<br />\n      </div>\n  }\n];\n\nconst CollapseDemo = () => {\n  const [singleExpand, setSingleExpand] = useState('');\n  const [multiExpand, setMultiExpand] = useState([]);\n\n  const handleSingleChange = value => {\n    console.log('handleSingleChange');\n    setSingleExpand(value);\n  };\n\n  const handleMultiChange = value => {\n    console.log('handleMultiChange');\n    setMultiExpand(value);\n  };\n\n  return (\n    <div className=\"demo-collapse\">\n      <p>单选展开</p>\n      <Collapse accordion className=\"collapse\" value={singleExpand} onChange={handleSingleChange}>\n        {data.map((item, index) => {\n          return (\n            <Collapse.Item key={index} code={index} title={item.title}>\n              {item.content}\n            </Collapse.Item>\n          );\n        })}\n      </Collapse>\n      <p>多选展开</p>\n      <Collapse className=\"collapse\" value={multiExpand} onChange={handleMultiChange}>\n        {data.map((item, index) => {\n          return (\n            <Collapse.Item key={index} code={index} title={item.title}>\n              {item.content}\n            </Collapse.Item>\n          );\n        })}\n      </Collapse>\n    </div>\n  );\n};\n\nReactDOM.render(<CollapseDemo />, mountNode);\n````\n",
      "---\norder: 1\ntitle: 基本样式-不受控\n---\n\n使用`defaultValue`赋初值，组件内部维护展开状态。\n\n````jsx\nimport { Collapse } from \"@ss/mtd-react\";\n\nfunction CollapseDemo() {\n  return (\n    <div className=\"demo-collapse\">\n      <Collapse defaultValue={[\"1\"]}>\n        <Collapse.Item code=\"1\" title=\"春日\" forbidden>\n          <div>\n            一春略无十日晴，处处浮云将雨行。<br />\n            野田春水碧于镜，人影渡傍鸥不惊。<br />\n            桃花嫣然出篱笑，似开未开最有情。<br />\n            茅茨烟暝客衣湿，破梦午鸡啼一声。<br />\n          </div>\n        </Collapse.Item>\n        <Collapse.Item code=\"2\" title=\"夏日山中\"  >\n          <div>\n            懒摇白羽扇，裸体青林中。<br />\n            脱巾挂石壁，露顶洒松风。<br />\n          </div>\n        </Collapse.Item>\n        <Collapse.Item code=\"3\" title=\"秋词\">\n          <div>\n            自古逢秋悲寂寥，我言秋日胜春朝。<br />\n            晴空一鹤排云上，便引诗情到碧霄。<br />\n          </div>\n        </Collapse.Item>\n        <Collapse.Item code=\"4\" title=\"冬柳\" showArrow={false} >\n          <div>\n            柳汀斜对野人窗，零落衰条傍晓江。<br />\n            正是霜风飘断处，寒鸥惊起一双双。<br />\n          </div>\n        </Collapse.Item>\n      </Collapse>\n    </div>\n  );\n}\nReactDOM.render(<CollapseDemo />, mountNode);\n````\n",
      "---\norder: 5\ntitle: 嵌套\n---\n在折叠面板中可以进行多层次的嵌套\n\n````jsx\nimport { Collapse } from \"@ss/mtd-react\";\n\nconst data = [\n  {\n    title: \"春日\",\n    content:\n      <div>\n        一春略无十日晴，处处浮云将雨行。<br />\n        野田春水碧于镜，人影渡傍鸥不惊。<br />\n        桃花嫣然出篱笑，似开未开最有情。<br />\n        茅茨烟暝客衣湿，破梦午鸡啼一声。<br />\n      </div>\n  }, {\n    title: \"夏日山中\",\n    content:\n      <div>\n        懒摇白羽扇，裸体青林中。<br />\n        脱巾挂石壁，露顶洒松风。<br />\n      </div>\n  },\n  {\n    title: \"秋词\",\n    content:\n      <div>\n        自古逢秋悲寂寥，我言秋日胜春朝。<br />\n        晴空一鹤排云上，便引诗情到碧霄。<br />\n      </div>\n  }, {\n    title: \"冬柳\",\n    content:\n      <div>\n        柳汀斜对野人窗，零落衰条傍晓江。<br />\n        正是霜风飘断处，寒鸥惊起一双双。<br />\n      </div>\n  }\n];\n\nfunction CollapseDemo() {\n  return (\n    <div className=\"demo-collapse\">\n      <Collapse >\n        <Collapse.Item code=\"1\" title=\"春日\">\n          <Collapse type=\"simple\" >\n            {data.map((item, index) => {\n              return (\n                <Collapse.Item key={index} code={index} title={item.title} >\n                  {item.content}\n                </Collapse.Item>\n              )\n            })}\n          </Collapse>\n        </Collapse.Item>\n        {data.slice(1).map((item, index) => {\n          return (\n            <Collapse.Item key={index} code={index} title={item.title} >\n              {item.content}\n            </Collapse.Item>\n          )\n        })}\n      </Collapse>\n    </div>\n  );\n}\nReactDOM.render(<CollapseDemo />, mountNode);\n````\n",
      "---\norder: 3\ntitle: 类型\n---\n折叠面板提供三种`type`类型，分别为简洁型`simple`,下拉型`normal`, 面型`tile`。\n````jsx\nimport { Collapse } from \"@ss/mtd-react\";\n\nconst data = [\n  {\n    title: \"春日\",\n    content:\n      <div>\n        一春略无十日晴，处处浮云将雨行。<br />\n        野田春水碧于镜，人影渡傍鸥不惊。<br />\n        桃花嫣然出篱笑，似开未开最有情。<br />\n        茅茨烟暝客衣湿，破梦午鸡啼一声。<br />\n      </div>\n  }, {\n    title: \"夏日山中\",\n    content:\n      <div>\n        懒摇白羽扇，裸体青林中。<br />\n        脱巾挂石壁，露顶洒松风。<br />\n      </div>\n  },\n  {\n    title: \"秋词\",\n    content:\n      <div>\n        自古逢秋悲寂寥，我言秋日胜春朝。<br />\n        晴空一鹤排云上，便引诗情到碧霄。<br />\n      </div>\n  }, {\n    title: \"冬柳\",\n    content:\n      <div>\n        柳汀斜对野人窗，零落衰条傍晓江。<br />\n        正是霜风飘断处，寒鸥惊起一双双。<br />\n      </div>\n  }\n];\n\nfunction CollapseDemo() {\n  return (\n    <div className=\"demo-collapse\">\n      {[\"simple\", \"normal\", \"tile\"].map((type, index) => {\n        return (\n          <Collapse key={index} type={type} defaultValue={[\"1\"]} className=\"collapse\">\n            {data.map((item, index) => {\n              return (\n                <Collapse.Item key={index} code={index} title={item.title} >\n                  {item.content}\n                </Collapse.Item>\n              )\n            })}\n          </Collapse>\n        )\n      })}\n    </div>\n  );\n}\nReactDOM.render(<CollapseDemo />, mountNode);\n````\n\n```css\n.demo-collapse .collapse{\n    margin:20px 0; \n}\n```",
      "---\norder: 2\ntitle: 基本样式-受控\n---\n\n使用`value`维护展开值，组件内部不维护展开状态，需用户通过`onChange`方法维护。\n\n````jsx\nimport { useState } from 'react';\nimport { Collapse } from '@ss/mtd-react';\n\nconst CollapseDemo = () => {\n  const [singleExpand, setSingleExpand] = useState('');\n\n  const handleChange = value => {\n    console.log('handleChange', value);\n    setSingleExpand(value);\n  };\n\n  return (\n    <div className=\"demo-collapse\">\n      <Collapse value={singleExpand} onChange={handleChange}>\n        <Collapse.Item code=\"1\" title=\"春日\">\n          <div>\n            一春略无十日晴，处处浮云将雨行。\n            <br />\n            野田春水碧于镜，人影渡傍鸥不惊。\n            <br />\n            桃花嫣然出篱笑，似开未开最有情。\n            <br />\n            茅茨烟暝客衣湿，破梦午鸡啼一声。\n            <br />\n          </div>\n        </Collapse.Item>\n        <Collapse.Item code=\"2\" title=\"夏日山中\">\n          <div>\n            懒摇白羽扇，裸体青林中。\n            <br />\n            脱巾挂石壁，露顶洒松风。\n            <br />\n          </div>\n        </Collapse.Item>\n        <Collapse.Item code=\"3\" title=\"秋词\">\n          <div>\n            自古逢秋悲寂寥，我言秋日胜春朝。\n            <br />\n            晴空一鹤排云上，便引诗情到碧霄。\n            <br />\n          </div>\n        </Collapse.Item>\n        <Collapse.Item code=\"4\" title=\"冬柳\" showArrow={false}>\n          <div>\n            柳汀斜对野人窗，零落衰条傍晓江。\n            <br />\n            正是霜风飘断处，寒鸥惊起一双双。\n            <br />\n          </div>\n        </Collapse.Item>\n      </Collapse>\n    </div>\n  );\n};\n\nReactDOM.render(<CollapseDemo />, mountNode);\n````\n"
    ]
  },
  {
    "url": "/mtd/react/components/carousel",
    "content": [
      "---\norder: 5\ntitle: arrow参数控制箭头出现时机\n---\n\n基本使用，通过 配置props.\n\n```jsx\nimport { Carousel } from '@ss/mtd-react';\n\nconst Style = {\n    height: '240px',\n    lineHeight: '240px',\n    textAlign: 'center',\n    color: 'white',\n    backgroundColor: '#5D6EAC',\n    fontSize: '30px',\n    fontWeight: '900',\n  }\n\nconst CarouselDemo = ()=> {\n  return (\n    <Carousel style={{width: '100%'}} arrow=\"always\" arrow={'hover'}\n    autoplay={false}>\n      <div style={Style}>0</div>\n      <div style={Style}>1</div>\n      <div style={Style}>2</div>\n      <div style={Style}>3</div>\n    </Carousel>\n  );\n}\n\nReactDOM.render(<CarouselDemo />, document.querySelector('#root'))\n```\n",
      "---\norder: 1\ntitle: 基本用法\n---\n\n基本使用，通过 配置props.\n\n```jsx\nimport { useState } from 'react';\nimport { Carousel } from '@ss/mtd-react';\n\nconst h1Style = {\n    height: '240px',\n    lineHeight: '240px',\n    textAlign: 'center',\n    color: 'white',\n    backgroundColor: '#5D6EAC',\n    fontSize: '30px',\n    fontWeight: '900',\n  }\n\nconst CarouselDemo = ()=> {\n  \n  const change = (prev, now) => {\n    console.log(prev, now);\n  }\n\n  return (\n    <Carousel style={{width: '100%'}} arrow=\"always\" onChange={change}\n    autoplay={true}>\n      <div style={h1Style}>0</div>\n      <div style={h1Style}>1</div>\n      <div style={h1Style}>2</div>\n      <div style={h1Style}>3</div>\n    </Carousel>\n  );\n}\n\nReactDOM.render(<CarouselDemo />, document.querySelector('#root'))\n```\n",
      "---\norder: 3\ntitle: interval控制当前页停留时长\n---\n\n基本使用，通过 配置props.\n\n```jsx\nimport { Carousel } from '@ss/mtd-react';\n\nconst Style = {\n      height: '240px',\n      lineHeight: '240px',\n      textAlign: 'center',\n      color: 'white',\n      backgroundColor: '#5D6EAC',\n      fontSize: '30px',\n      fontWeight: '900',\n    }\n\nconst CarouselDemo = ()=> {\n  return (\n    <Carousel style={{width: '100%'}} arrow=\"always\" interval={2000}\n    autoplay={true}>\n      <div style={Style}>0</div>\n      <div style={Style}>1</div>\n      <div style={Style}>2</div>\n      <div style={Style}>3</div>\n    </Carousel>\n  );\n}\n\nReactDOM.render(<CarouselDemo />, document.querySelector('#root'))\n```\n",
      "---\norder: 4\ntitle: loop参数控制是否可以循环轮播\n---\n\n基本使用，通过 配置props.\n\n```jsx\nimport { Carousel } from '@ss/mtd-react';\n\nconst Style = {\n      height: '240px',\n      lineHeight: '240px',\n      textAlign: 'center',\n      color: 'white',\n      backgroundColor: '#5D6EAC',\n      fontSize: '30px',\n      fontWeight: '900',\n    }\nconst CarouselDemo = ()=> {\n  return (\n    <Carousel style={{width: '100%'}} arrow=\"always\" loop={false}\n    autoplay={false}>\n      <div style={Style}>0</div>\n      <div style={Style}>1</div>\n      <div style={Style}>2</div>\n      <div style={Style}>3</div>\n    </Carousel>\n  );\n}\n\nReactDOM.render(<CarouselDemo />, document.querySelector('#root'))\n```\n",
      "---\norder: 2\ntitle: 其他用法\n---\n\n可设置indicatorPosition为'outside'将指示器放置到外部\n\n```jsx\nimport { Carousel } from '@ss/mtd-react'\nconst h1Style = {\n      height: '240px',\n      lineHeight: '240px',\n      textAlign: 'center',\n      color: 'white',\n      backgroundColor: '#5D6EAC',\n      fontSize: '30px',\n      fontWeight: '900',\n    }\n\nconst CarouselDemo = ()=> {\n  return (\n    <Carousel style={{width: '100%'}} arrow=\"always\" indicatorPosition=\"outside\">\n      <div style={h1Style}>0</div>\n      <div style={h1Style}>1</div>\n      <div style={h1Style}>2</div>\n      <div style={h1Style}>3</div>\n    </Carousel>\n  );\n}\n\nReactDOM.render(<CarouselDemo />, document.querySelector('#root'))\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/popover",
    "content": [
      "---\norder: 4\ntitle: 延迟\n---\n\n延迟显示和隐藏\n\n```jsx\nimport { Popover, Button } from '@ss/mtd-react';\n\nconst text = `每个人的生命都是一只小船，理想是小船的风帆。\n-  张海迪\n`;\nReactDOM.render(\n  <Popover title=\"标题\" content={text} delayShow={1000} delayHide={1000}>\n    <Button>延迟 1s 显示和隐藏</Button>\n  </Popover>,\n  mountNode\n);\n```\n",
      "---\norder: 3\ntitle: 触发\n---\n\n文字提示提供 `hover` `click` `focus` 三种触发方式\n\n```jsx\nimport { Popover, Input, Button } from '@ss/mtd-react';\n\nconst text = `把孩子和他们同龄人隔离，将给他们的心灵带来无法磨灭的创伤。\n-  佚名\n`;\nReactDOM.render(\n  <div>\n    <Popover  title=\"标题\" content={text} trigger=\"hover\">\n      <Button>Hover</Button>\n    </Popover>\n    <Popover  title=\"标题\" content={text} trigger=\"click\">\n      <Button style={{ margin: '20px', display: 'inline-block' }}>Click</Button>\n    </Popover>\n    <Popover  title=\"标题\" content={text} trigger=\"focus\">\n      <Input placeholder=\"请输入内容\" style={{ width: '200px', display: 'inline-block', verticalAlign: 'middle' }} />\n    </Popover>\n  </div>,\n  mountNode\n);\n```\n",
      "---\norder: 2\ntitle: 位置\n---\n\n12 个位置\n\n```jsx\nimport { Popover, Button } from '@ss/mtd-react';\n\nconst text = `艺术的才能独一无二地集中在几个人身上，艺术才能的泉源是广大群众，可是艺术才能在广大群众中被窒息，这全是劳动分工的结果\n-  马克思\n`;\n\nconst ButtonWidth = 60;\n\nReactDOM.render(\n  <div className=\"demo-popover\">\n    <div style={{ marginLeft: ButtonWidth, whiteSpace: 'nowrap' }}>\n      <Popover placement=\"topLeft\" title=\"标题\" content={text}>\n        <Button size=\"small\">上左</Button>\n      </Popover>\n      <Popover placement=\"top\" title=\"标题\" content={text}>\n        <Button size=\"small\">上边</Button>\n      </Popover>\n      <Popover placement=\"topRight\" title=\"标题\" content={text}>\n        <Button size=\"small\">上右</Button>\n      </Popover>\n    </div>\n    <div style={{ width: ButtonWidth, float: 'left' }}>\n      <Popover placement=\"leftTop\" title=\"标题\" content={text}>\n        <Button size=\"small\">左上</Button>\n      </Popover>\n      <Popover placement=\"left\" title=\"标题\" content={text}>\n        <Button size=\"small\">左边</Button>\n      </Popover>\n      <Popover placement=\"leftBottom\" title=\"标题\" content={text}>\n        <Button size=\"small\">左下</Button>\n      </Popover>\n    </div>\n    <div style={{ width: ButtonWidth, marginLeft: ButtonWidth * 4 }}>\n      <Popover placement=\"rightTop\" title=\"标题\" content={text}>\n        <Button size=\"small\">右上</Button>\n      </Popover>\n      <Popover placement=\"right\" title=\"标题\" content={text}>\n        <Button size=\"small\">右边</Button>\n      </Popover>\n      <Popover placement=\"rightBottom\" title=\"标题\" content={text}>\n        <Button size=\"small\">右下</Button>\n      </Popover>\n    </div>\n    <div style={{ marginLeft: ButtonWidth, clear: 'both', whiteSpace: 'nowrap' }}>\n      <Popover placement=\"bottomLeft\" title=\"标题\" content={text}>\n        <Button size=\"small\">下左</Button>\n      </Popover>\n      <Popover placement=\"bottom\" title=\"标题\" content={text}>\n        <Button size=\"small\">下边</Button>\n      </Popover>\n      <Popover placement=\"bottomRight\" title=\"标题\" content={text}>\n        <Button size=\"small\">下右</Button>\n      </Popover>\n    </div>\n  </div>,\n  mountNode\n);\n```\n\n```css\n.demo-popover {\n  width: 240px;\n  margin: auto;\n}\n.demo-popover-btn {\n  width: 100px;\n  height: 50px;\n}\n.demo-popover .mtd-button {\n  margin: 5px;\n}\n```\n",
      "---\norder: 6\ntitle: 自定义样式\n---\n\n可以通过 `className` `style` 自定义弹出层样式\n\n```jsx\nimport { Popover, Button } from '@ss/mtd-react';\n\nconst text = `美是上帝的微笑，音乐是上帝的声  -  苏格拉底`;\n\nReactDOM.render(\n  <div>\n    <Popover\n      title=\"标题\"\n      content={text}\n      className=\"block-popover-custom\"\n      style={{ border: '2px solid #0a70f5' }}\n    >\n      <Button>Hover</Button>\n    </Popover>\n  </div>,\n  mountNode\n);\n```\n\n```css\n.block-popover-custom {\n  width: 150px;\n}\n.block-popover-custom .mtd-popover-inner-title {\n  color: #0a70f5;\n}\n.block-popover-custom .mtd-popover-inner-content {\n  color: #0a70f5;\n}\n\n.block-popover-custom .mtd-popover-arrow {\n  box-shadow: 1px 1px 0px 0px #0a70f5;\n}\n```\n",
      "---\norder: 5\ntitle: 受控\n---\n\n用户自己控制Popover显示隐藏。\n\n```jsx\nimport { useState } from 'react';\nimport { Popover, Button, Switch } from '@ss/mtd-react';\n\nconst Demo = () => {\n  const [visible, setVisible] = useState(false);\n  const [checked, setChecked] = useState(false);\n\n  const handleSwitchChange = e => {\n    setVisible(!visible);\n    setChecked(e.target.checked);\n  };\n\n  return (\n    <div style={{}}>\n      <Switch checkedChildren=\"显示\" unCheckedChildren=\"隐藏\" checked={checked} onChange={handleSwitchChange} ></Switch>\n      <Popover title=\"标题\" content=\"勇士的心胸，能容下大海\" visible={visible}>\n        <Button style={{marginLeft: '20px'}}>受控</Button>\n      </Popover>\n    </div>\n  );\n}\nReactDOM.render(<Demo />, mountNode);\n```\n",
      "---\norder: 1\ntitle: 大小\n---\n\n根据场景预留空间与信息重要程度，弹出框提供 `normal` `small` 两种尺寸\n\n```jsx\nimport { Popover, Button } from '@ss/mtd-react';\n\nReactDOM.render(\n  <div>\n    <Popover title=\"水调歌头\" content=\"明月几时有？把酒问青天。不知天上宫阙，今夕是何年。\" size=\"small\">\n      <Button>Small</Button>\n    </Popover>\n    <Popover title=\"水调歌头\" content=\"明月几时有？把酒问青天。不知天上宫阙，今夕是何年。\">\n      <Button style={{ marginLeft: '20px' }}>默认</Button>\n    </Popover>\n  </div>,\n  mountNode\n);\n```\n",
      "---\norder: 0\ntitle: 基本使用\n---\n\n基本使用。\n\n```jsx\nimport { Popover, Button } from '@ss/mtd-react';\n\nconst Demo = () => {\n  return(\n    <div>\n      <Popover autoDestory title=\"标题\" content=\"巨匠是在严格的规矩中施展他的创造才能的  -  民谚\">\n        <Button>基础使用</Button>\n      </Popover>\n      <Popover title=\"标题\" content=\"十年能学个秀才，十年难学个买卖  -  民谚\" defaultVisible>\n        <Button style={{ marginLeft: '20px' }}>可默认显示</Button>\n      </Popover>\n    </div>\n  );\n}\nReactDOM.render(<Demo />, mountNode);\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/container",
    "content": [
      "---\norder: 1\ntitle: 常见页面布局\n---\n\n```jsx\nimport { Container } from \"@ss/mtd-react\";\nconst { Header, Aside, Main, Footer } = Container;\n\nfunction LayoutDemo(){\n  return (\n    <div>\n      <Container>\n        <Header>Header</Header>\n        <Main>Main</Main>\n      </Container>\n      <br />\n      <Container>\n        <Header>Header</Header>\n        <Main>Main</Main>\n        <Footer>Footer</Footer>\n      </Container>\n      <br />\n      <Container>\n        <Aside width=\"200px\">Aside</Aside>\n        <Main>Main</Main>\n      </Container>\n      <br />\n      <Container>\n        <Header>Header</Header>\n        <Container>\n          <Aside width=\"200px\">Aside</Aside>\n          <Main>Main</Main>\n        </Container>\n      </Container>\n      <br />\n      <Container>\n        <Header>Header</Header>\n        <Container>\n          <Aside width=\"200px\">Aside</Aside>\n          <Container>\n            <Main>Main</Main>\n            <Footer>Footer</Footer>\n          </Container>\n        </Container>\n      </Container>\n      <br />\n      <Container>\n        <Aside width=\"200px\">Aside</Aside>\n        <Container>\n          <Header>Header</Header>\n          <Main>Main</Main>\n        </Container>\n      </Container>\n      <br />\n      <Container>\n        <Aside width=\"200px\">Aside</Aside>\n        <Container>\n          <Header>Header</Header>\n          <Main>Main</Main>\n          <Footer>Footer</Footer>\n        </Container>\n      </Container>\n    </div>\n\n  );\n}\n\nReactDOM.render(<LayoutDemo />, mountNode);\n```\n\n```css\n.mtd-header, .mtd-footer {\n    background-color: #B3C0D1;\n    color: #333;\n    text-align: center;\n    line-height: 60px;\n  }\n\n  .mtd-aside {\n    background-color: #D3DCE6;\n    color: #333;\n    text-align: center;\n    line-height: 200px;\n  }\n\n  .mtd-main {\n    background-color: #E9EEF3;\n    color: #333;\n    text-align: center;\n    line-height: 160px;\n  }\n\n  .mtd-container:nth-child(5) .mtd-aside,\n  .mtd-container:nth-child(6) .mtd-aside {\n    line-height: 260px;\n  }\n\n  .mtd-container:nth-child(7) .mtd-aside {\n    line-height: 320px;\n  }\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/layer",
    "content": [
      "---\norder: 2\ntitle: 弹层用法\n---\n\nPopLayer叫弹层，主要来解决`弹层`与`target元素的关系`，主要通过`getTargetElement`来实现。\n\n```jsx\nimport {useState, useReducer} from 'react';\nimport { PopLayer,Button } from '@ss/mtd-react';\n\nconst pointsMap = {\n  'tl': ['bl','tl'],\n  'top': ['bc','tc'],\n  'tr': ['br','tr'],\n  'lt': ['tr','tl'],\n  'left': ['cr','cl'],\n  'lb': ['br','bl'],\n  'rt': ['tl','tr'],\n  'right': ['cl','cr'],\n  'rb': ['bl','br'],\n  'bl': ['tl','bl'],\n  'bottom': ['tc','bc'],\n  'br': ['tr','br']\n};\nconst offsetMap = {\n  'tl': [0,-5],\n  'top': [0,-5],\n  'tr': [0,-5],\n  'lt': [-5, 0],\n  'left': [-5, 0],\n  'lb': [-5,0],\n  'rt': [5,0],\n  'right': [5,0],\n  'rb': [5,0],\n  'bl': [0, 5],\n  'bottom': [0, 5],\n  'br': [0, 5]\n};\nconst positonReducer = (state, action) => {\n  return {\n    ...state,\n    points: pointsMap[action.type],\n    offset: offsetMap[action.type]\n  };\n}\n\nconst Demo = () => {\n  const [target, setTarget] = useState(null);\n  const [align, dispatch] = useReducer(positonReducer, { points:['tc','tc'] });\n\n  const layerMove = (event, dispatchType) =>{\n    dispatch(dispatchType);\n    setTarget(event.currentTarget)\n  };\n\n  return (\n      <div className=\"poplayer-basic-demo\">\n       <PopLayer\n            getContainer = {()=> document.querySelector('.poplayer-basic-demo')}\n            getTargetElement = {() => target}\n            align = {align}\n            className=\"pop-layer\">\n            <div className=\"pop\">我是一个弹层</div>\n        </PopLayer>\n        <div className=\"buttons-panel\" >\n          <div style={{marginLeft:70,whiteSpace:'nowrap'}}>\n            <Button to=\"tl\" onClick={(event) => layerMove(event, {type: 'tl'})}>TL</Button>\n            <Button to=\"top\" onClick={(event) => layerMove(event, {type: 'top'})}>Top</Button>\n            <Button to=\"tr\" onClick={(event) => layerMove(event, {type: 'tr'})}>TR</Button>\n          </div>\n          <div style={{width:70,float:'left'}}>\n            <Button to=\"lt\" onClick={(event) => layerMove(event, {type: 'lt'})}>LT</Button>\n            <Button to=\"left\" onClick={(event) => layerMove(event, {type: 'left'})}>Left</Button>\n            <Button to=\"lb\" onClick={(event) => layerMove(event, {type: 'lb'})}>LB</Button>\n          </div>\n          <div style={{width:70,marginLeft:304}}>\n            <Button to=\"rt\" onClick={(event) => layerMove(event, {type: 'rt'})}>RT</Button>\n            <Button to=\"right\" onClick={(event) => layerMove(event, {type: 'right'})}>Right</Button>\n            <Button to=\"rb\" onClick={(event) => layerMove(event, {type: 'rb'})}>RB</Button>\n          </div>\n          <div style={{marginLeft:70,whiteSpace:'nowrap',clear:'both'}}>\n            <Button to=\"bl\" onClick={(event) => layerMove(event, {type: 'bl'})}>BL</Button>\n            <Button to=\"bottom\" onClick={(event) => layerMove(event, {type: 'bottom'})}>Bottom</Button>\n            <Button to=\"br\" onClick={(event) => layerMove(event, {type: 'br'})}>BR</Button>\n          </div>\n        </div>\n      </div>\n    );\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n```css\n.pop {\n  display: inline-block;\n  padding: 6px 8px;\n  text-align: left;\n  color: white;\n  background-color: rgba(0, 0, 0, 0.75);\n  border-radius: 4px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n  min-height: 32px;\n  max-width: 300px;\n  line-height: 32px;\n}\n.poplayer-basic-demo{\n  position : relative;\n  padding: 20px;\n}\n.poplayer-basic-demo .buttons-panel{\n  display:inline-block;\n  width:500px;\n  margin-left:200px;\n}\n.poplayer-basic-demo .buttons-panel .mtd-button{\n  width:70px;\n  text-align:center;\n  margin-right: 8px;\n  margin-bottom: 8px;\n}\n\n```",
      "---\norder: 3\ntitle: 自动弹层\n---\n\n当弹层因鼠标滚动、页面缩放等原因被遮挡时,使用参数`align`的`overflow`对象指定弹层溢出的调整操作。\n\n`overflow`对象有两个boolean类型的参数，其中:\n\n`adjustX`为true时表示当弹层在X轴方向不可见时，弹层将沿X轴方向调整位置\n\n`adjustY`为true时表示当弹层在Y轴方向不可见时，弹层将沿Y轴方向调整位置\n\n```jsx\nimport { useState, useCallback, useRef } from 'react';\nimport { PopLayer,Button } from \"@ss/mtd-react\";\n\n\nconst Demo = () => {\n  const popLayerRef = useRef(null)\n  const targetRef = useRef(null)\n  const algin = {\n      points: ['tc', 'bc'],\n      overflow: { adjustY: true },\n      offset:[0,8]\n  };\n\n  const onAlign = (align)=>{\n    console.log(align.points,align.offset);\n  }\n  const handleClick = () => {\n    popLayerRef.current.forceAlign(); \n  }\n  return (\n      <div className=\"poplayer-auto-demo\" style={{height:160}}>\n        <Button className=\"poplayer-auto-demo_button\" ref={targetRef} type=\"primary\" onClick={handleClick}>\n          滚动到页面底部，再点我试试\n        </Button>\n        <PopLayer ref={popLayerRef}\n            align={algin}\n            getContainer = {()=>{\n              let container = document.querySelector('.poplayer-auto-demo').parentNode.parentNode;\n              container.style.position = \"relative\";\n              return container;\n            }}\n            onAlign={onAlign}\n            getTargetElement={()=>document.querySelector('.poplayer-auto-demo_button')}>\n            <div className=\"pop\" style={{height:200,width:212,padding:20}}>\n              我是一个弹层，滚动到页面顶部或底部再打开我看看吧\n            </div>\n          </PopLayer>\n      </div>\n    );\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n```css\n.pop {\n  display: inline-block;\n  padding: 6px 8px;\n  text-align: left;\n  color: white;\n  background-color: rgba(0, 0, 0, 0.75);\n  border-radius: 4px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n  min-height: 32px;\n  max-width: 300px;\n  line-height: 32px;\n}\n```\n",
      "---\norder: 1\ntitle: Layer基础用法\n---\n\n使用`getContainer` 可以将 Layer 挂载到指定的dom节点中。\n\n```jsx\nimport { useState, useRef } from 'react';\nimport { Layer, Button } from '@ss/mtd-react';\n\nconst Demo = () => {\n  const [visible, setVisible] = useState(true);\n  const containerRef = useRef(null);\n  const handleClick = () => {\n    setVisible(!visible);\n  }\n\n  return (\n    <div className=\"layer-demo\">\n      <Button type=\"primary\"  onClick={handleClick}>挂载Layer</Button>\n      <div ref={containerRef} className=\"container\">{!visible?\"要挂载的dom\":\"\"}</div>\n      {visible && <Layer getContainer={()=>containerRef.current} onMounted={() => {console.log('onMounted')}}>\n          <div className=\"pop\">\n              该弹层已挂载至指定的dom节点上\n          </div>\n        </Layer>}\n    </div>\n  );\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n```css\n.pop {\n  display: inline-block;\n  padding: 6px 8px;\n  text-align: left;\n  color: white;\n  background-color: rgba(0, 0, 0, 0.75);\n  border-radius: 4px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n  min-height: 32px;\n  max-width: 300px;\n  line-height: 32px;\n}\n.container{\n    float: right;\n    width: 50%;\n    border: 1px solid #efefef;\n    height:80px;\n    text-align:center;\n    line-height:80px;\n}\n\n```\n",
      "---\norder: 4\ntitle: 弹层配置 \n---\n\nPopLayer 通过align来控制弹层相对于容器的设置\n### align 参数说明\n| 名称 | 类型 | 说明 | 示例 |\n| --- | --- | --- | --- |\n| `points` | String\\[2\\] | 第一个值描述弹层的指定点，第二个值描述弹层容器的指定点。将指定的两点重合得到弹层的位置。 | `points: ['tl', 'bc']` |\n| `offset` | Number\\[2\\] | 第一个值描述弹层在X轴上的偏移量，向右为正值、第二个值描述弹层在Y轴上的偏移量，向下为正值。 | `offset:[0,50]` |\n| `overflow` | Object: { adjustX: true, adjustY: true } | adjustX为true时表示当弹层在X轴方向不可见时，弹层将沿X轴方向调整位置、adjustY为true时表示当弹层在Y轴方向不可见时，弹层将沿Y轴方向调整位置。 | `overflow: { adjustY: true }` |\n| `useCssRight` | Boolean | 是否使用right替代left来描述指定位置，无默认值。 |   |\n| `useCssBottom` | Boolean | 是否使用bottom替代top来描述指定位置，无默认值。 |   |\n| `useCssTransform` | Boolean | 是否使用css转换替代left/top/right/bottom来描述指定位置，无默认值。 |   |\n\n```jsx\nimport {useRef, useEffect, useReducer} from 'react';\nimport { PopLayer, Button, Input, Radio, Form } from \"@ss/mtd-react\";\nconst FormItem = Form.Item;\n\nconst RadioButton = ({onChange = () => {}, checked, children}) => {\n  return (\n    <Button\n      onClick={(e) => {\n        e.target.checked = !checked;\n        onChange(e);\n      }} \n      className={\"checked-\"+checked}>\n      {children}\n    </Button>\n  );\n};\n\nconst Box = ({point,width,height,title,className}) => {\n  const offset = 4;\n  const points = [\n      {pos:'tl',style:{top:-offset,left:-offset}},\n      {pos:'tc',style:{top:-offset,left:width/2-offset}},\n      {pos:'tr',style:{top:-offset,right:-offset}},\n      {pos:'cl',style:{top:height/2-offset,left:-offset}},\n      {pos:'cc',style:{top:height/2-offset,left:width/2-offset}},\n      {pos:'cr',style:{top:(height/2-offset),right:-offset}},\n      {pos:'bl',style:{bottom:-offset,left:-offset}},\n      {pos:'bc',style:{bottom:-offset,left:width/2-offset}},\n      {pos:'br',style:{bottom:-offset,right:-offset}}\n  ];\n  return (\n    <div className={\"pop-layer-box \"+(className||\"\")} style={{width:width,height:height}}>\n        <span>{title}</span>\n        {points.map((_point)=>(\n            <i key={_point.pos}\n                className={`circle circle-${_point.pos} ${_point.pos==point?'choose':''}`} \n                style={_point.style}/>\n        ))}\n    </div>\n  );\n};\n\nconst alignReducer = (state, {itemKey, itemValue}) => {\n  let {points, offset} = state;\n  if(itemKey ==\"point_0\") {\n      points[0] = itemValue;\n  }\n  if(itemKey ==\"point_1\") {\n      points[1] = itemValue;\n  }\n  if(itemKey ==\"offset_0\") {\n      offset[0] = itemValue;\n  }\n  if(itemKey ==\"offset_1\") {\n      offset[1] = itemValue;\n  }\n  return {\n    ...state,\n    points, \n    offset\n  };\n}\n\nconst PopLayerDemo = () => {\n  const formRef = useRef();\n  const [align, dispatch] = useReducer(alignReducer, {points: ['tl','cr'], offset: [20,0]});\n  useEffect(() => {\n    let {points, offset} = align;\n    formRef.current.setFieldsValue({\n        point_0:points[0],\n        point_1:points[1],\n        offset_0:offset[0],\n        offset_1:offset[1],\n        align:`algin = ${JSON.stringify({points: points, offset: offset})}`\n    });\n  });\n  const onFieldValueChange = (itemKey, itemValue) => {\n    dispatch({itemKey, itemValue});\n    formRef.current.setFieldsValue({\n        align:`algin = ${JSON.stringify({points: align.points, offset: align.offset})}`\n    });\n  }\n\n\n  return (\n    <div className=\"pop-layer-demo-align\">\n        <Form ref={formRef} \n            labelWidth=\"9em\" \n            onFieldValueChange={onFieldValueChange}>\n            <FormItem formItemKey=\"point_0\" label=\"弹层的参考位置：\">\n                <Radio.Group toFormItem className=\"pop-layer-radio-goup\">\n                    <RadioButton value=\"tl\">上左</RadioButton>\n                    <RadioButton value=\"tc\">上中</RadioButton>\n                    <RadioButton value=\"tr\">上右</RadioButton>\n                    <RadioButton value=\"cl\">中左</RadioButton>\n                    <RadioButton value=\"cc\">中中</RadioButton>\n                    <RadioButton value=\"cr\">中右</RadioButton>\n                    <RadioButton value=\"bl\">下左</RadioButton>\n                    <RadioButton value=\"bc\">下中</RadioButton>\n                    <RadioButton value=\"br\">下右</RadioButton>\n                </Radio.Group>\n            </FormItem>\n            <FormItem formItemKey=\"point_1\" label=\"容器的参考位置：\">\n                <Radio.Group toFormItem className=\"pop-layer-radio-goup\">\n                    <RadioButton value=\"br\">下右</RadioButton>\n                    <RadioButton value=\"bc\">下中</RadioButton>\n                    <RadioButton value=\"bl\">下左</RadioButton>\n                    <RadioButton value=\"cr\">中右</RadioButton>\n                    <RadioButton value=\"cc\">中中</RadioButton>\n                    <RadioButton value=\"cl\">中左</RadioButton>\n                    <RadioButton value=\"tr\">上右</RadioButton>\n                    <RadioButton value=\"tc\">上中</RadioButton>\n                    <RadioButton value=\"tl\">上左</RadioButton>\n                </Radio.Group>\n            </FormItem>\n            <FormItem formItemKey=\"offset_0\" label=\"弹层X轴偏移量：\">\n                <Radio.Group toFormItem className=\"pop-layer-radio-goup\">\n                    <RadioButton value={20}>右偏20</RadioButton>\n                    <RadioButton value={0}>0</RadioButton>\n                    <RadioButton value={-20}>左偏20</RadioButton>\n                </Radio.Group>\n            </FormItem>\n            <FormItem formItemKey=\"offset_1\" label=\"弹层Y轴偏移量：\">\n                <Radio.Group toFormItem className=\"pop-layer-radio-goup\">\n                    <RadioButton value={20}>下偏20</RadioButton>\n                    <RadioButton value={0}>0</RadioButton>\n                    <RadioButton value={-20}>上偏20</RadioButton>\n                </Radio.Group>\n            </FormItem>\n            <FormItem formItemKey=\"align\" label=\"align的参数：\">\n                <span toFormItem></span>\n            </FormItem>\n        </Form>\n        <div className=\"demo-panel\">\n            <Box title=\"Target 容器\" \n                point={align.points[1]}\n                className =\"target-panel\"\n                width = {240} \n                height = {120}/>\n            <PopLayer\n                align={{points: align.points,offset: align.offset}}\n                getContainer = {()=>document.querySelector('.pop-layer-demo-align')}\n                getTargetElement={()=>document.querySelector('.target-panel')}>\n                <Box title=\"弹层\"\n                    className=\"pop-panel\" \n                    point={align.points[0]} \n                    width = {120} \n                    height = {60}/>\n            </PopLayer>\n        </div>\n    </div>\n  );\n}\n\nReactDOM.render(<PopLayerDemo />, mountNode);\n```\n\n```css\n.pop-layer-demo-align{\n    position:relative;\n}\n.pop-layer-radio-goup .checked-true{\n  color: #4e73ff;\n  border-color: #a7b9ff;\n  background-color: #edf1ff;\n}\n.pop-layer-radio-goup .mtd-button {\n  border: 1px solid #D3D8E4;\n  border-radius: 0;\n}\n.pop-layer-radio-goup .mtd-button:first-child {\n  border-top-left-radius: 2px;\n  border-bottom-left-radius: 2px;\n  }\n.pop-layer-radio-goup .mtd-button:last-child {\n  border-top-right-radius: 2px;\n  border-bottom-right-radius: 2px;\n}\n.pop-layer-radio-goup .mtd-button:not(:first-child) {\n  border-left: none;\n}\n.demo-panel{\n    position:relative;\n    height:200px;\n    text-align: center;\n}\n.pop-layer-box{\n    border:1px solid #6495ED;\n}\n.pop-layer-box .circle{\n  border-radius: 50%;\n  position: absolute;\n  border-radius: 50%;\n  display: inline-block;\n  width: 6px;\n}\n.mtd-form{\n    margin-bottom:40px;\n}\n.pop-layer-box .choose{\n  border: solid 4px #a7b9ff;\n}\n.target-panel{\n    position: relative;\n    display:inline-block;\n    margin: 0 auto;\n    line-height: 120px;\n}\n.pop-panel{\n    position:absolute;\n    line-height: 60px;\n    text-align:center;\n}\n\n\n```"
    ]
  },
  {
    "url": "/mtd/react/components/button",
    "content": [
      "---\norder: 6\ntitle: 带图标的按钮\n---\n\n带图标的按钮可以增强辨识度或节省空间。\n\n````jsx\nimport { Button } from \"@ss/mtd-react\";\n\nfunction ButtonDemo(){\n    return (\n        <div>\n            <div className=\"group\">\n                <Button icon=\"edit-o\"></Button>\n                <Button icon=\"share\" shape='circle'></Button>\n                <Button type=\"primary\" icon=\"search\">搜索</Button>\n                <Button rightIcon=\"location\" >前往</Button>\n            </div>\n        </div>\n    );\n}\n\nReactDOM.render(<ButtonDemo />, mountNode);\n````\n",
      "---\norder: 2\ntitle: 按钮的大小\n---\n\n按钮提供了三种默认尺寸，可以根据不同场景选择使用。\n\n````jsx\nimport { Button } from \"@ss/mtd-react\";\n\nfunction ButtonDemo(){\n    return (\n        <div className=\"group\">\n            <Button type=\"primary\" size=\"small\" >主要按钮</Button>\n            <Button type=\"primary\" size=\"normal\" >主要按钮</Button>\n            <Button type=\"primary\" size=\"large\" >主要按钮</Button>\n        </div>\n    );\n}\n\nReactDOM.render(<ButtonDemo />, mountNode);\n````\n",
      "---\norder: 7\ntitle: hover显示背景\n---\n\n如果设置hoverShape，按钮默认显示状态为文本，hover之后显示背景\n\n````jsx\nimport { Button } from \"@ss/mtd-react\";\n\nfunction ButtonDemo(){\n    return (\n        <div>\n            <div className=\"group\">\n                <Button hoverShape>编辑</Button>\n                <Button type=\"primary\" hoverShape>编辑</Button>\n                <Button type=\"danger\" icon=\"search\" shape=\"rect\" hoverShape>搜索</Button>\n                <Button icon=\"edit-o\" shape=\"circle\"  hoverShape></Button>\n                <Button type=\"primary\" icon=\"edit-o\" shape=\"circle\"  hoverShape></Button>\n                <Button type=\"danger\" icon=\"share\" shape=\"circle\" hoverShape></Button>\n            </div>\n        </div>\n    );\n}\n\nReactDOM.render(<ButtonDemo />, mountNode);\n````\n",
      "---\norder: 8\ntitle: 链接按钮\n---\n\n可通过Button.Link把一个按钮变成一个a标签超链接\n\n````jsx\nimport { Button,Loading } from \"@ss/mtd-react\";\n\nfunction ButtonDemo(){\n    return (\n        <div>\n            <div className=\"group\">\n                <Button.Link\n                    shape=\"text\"\n                    type=\"primary\"\n                    target=\"_blank\"\n                    href='http://ss.sankuai.com/mtd/react/'>链接</Button.Link>\n                <Button.Link\n                    shape=\"text\"\n                    type=\"danger\"\n                    target=\"_blank\"\n                    href='http://ss.sankuai.com/mtd/react/'>链接</Button.Link>\n            </div>\n        </div>\n    );\n}\n\nReactDOM.render(<ButtonDemo />, mountNode);\n````\n```css\n.group{\n    padding: 12px auto;\n}\n.group .mtd-button{\n    margin: 5px;\n}\n.button-loading-demo .mtd-loading-default-indicator{\n    position: absolute;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    top: 0;\n    margin: auto;\n}\n\n```",
      "---\norder: 1\ntitle: 基本用法\n---\n\n按钮的基本用法\n\n````jsx\nimport { Button } from \"@ss/mtd-react\";\n\nfunction ButtonDemo(){\n    return (\n        <div>\n            <div className=\"group\">\n                <Button>默认按钮</Button>\n                <Button type=\"primary\">主要按钮</Button>\n                <Button type=\"success\">成功按钮</Button>\n                <Button type=\"warning\">警告按钮</Button>\n                <Button type=\"danger\">危险按钮</Button>\n            </div>\n            <div className=\"group\">\n                <Button ghost>默认按钮</Button>\n                <Button type=\"primary\" ghost>次要按钮</Button>\n                <Button type=\"success\" ghost>成功按钮</Button>\n                <Button type=\"warning\" ghost>警告按钮</Button>\n                <Button type=\"danger\" ghost>危险按钮</Button>\n            </div>\n            <div className=\"group\">\n                <Button dashed>虚线按钮</Button>\n                <Button type=\"primary\" dashed>虚线按钮</Button>\n                <Button type=\"success\" dashed>成功按钮</Button>\n                <Button type=\"warning\" dashed>警告按钮</Button>\n                <Button type=\"danger\" dashed>危险按钮</Button>\n            </div>\n            <div className=\"group\">\n              <Button shape=\"text\">默认按钮</Button>\n              <Button type=\"primary\" shape=\"text\">主要按钮</Button>\n              <Button type=\"success\" shape=\"text\">成功按钮</Button>\n              <Button type=\"warning\" shape=\"text\">警告按钮</Button>\n              <Button type=\"danger\" shape=\"text\">危险按钮</Button>\n          </div>\n            <div className=\"group\">\n                <Button shape='circle' icon='search'></Button>\n                <Button type=\"primary\" shape='circle' icon='edit-o'></Button>\n                <Button type=\"success\" shape='circle' icon='check-thick'></Button>\n                <Button type=\"warning\" shape='circle' icon='star'></Button>\n                <Button type=\"danger\" shape='circle' icon='delete-o'></Button>\n            </div>\n        </div>\n\n    );\n}\n\nReactDOM.render(<ButtonDemo />, mountNode);\n````",
      "---\norder: 3\ntitle: 类型\n---\n\n根据场景的需要，不同按钮类型可表达操作的重要程度等级。\n\n\n````jsx\nimport { Button } from \"@ss/mtd-react\";\n\nReactDOM.render(\n    <div className=\"group\">\n        <Button type=\"primary\" >基础按钮</Button>\n        <Button type=\"primary\" ghost >次要按钮</Button>\n        <Button type=\"primary\" shape=\"text\" >文字按钮</Button>\n        <Button dashed >虚线按钮</Button>\n    </div>, mountNode);\n````\n",
      "---\norder: 5\ntitle: 按钮状态\n---\n\n禁用状态\n\n\n````jsx\nimport { Button } from \"@ss/mtd-react\";\n\nfunction ButtonDemo(){\n    return (\n        <div>\n          <div className=\"group\">\n              <Button disabled >默认按钮</Button>\n              <Button type=\"primary\" disabled >主要按钮</Button>\n              <Button type=\"success\" disabled >成功按钮</Button>\n              <Button type=\"warning\" disabled >警告按钮</Button>\n              <Button type=\"danger\" disabled >危险按钮</Button>\n          </div>\n          <div className=\"group\">\n              <Button dashed disabled >默认按钮</Button>\n              <Button type=\"primary\" dashed disabled >主要按钮</Button>\n              <Button type=\"success\" dashed disabled >成功按钮</Button>\n              <Button type=\"warning\" dashed disabled >警告按钮</Button>\n              <Button type=\"danger\" dashed disabled >危险按钮</Button>\n          </div>\n          <div className=\"group\">\n              <Button shape=\"text\" disabled>默认按钮</Button>\n              <Button type=\"primary\" shape=\"text\" disabled>主要按钮</Button>\n              <Button type=\"success\" shape=\"text\" disabled>成功按钮</Button>\n              <Button type=\"warning\" shape=\"text\" disabled>警告按钮</Button>\n              <Button type=\"danger\" shape=\"text\" disabled>危险按钮</Button>\n          </div>\n          <div className=\"group\">\n                <Button shape='circle' icon='search' disabled></Button>\n                <Button type=\"primary\" shape='circle' icon='edit-o' disabled></Button>\n                <Button type=\"success\" shape='circle' icon='check-thick' disabled></Button>\n                <Button type=\"warning\" shape='circle' icon='star' disabled></Button>\n            </div>\n        </div>\n\n    );\n}\n\nReactDOM.render(<ButtonDemo />, mountNode);\n````\n",
      "---\norder: 4\ntitle: 状态\n---\n\n以常规按钮为例，按钮状态有正常状态、加载状态、禁用状态。\n\n\n````jsx\nimport { Button } from \"@ss/mtd-react\";\n\nfunction ButtonDemo(){\n    return (\n        <div>\n          <div className=\"group\">\n                <Button type=\"primary\">正常状态</Button>\n                <Button type=\"primary\" loading>加载状态</Button>\n                <Button type=\"primary\" disabled>禁用状态</Button>\n             </div>\n             <div className=\"group\">\n                <Button>正常状态</Button>\n                <Button loading>加载状态</Button>\n                <Button disabled>禁用状态</Button>\n             </div>\n            <div className=\"group\">\n                <Button shape=\"text\">正常状态</Button>\n                <Button shape=\"text\" loading>加载状态</Button>\n                <Button shape=\"text\" disabled>禁用状态</Button>\n            </div>\n        </div>\n    );\n}\n\nReactDOM.render(<ButtonDemo />, mountNode);\n````\n"
    ]
  },
  {
    "url": "/mtd/react/components/pure-form",
    "content": [
      "---\norder: 1\ntitle: 基本用法\n# onlyPreview: true\n---\n\n表单基本用法\n\n```jsx\nimport { PureForm, Input, Button } from '@ss/mtd-react';\n\nclass FormDemo extends React.Component {\n  state = {\n    data: {\n      username: '',\n      password: '',\n    }\n  };\n\n  formRef = React.createRef();\n\n  handleSubmit = () => {\n    if (this.formRef.current.validateFields()) {\n      const { data } = this.state;\n      console.log('form data:', data);\n    }\n  };\n  // 输入\n  handleChangeInput = (e, param) => {\n    const { data } = this.state;\n    this.setState({ data: { ...data, [param]: e.target.value } });\n  };\n  render() {\n    const { data } = this.state;\n    return (\n      <PureForm\n        ref={this.formRef} style={{ width: '600px' }}\n        data={data}\n      >\n        <PureForm.Item span=\"10\" formItemKey=\"username\" style={{ paddingRight: 20 }} required message=\"登录名不能为空\">\n          <Input toFormItem placeholder=\"username\"\n            value={data.username}\n            onChange={(e) => {\n              this.handleChangeInput(e, 'username');\n            }} />\n        </PureForm.Item>\n        <PureForm.Item span=\"10\" style={{ paddingRight: 20 }} formItemKey=\"password\" required message=\"密码不能为空\">\n          <Input toFormItem placeholder=\"password\"\n            value={data.password}\n            onChange={(e) => {\n              this.handleChangeInput(e, 'password');\n            }} />\n        </PureForm.Item>\n        <PureForm.Item span=\"4\">\n          <Button type=\"primary\" onClick={this.handleSubmit}>\n            登录\n          </Button>\n        </PureForm.Item>\n      </PureForm>\n    );\n  }\n}\n\nReactDOM.render(<FormDemo />, mountNode);\n```\n",
      "---\norder: 2\ntitle: 多组件用法\n# onlyPreview: true\n---\n\nForm 子节点只能使用<PureForm.Item>或者<PureForm.Item>数组\n\n```jsx\nimport { PureForm, Input, Button, Checkbox, Switch, InputNumber, Radio } from '@ss/mtd-react';\n// 系统级设置，改变弹窗的默认层级（一个项目只需要设置一次）\n\nclass FormDemo extends React.Component {\n  state = {\n    data: {\n      company: '美团点评',\n      remember: true,\n      sex: '1',\n      job: true,\n    }\n  };\n\n  formRef = React.createRef();\n\n  handleSubmit = () => {\n    if (this.formRef.current.validateFields()) {\n      const { data } = this.state;\n      console.log('form data:', data);\n    }\n  };\n  handleCancel = () => {\n    console.log('operate cancel.');\n  };\n  // 输入\n  handleChangeInput = (e, param) => {\n    const { data } = this.state;\n    this.setState({ data: { ...data, [param]: e.target.value } });\n  };\n  handleChangeInputNumber = (v, param) => {\n    const { data } = this.state;\n    this.setState({ data: { ...data, [param]: v } });\n  };\n  handleChangeSwitch = (e, param) => {\n    const { data } = this.state;\n    this.setState({ data: { ...data, [param]: e.target.checked } });\n  };\n  handleChangeCheckbox = (e, param) => {\n    const { data } = this.state;\n    this.setState({ data: { ...data, [param]: e.target.checked } });\n  };\n  handleChangeRadio = (v, param) => {\n    const { data } = this.state;\n    this.setState({ data: { ...data, [param]: v } });\n  };\n\n  renderItem = () => {\n    const { data } = this.state;\n    return [\n      <PureForm.Item formItemKey=\"name\" label=\"姓名：\" message=\"姓名不能为空\" required>\n        <Input\n          value={data.name}\n          toFormItem\n          onChange={(e) => {\n            this.handleChangeInput(e, 'name');\n          }} placeholder=\"请输入姓名\" />\n      </PureForm.Item>,\n      <PureForm.Item\n        formItemKey=\"age\"\n        label=\"年龄：\"\n        toFormItem\n        rules={[\n          { type: 'number', required: true, message: '年龄不能为空' },\n          { message: '年龄不能小于30', validator: (rules, value) => value > 30 },\n        ]}\n      >\n        <InputNumber\n          toFormItem\n          value={data.age}\n          onChange={(v) => {\n            this.handleChangeInputNumber(v, 'age');\n          }}\n          controls={false}\n          placeholder=\"请输入年龄\"\n          style={{ textAlign: 'left', width: '100%' }}\n        />\n      </PureForm.Item>,\n      <PureForm.Item formItemKey=\"sex\" message=\"性别不能为空\" label=\"性别：\">\n        <Radio.Group value={data.sex}\n          onChange={(v, e) => {\n            this.handleChangeRadio(v, 'sex');\n          }}\n        >\n          <Radio value=\"1\">男</Radio>\n          <Radio value=\"2\">女</Radio>\n        </Radio.Group>\n      </PureForm.Item>,\n    ];\n  };\n  render() {\n    const { data } = this.state;\n    return (\n      <div>\n        <PureForm ref={this.formRef} data={data} className=\"form-basic\">\n          <PureForm.Item formItemKey=\"company\" label=\"公司：\">\n            <span>{data.company}</span>\n          </PureForm.Item>\n          {this.renderItem()}\n          <PureForm.Item formItemKey=\"job\" label=\"已工作：\">\n            <Switch toFormItem checked={data.job} checkedChildren=\"是\" unCheckedChildren=\"否\"\n              onChange={(e) => {\n                this.handleChangeSwitch(e, 'job');\n              }}\n            />\n          </PureForm.Item>\n          <PureForm.Item formItemKey=\"remember\" tirgger=\"onChange\" labelWidth=\"6em\">\n            <Checkbox toFormItem className=\"form-basic-remember\" checked={data.remember}\n              onChange={(e) => {\n                this.handleChangeCheckbox(e, 'remember');\n              }}>\n              remember me\n            </Checkbox>\n            <a className=\"form-basic-help\">help me</a>\n          </PureForm.Item>\n          <PureForm.Item labelWidth=\"6em\">\n            <div className=\"form-basic-operate\">\n              <Button type=\"primary\" onClick={this.handleSubmit}>\n                提交\n              </Button>\n              <Button className=\"btn-cancel\" onClick={this.handleCancel}>\n                取消\n              </Button>\n            </div>\n          </PureForm.Item>\n        </PureForm>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<FormDemo />, mountNode);\n```\n\n```css\n.form-basic {\n  width: 400px;\n}\n/* .form-basic-operate {\n  text-align: center;\n} */\n.btn-cancel {\n  margin-left: 12px;\n}\n.form-basic-remember,\n.form-basic-help {\n  display: inline-block;\n}\n.form-basic-help {\n  float: right;\n}\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/steps",
    "content": [
      "---\norder: 6\ntitle: 带图标的步骤条\n---\n\n步骤条内可以启用各种自定义的图标，通过 icon 属性来设置图标，图标的type类型可以参考 icon 组件的文档。\n\n````jsx\nimport { Steps, Icon } from \"@ss/mtd-react\";\nconst Step = Steps.Step;\n\nReactDOM.render(\n    <Steps size='small' active={1}>\n        <Step title=\"已完成\" icon=\"time-o\" />\n        <Step title=\"进行中\" icon={<Icon type=\"file-o\" />} />\n        <Step title=\"进行中\" icon='file-o' />\n        <Step title=\"未开始\" icon=\"question-circle-o\" />\n    </Steps>,\n    mountNode\n);\n````",
      "---\norder: 3\ntitle: 可控制描述文案位置\n---\n\n\n````jsx\nimport { Steps } from \"@ss/mtd-react\";\nconst Step = Steps.Step;\n\nReactDOM.render(\n    <Steps active={2} status=\"error\" labelPlacement=\"vertical\" size=\"small\">\n        <Step title=\"已完成\" description=\"这是一段描述性文字, 这是一段描述性文字\" />\n        <Step title=\"已完成\" description=\"这是一段描述性文字, 这是一段描述性文字\" />\n        <Step title=\"已驳回\" description=\"这是一段描述性文字, 这是一段描述性文字\" />\n        <Step title=\"未开始\" description=\"这是一段描述性文字, 这是一段描述性文字\" />\n    </Steps>,\n    mountNode\n);\n\n````",
      "---\norder: 5\ntitle: 点状步骤条\n---\n\n该步骤条更多展示任务完成流程，任务状态表达较为隐晦，多适用于步骤数过多展示。\n\n````jsx\nimport { Steps, Icon } from \"@ss/mtd-react\";\nconst Step = Steps.Step;\n\nReactDOM.render(\n    <Steps dot size='small' active={2}>\n        <Step title=\"已完成\" description=\"这是一段描述性文字.\" icon=\"file-o\"/>\n        <Step title=\"已完成\" description=\"这是一段描述性文字.\" />\n        <Step title=\"进行中\" description=\"这是一段描述性文字.\" />\n        <Step title=\"未开始\" description=\"这是一段描述性文字.\" />\n    </Steps>,\n    mountNode\n);\n````",
      "---\norder: 1\ntitle: 大小\n---\n\n````jsx\nimport { Steps } from \"@ss/mtd-react\";\nconst Step = Steps.Step;\n\nReactDOM.render(\n    <div>\n        <Steps active={1}>\n            <Step title=\"已完成\" />\n            <Step title=\"进行中\" />\n            <Step title=\"未开始\" />\n        </Steps>\n        <br />\n        <Steps active={1} size=\"small\">\n            <Step title=\"已完成\" />\n            <Step title=\"进行中\" />\n            <Step title=\"未开始\" />\n        </Steps>\n    </div>,\n    mountNode\n);\n````",
      "---\norder: 7\ntitle: 纵向步骤条\n---\n\n多适用于任务条数较多，状态流程较长，同时描述的信息较多等场景展示。\n\n````jsx\nimport { Steps, Icon } from \"@ss/mtd-react\";\nconst Step = Steps.Step;\n\nReactDOM.render(\n    <div style={{width: 220}}>\n        <Steps direction=\"vertical\" active={2}>\n            <Step title=\"已完成\" description=\"这是一段描述性文字.\" />\n            <Step title=\"已完成\" description=\"这是一段描述性文字.这是一段描述性文字.这是一段描述性文字.这是一段描述性文字...\" />\n            <Step title=\"进行中\" description=\"这是一段描述性文字.\" />\n            <Step title=\"未开始\" description=\"这是一段描述性文字.\" />\n        </Steps>\n        <Steps direction=\"vertical\" active={2} dot>\n            <Step title=\"已完成\" description=\"这是一段描述性文字.\" />\n            <Step title=\"已完成\" description=\"这是一段描述性文字.\" />\n            <Step title=\"进行中\" description=\"这是一段描述性文字.\" />\n            <Step title=\"未开始\" description=\"这是一段描述性文字.\" />\n        </Steps>\n    </div>\n   ,\n    mountNode\n);\n````",
      "---\norder: 2\ntitle: 含状态&描述文案的步骤条\n---\n\n````jsx\nimport { Steps } from \"@ss/mtd-react\";\nconst Step = Steps.Step;\n\nReactDOM.render(\n    <div>\n        <Steps active={1} status=\"error\">\n            <Step title=\"已完成\" description=\"这是一段描述性文字\" />\n            <Step title=\"已驳回\" description=\"这是一段描述性文字\" />\n            <Step title=\"未开始\" description=\"这是一段描述性文字\" />\n        </Steps>\n        <br />\n        <Steps active={1} status=\"cancel\">\n            <Step title=\"已完成\" description=\"这是一段描述性文字\" />\n            <Step title=\"已撤销\" description=\"这是一段描述性文字\" />\n            <Step title=\"未开始\" description=\"这是一段描述性文字\" />\n        </Steps>\n    </div>,\n    mountNode\n);\n\n````",
      "---\norder: 4\ntitle: 自定义步骤条的间距\n---\n\n通过space自定义步骤条的间距。\n\n````jsx\nimport { Steps, Icon } from \"@ss/mtd-react\";\nconst Step = Steps.Step;\n\nReactDOM.render(\n    <Steps active={2} space=\"150px\">\n        <Step title=\"已完成\" />\n        <Step title=\"已完成\" />\n        <Step title=\"进行中\" />\n        <Step title=\"未开始\" />\n    </Steps>,\n    mountNode\n);\n````"
    ]
  },
  {
    "url": "/mtd/react/components/date-picker",
    "content": [
      "---\norder: 3\ntitle: 日期格式\n---\n\n使用 format 自定义日期展示格式，使用 valueFormat 自定义 onChange 事件返回值的格式。</br>\nRangePicker 也可设置 separator 自定义分隔符，启用 rangeMaxDateable 则返回值中时间段后区间默认为当天最大值。\n\n```jsx\nimport { useState } from 'react';\nimport { DatePicker, RangePicker } from '@ss/mtd-react';\n\nconst DatePickerDemo = () => {\n  const [value1, setValue1] = useState(new Date());\n  const [value2, setValue2] = useState('2018-10-05');\n  const [value3, setValue3] = useState(Date.now());\n  const [value4, setValue4] = useState(['2021-11-04', '2021-11-05']);\n  const [value5, setValue5] = useState(['2021-11-04 00:00:00', '2021-11-05 23:59:59']);\n\n  const onChange1 = value => {\n    setValue1(value);\n  };\n  const onChange2 = value => {\n    setValue2(value);\n  };\n  const onChange3 = value => {\n    setValue3(value);\n  };\n  const onChange4 = value => {\n    setValue4(value);\n  };\n  const onChange5 = value => {\n    setValue5(value);\n  };\n\n  return (\n    <div className=\"date-picker-format-demo\">\n      <div className=\"block-small\">\n        <span className=\"demonstration\">默认为Date对象</span>\n        <div className=\"demonstration\">{JSON.stringify(value1) || ''}</div>\n        <DatePicker format=\"YYYY 年 MM 月 DD 日\" placeholder=\"请选择日期\" value={value1} onChange={onChange1} />\n      </div>\n      <div className=\"block-small\">\n        <span className=\"demonstration\">valueFormat=\"YYYY-MM-DD\"</span>\n        <div className=\"demonstration\">{value2 || ''}</div>\n        <DatePicker\n          format=\"YYYY 年 MM 月 DD 日\"\n          valueFormat=\"YYYY-MM-DD\"\n          placeholder=\"请选择日期\"\n          value={value2}\n          onChange={onChange2}\n        />\n      </div>\n      <div className=\"block-small\">\n        <span className=\"demonstration\">valueFormat=\"timestamp\"</span>\n        <div className=\"demonstration\">{value3 || ''}</div>\n        <DatePicker\n          format=\"YYYY 年 MM 月 DD 日\"\n          valueFormat=\"timestamp\"\n          placeholder=\"请选择日期\"\n          value={value3}\n          onChange={onChange3}\n        />\n      </div>\n      <div className=\"block-large\">\n        <span className=\"demonstration\">separator使用“/”代替“-”分隔符</span>\n        <div className=\"demonstration\">{JSON.stringify(value4) || ''}</div>\n        <RangePicker\n          separator=\"/\"\n          format=\"YYYY-MM-DD\"\n          valueFormat=\"YYYY-MM-DD\"\n          single\n          placeholder={['开始日期', '结束日期']}\n          value={value4}\n          onChange={onChange4}\n        />\n      </div>\n      <div className=\"block-large\">\n        <span className=\"demonstration\">rangeMaxDateable启用</span>\n        <div className=\"demonstration\">{JSON.stringify(value5) || ''}</div>\n        <RangePicker\n          rangeMaxDateable\n          format=\"YYYY-MM-DD HH:mm:ss\"\n          valueFormat=\"YYYY-MM-DD HH:mm:ss\"\n          single\n          placeholder={['开始日期', '结束日期']}\n          value={value5}\n          onChange={onChange5}\n        />\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<DatePickerDemo />, mountNode);\n```\n\n```css\n.date-picker-format-demo {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n}\n.date-picker-format-demo .block-small {\n  width: 240px;\n  text-align: center;\n}\n.date-picker-format-demo .block-large {\n  width: 340px;\n  text-align: center;\n}\n.date-picker-format-demo .demonstration {\n  display: block;\n  margin-bottom: 10px;\n  font-size: 14px;\n  color: #8492a6;\n}\n.date-picker-format-demo .mtd-date-picker {\n  width: 100%;\n  margin-bottom: 20px;\n}\n.date-picker-format-demo .mtd-single-range-picker {\n  width: 100%;\n}\n```\n",
      "---\norder: 8\ntitle: 自定义日期单元格\n---\n\n使用 dateRender 自定义日期单元格的内容。\n\n```jsx\nimport { DatePicker, RangePicker } from '@ss/mtd-react';\n\nconst DatePickerDemo = () => {\n  return (\n    <div className=\"date-picker-date-render-demo\">\n      标记出特殊日期：\n      <DatePicker\n        dateRender={current => {\n          if (current.date == 10) {\n            return <span className=\"date-demo\">10</span>;\n          }\n        }}\n        placeholder=\"请选择日期\"\n      />\n      <RangePicker\n        dateRender={current => {\n          if (current.date == 10) {\n            return <span className=\"date-demo\">10</span>;\n          }\n        }}\n        className=\"date-render-double\"\n        placeholder={['请选择开始日期', '请选择结束日期']}\n      />\n      <RangePicker\n        dateRender={current => {\n          if (current.date == 10) {\n            return <span className=\"date-demo\">10</span>;\n          }\n        }}\n        single\n        placeholder={['请选择开始日期', '请选择结束日期']}\n      />\n    </div>\n  );\n};\n\nReactDOM.render(<DatePickerDemo />, mountNode);\n```\n\n```css\n.date-demo {\n  display: block;\n  position: relative;\n  height: 26px;\n}\n.date-demo::after {\n  content: '薪';\n  position: absolute;\n  width: 18px;\n  top: -9px;\n  left: 14px;\n  color: white;\n  background-color: red;\n  border-radius: 50%;\n  line-height: 1.5;\n  font-size: xx-small;\n}\n.date-picker-date-render-demo .mtd-date-picker {\n  margin-bottom: 10px;\n  width: 240px;\n}\n.date-picker-date-render-demo .mtd-single-range-picker {\n  width: 340px;\n}\n.date-picker-date-render-demo .date-render-double {\n  margin-bottom: 10px;\n  width: 340px;\n}\n.date-picker-date-render-demo .date-render-double .mtd-date-picker {\n  margin-bottom: 0;\n  width: 100%;\n}\n```\n",
      "---\norder: 1\ntitle: 基础使用\n---\n\n通过设置 picker、single、format 选择需要的组件类型，打开控制台可查看返回值。\n\n```jsx\nimport { DatePicker, RangePicker } from '@ss/mtd-react';\n\nconst DatePickerDemo = () => {\n  const onChange = value => {\n    console.log(value);\n  };\n\n  return (\n    <div className=\"date-picker-basic-demo\">\n      <div className=\"block\">\n        <span>设置 picker 属性控制选择器类型：</span>\n        <DatePicker placeholder=\"选择日期\" onChange={onChange} />\n        <DatePicker picker=\"week\" placeholder=\"选择周\" onChange={onChange} />\n        <DatePicker picker=\"quarter\" placeholder=\"选择季度\" onChange={onChange} />\n        <DatePicker picker=\"halfyear\" placeholder=\"选择半年\" onChange={onChange} />\n      </div>\n      <div className=\"block\">\n        <span>设置 RangePicker 的 single 属性启用单输入框，推荐使用单框：</span>\n        <RangePicker placeholder={['开始日期', '结束日期']} className=\"date-render-double\" onChange={onChange} />\n        <RangePicker single placeholder={['开始日期', '结束日期']} onChange={onChange} />\n        <RangePicker picker=\"week\" placeholder={['开始周', '结束周']} className=\"date-render-double\" onChange={onChange} />\n        <RangePicker picker=\"week\" single placeholder={['开始周', '结束周']} onChange={onChange} />\n      </div>\n      <div className=\"block\">\n        <span>picker = date 条件下，设置 format 属性控制日历的展示形态，可以分别选择年、月、日和时间：</span>\n        <DatePicker format=\"YYYY\" placeholder=\"选择年\" onChange={onChange} />\n        <DatePicker format=\"YYYY-MM\" placeholder=\"选择年月\" onChange={onChange} />\n        <DatePicker format=\"YYYY.MM.DD HH:mm:ss\" placeholder=\"选择年月日时分秒\" onChange={onChange} />\n        <RangePicker single format=\"YYYY\" placeholder={['开始年', '截止年']} onChange={onChange} />\n        <RangePicker single format=\"YYYY-MM\" placeholder={['开始年月', '截止年月']} onChange={onChange} />\n        <RangePicker single format=\"YYYY.MM.DD HH:mm:ss\" placeholder={['开始时间', '截止时间']} onChange={onChange} />\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<DatePickerDemo />, mountNode);\n```\n\n```css\n.date-picker-basic-demo .mtd-date-picker {\n  margin-bottom: 10px;\n  width: 240px;\n}\n.date-picker-basic-demo .mtd-single-range-picker {\n  width: 340px;\n}\n.date-picker-basic-demo .date-render-double {\n  margin-bottom: 10px;\n  width: 340px;\n}\n.date-picker-basic-demo .date-render-double .mtd-date-picker {\n  margin-bottom: 0;\n  width: 100%;\n}\n```\n",
      "---\norder: 6\ntitle: 不可选时间\n---\n\n通过设置 disabledTime 控制不可选时间。\n\n```jsx\nimport { DatePicker, RangePicker } from '@ss/mtd-react';\n\nconst DatePickerDemo = () => {\n  const disabledHours = h => h > 20;\n  const disabledMinutes = (m, selectedHour) => {\n    if (selectedHour < 10) {\n      return m > 9 && m < 18;\n    }\n  };\n  const disabledSeconds = (s, selectedHour, selectedMinute) => {\n    if (selectedHour > 10 && selectedMinute > 40) {\n      return s > 40;\n    }\n  };\n  // selectedDate 参数是选中的日期，格式为清除了时间部分的时间戳\n  const disabledRule = selectedDate => {\n    const disabledHours1 = h => {\n      return false;\n    };\n    const disabledMinutes1 = (m, selectedHour) => {\n      return false;\n    };\n    const disabledHours2 = h => {\n      return h > 20;\n    };\n    const disabledMinutes2 = (m, selectedHour) => {\n      if (selectedHour < 10) {\n        return m > 9 && m < 18;\n      }\n    };\n    if (selectedDate === new Date().setHours(0, 0, 0, 0)) {\n      return {\n        disabledHours: disabledHours2,\n        disabledMinutes: disabledMinutes2,\n      };\n    }\n    return {\n      disabledHours: disabledHours1,\n      disabledMinutes: disabledMinutes1,\n    };\n  };\n\n  return (\n    <div className=\"date-picker-disabled-time-demo\">\n      <div className=\"block\">\n        <DatePicker\n          disabledTime={() => ({\n            disabledHours,\n            disabledMinutes,\n            disabledSeconds,\n          })}\n          format=\"YYYY.MM.DD HH:mm:ss\"\n          placeholder=\"选择年月日时分秒\"\n        />\n        <RangePicker\n          disabledTime={() => ({\n            disabledHours,\n            disabledMinutes,\n            disabledSeconds,\n          })}\n          className=\"date-render-double\"\n          format=\"YYYY.MM.DD HH:mm:ss\"\n          placeholder={['开始年月日', '截止年月日']}\n        />\n        <RangePicker\n          disabledTime={() => ({\n            disabledHours,\n            disabledMinutes,\n            disabledSeconds,\n          })}\n          single\n          format=\"YYYY.MM.DD HH:mm:ss\"\n          placeholder={['开始年月日', '截止年月日']}\n        />\n      </div>\n      <div className=\"block\">\n        <div>隐藏禁用时间：</div>\n        <div>\n          <DatePicker\n            disabledTime={() => ({\n              disabledHours,\n              disabledMinutes,\n              disabledSeconds,\n              hideDisabledOptions: true,\n            })}\n            format=\"YYYY.MM.DD HH:mm:ss\"\n            placeholder=\"选择年月日时分秒\"\n          />\n        </div>\n      </div>\n      <div className=\"block\">\n        <div>选中不同的日期使用不同的时间禁用规则（仅限日期时间选择器）：</div>\n        <DatePicker\n          disabledTime={v => ({ ...disabledRule(v), hideDisabledOptions: true })}\n          format=\"YYYY-MM-DD HH:mm:ss\"\n          placeholder=\"选择年月日时分秒\"\n        />\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<DatePickerDemo />, mountNode);\n```\n\n```css\n.date-picker-disabled-time-demo .mtd-date-picker {\n  margin-bottom: 10px;\n  width: 240px;\n}\n.date-picker-disabled-time-demo .mtd-single-range-picker {\n  width: 340px;\n}\n.date-picker-disabled-time-demo .date-render-double {\n  margin-bottom: 10px;\n  width: 340px;\n}\n.date-picker-disabled-time-demo .date-render-double .mtd-date-picker {\n  margin-bottom: 0;\n  width: 100%;\n}\n```\n",
      "---\norder: 2\ntitle: 尺寸\n---\n\n三种大小的输入框，若不设置，则为 normal。\n\n```jsx\nimport { DatePicker } from '@ss/mtd-react';\n\nconst DatePickerDemo = () => {\n  return (\n    <div className=\"date-picker-size-demo\">\n      <DatePicker size=\"small\" placeholder=\"请选择日期\" />\n      <DatePicker size=\"normal\" placeholder=\"请选择日期\" />\n      <DatePicker size=\"large\" placeholder=\"请选择日期\" />\n    </div>\n  );\n};\n\nReactDOM.render(<DatePickerDemo />, mountNode);\n```\n\n```css\n.date-picker-size-demo .mtd-date-picker {\n  display: inline-block;\n  width: 240px;\n  margin-right: 10px;\n}\n```\n",
      "---\norder: 9\ntitle: 日期多选\n---\n\n使用 multiple 对日期进行多选，打开控制台可查看返回值。\n\n```jsx\nimport { DatePicker } from '@ss/mtd-react';\n\nconst DatePickerDemo = () => {\n  const onChange = value => {\n    console.log(value);\n  };\n\n  return (\n    <div className=\"date-picker-multiple-demo\">\n      <DatePicker\n        multiple\n        onChange={onChange}\n        value={['2021-04-22', '2021-04-24']}\n        placeholder=\"选择多个日期\"\n        popLayer={{ className: 'pop-class' }}\n      />\n      <DatePicker\n        multiple\n        format=\"YYYY-MM\"\n        value={['2021-04', '2021-07']}\n        onChange={onChange}\n        placeholder=\"选择多个月份\"\n        popLayer={{ className: 'pop-class' }}\n      />\n      <DatePicker\n        multiple\n        format=\"YYYY\"\n        valueFormat=\"YYYY\"\n        value={['2021', '2022']}\n        onChange={onChange}\n        placeholder=\"选择多个年份\"\n        popLayer={{ className: 'pop-class' }}\n      />\n    </div>\n  );\n};\n\nReactDOM.render(<DatePickerDemo />, mountNode);\n```\n\n```css\n.date-picker-multiple-demo .mtd-date-picker {\n  display: inline-block;\n  width: 240px;\n  margin-right: 10px;\n}\n```\n",
      "---\norder: 4\ntitle: 功能按钮\n---\n\n扩展的一些功能按钮，帮助丰富组件的功能。\n\n```jsx\nimport { DatePicker, RangePicker } from '@ss/mtd-react';\n\nconst DatePickerDemo = () => {\n  return (\n    <div className=\"date-picker-unit-demo\">\n      <div className=\"block\">\n        <span>DatePicker 通过设置 showToday 显示“今天”按钮，周组件显示“本周”：</span>\n        <DatePicker showToday placeholder=\"选择日期\" />\n        <DatePicker showToday picker=\"week\" placeholder=\"选择周\" />\n      </div>\n      <div className=\"block\">\n        <span>设置 isShowCurrentTimeBtn 显示“此刻”按钮，时间选择器模式下默认启用：</span>\n        <DatePicker format=\"YYYY.MM.DD HH:mm:ss\" placeholder=\"选择年月日时分秒\" />\n        <RangePicker single format=\"YYYY.MM.DD HH:mm:ss\" placeholder={['开始时间', '截止时间']} />\n      </div>\n      <div className=\"block\">\n        <span>RangePicker 通过设置 confirmable 显示“确认”按钮，点击确认才选中日期，仅在 single 模式下生效：</span>\n        <RangePicker confirmable single placeholder={['开始日期', '结束日期']} />\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<DatePickerDemo />, mountNode);\n```\n\n```css\n.date-picker-unit-demo .mtd-date-picker {\n  margin-bottom: 10px;\n  width: 240px;\n}\n.date-picker-unit-demo .mtd-single-range-picker {\n  margin-bottom: 10px;\n  width: 340px;\n}\n```\n",
      "---\norder: 5\ntitle: 不可选日期\n---\n\n通过设置 disabledDate 控制不能选择的日期。\n\n```jsx\nimport { DatePicker, RangePicker } from '@ss/mtd-react';\n\nconst DatePickerDemo = () => {\n  const disableDate = currentDate => {\n    const date = new Date();\n    // currentDate传入的时间戳为每一天的0点，所以当前日期也需要修改为0点\n    date.setHours(0, 0, 0, 0);\n    return currentDate < date.getTime();\n  };\n  // 所在月有一天被禁用，则这个月不可选\n  const disableMonth = currentDate => {\n    const date = new Date();\n    date.setHours(0, 0, 0, 0);\n    return currentDate <= date.getTime();\n  };\n  const rangeDisableDate = (currentDate, selectDate) => {\n    if (selectDate && selectDate[0] && !selectDate[1]) {\n      return Math.abs(currentDate - selectDate[0]) < 7 * 24 * 60 * 60 * 1000;\n    }\n    return false;\n  };\n  const rangeDisableDate2 = (currentDate, selectDate) => {\n    if (selectDate && selectDate[0] && !selectDate[1]) {\n      return Math.abs(currentDate - selectDate[0]) > 14 * 24 * 60 * 60 * 1000;\n    }\n    return false;\n  };\n  const disableWeek = currentDate => {\n    const date = new Date();\n    // currentDate传入的时间戳为每一天的0点，所以当前日期也需要修改为0点\n    date.setHours(0, 0, 0, 0);\n    // 注意使用的是“<=”，当date为周一的时候，上周一是被禁用的，则上周不可选择\n    return currentDate <= date.getTime() - 7 * 24 * 60 * 60 * 1000;\n  };\n  const rangeDisableWeek = (currentDate, selectDate) => {\n    if (selectDate && selectDate[0] && !selectDate[1]) {\n      // 注意使用的是“<=”，保证下下周周一是被禁用的，使下下周不可选择\n      return Math.abs(currentDate - selectDate[0]) <= 7 * 24 * 60 * 60 * 1000 * 2;\n    }\n    return false;\n  };\n\n  return (\n    <div className=\"date-picker-disabled-date-demo\">\n      <div className=\"block\">\n        <span>今天之前不可选：</span>\n        <DatePicker disabledDate={disableDate} format=\"YYYY.MM.DD\" placeholder=\"请选择日期\" />\n      </div>\n      <div className=\"block\">\n        <span>本月及之前月不可选：</span>\n        <DatePicker disabledDate={disableMonth} format=\"YYYY.MM\" placeholder=\"请选择日期\" />\n      </div>\n      <div className=\"block\">\n        <span>选择大于7天的区间：</span>\n        <RangePicker\n          disabledDate={rangeDisableDate}\n          single\n          format=\"YYYY.MM.DD\"\n          placeholder={['开始年月日', '截止年月日']}\n        />\n      </div>\n      <div className=\"block\">\n        <span>选择小于15天的区间：</span>\n        <RangePicker\n          disabledDate={rangeDisableDate2}\n          single\n          format=\"YYYY.MM.DD\"\n          placeholder={['开始年月日', '截止年月日']}\n        />\n      </div>\n      <div className=\"block\">\n        <span>本周之前不可选：</span>\n        <DatePicker disabledDate={disableWeek} picker=\"week\" placeholder=\"请选择周\" />\n      </div>\n      <div className=\"block\">\n        <span>选择大于2周的区间：</span>\n        <RangePicker disabledDate={rangeDisableWeek} picker=\"week\" single placeholder={['开始周', '截止周']} />\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<DatePickerDemo />, mountNode);\n```\n\n```css\n.date-picker-disabled-date-demo .mtd-date-picker {\n  margin-bottom: 10px;\n  width: 240px;\n}\n.date-picker-disabled-date-demo .mtd-single-range-picker {\n  width: 340px;\n}\n```\n",
      "---\norder: 7\ntitle: 自定义日期\n---\n\n使用 renderSidebar 自定义左侧内容，选择具体的日期。\n\n```jsx\nimport { useState } from 'react';\nimport { DatePicker, RangePicker } from '@ss/mtd-react';\n\n// 得到一周中周一的日期\nconst getMondayOfWeek = v => {\n  const day = new Date(v);\n  day.setHours(0, 0, 0, 0);\n  day.setDate(day.getDate() + 1 - (day.getDay() || 7));\n  return day.getTime();\n};\n\nconst DatePickerDemo = () => {\n  const [value, setValue] = useState('');\n  const [week, setWeek] = useState('');\n  const [open, setOpen] = useState(false);\n  const [rangeDate, setRangeDate] = useState([null, null]);\n\n  const renderSidebar = picker => (\n    <ul className=\"sidebar-demo\">\n      <li\n        onClick={() => {\n          setValue(new Date('2022-01-01'));\n        }}\n      >\n        1月1号\n      </li>\n      <li\n        onClick={() => {\n          setValue(new Date());\n        }}\n      >\n        今天\n      </li>\n      <li\n        onClick={() => {\n          setValue(new Date(Date.now() - 7 * 24 * 60 * 60 * 1000));\n        }}\n      >\n        过去7天\n      </li>\n    </ul>\n  );\n\n  const renderWeekSidebar = picker => (\n    <ul className=\"sidebar-demo\">\n      <li\n        onClick={() => {\n          const firstDay = new Date(new Date().getFullYear(), 0, 1);\n          const maybeFirstWeek = getMondayOfWeek(firstDay);\n          // 此周属于天数占多数的那一年\n          const firstWeek = (firstDay.getDay() || 7) <= 4 ? maybeFirstWeek : maybeFirstWeek + 7 * 24 * 60 * 60 * 1000;\n          setWeek(new Date(firstWeek));\n        }}\n      >\n        第一周\n      </li>\n      <li\n        onClick={() => {\n          setWeek(new Date(getMondayOfWeek(new Date())));\n        }}\n      >\n        本周\n      </li>\n      <li\n        onClick={() => {\n          setWeek(new Date(getMondayOfWeek(new Date()) - 7 * 24 * 60 * 60 * 1000));\n        }}\n      >\n        上一周\n      </li>\n    </ul>\n  );\n\n  const renderRangeSidebar = () => (\n    <ul className=\"sidebar-demo\">\n      <li\n        onClick={() => {\n          setRangeDate([new Date('2022-01-01'), new Date('2022-01-01')]);\n        }}\n      >\n        1月1号\n      </li>\n      <li\n        onClick={() => {\n          setRangeDate([new Date(), new Date()]);\n        }}\n      >\n        今天\n      </li>\n      <li\n        onClick={() => {\n          setRangeDate([new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), new Date()]);\n        }}\n      >\n        过去7天\n      </li>\n    </ul>\n  );\n  return (\n    <div className=\"date-picker-custom-demo\">\n      <DatePicker renderSidebar={renderSidebar} open={open} value={value} placeholder=\"请选择日期\" />\n      <DatePicker renderSidebar={renderWeekSidebar} open={open} picker=\"week\" value={week} placeholder=\"请选择周\" />\n      <RangePicker\n        renderSidebar={renderRangeSidebar}\n        open={open}\n        value={rangeDate}\n        placeholder={['请选择开始日期', '请选择结束日期']}\n        single\n      />\n    </div>\n  );\n};\n\nReactDOM.render(<DatePickerDemo />, mountNode);\n```\n\n```css\n.date-picker-custom-demo .mtd-date-picker {\n  width: 240px;\n  margin-bottom: 10px;\n}\n.date-picker-custom-demo .mtd-single-range-picker {\n  width: 340px;\n  margin-bottom: 10px;\n}\n.sidebar-demo li {\n  width: 100%;\n  height: 30px;\n  cursor: pointer;\n}\n.sidebar-demo li:hover {\n  color: #0a70f5;\n}\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/table",
    "content": [
      "---\norder: 7\ntitle: 加载数据\ncols: 1\n# noPreview: true\n---\n\n这个例子通过模拟远程获取数据，具有筛选、排序等功能，以及页面的loading效果。\n\n````jsx\nimport  { useState, useEffect } from 'react';\nimport { Table, Icon, Loading, Pagination } from \"@ss/mtd-react\";\n\nconst Demo = (props) => {\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState([]);\n  const [current, setCurrent] = useState(1);\n  const total = 40;\n  const handleFetchData = (current) => {\n    const data = [];\n    for(let i = (current - 1) * 10; i < current * 10; i++) {\n      data.push({\n        id: i,\n        name: 'Jhon Black ' + i,\n        age: 26,\n        address: '恒电大厦B座2层 - 工位' + i,\n      });\n    }\n    setData(data);\n  };\n  const handleChange = (current) => {\n    setCurrent(current);\n    setLoading(true);\n    setTimeout(function() {\n      //模拟获取数据\n      handleFetchData(current);\n      setLoading(false);\n    }, 3000);\n  };\n  useEffect(() => {\n    handleFetchData(current);\n  }, []);\n  return (\n    <Loading loading={loading}>\n      <Table resizable useSticky rowKey=\"id\" data={data}>\n        <Table.Column dataKey=\"name\">姓名</Table.Column>\n        <Table.Column dataKey=\"age\">年龄</Table.Column>\n        <Table.Column dataKey=\"address\">地址</Table.Column>\n      </Table>\n      <Pagination className=\"mtd-table-Pagination\"\n        size='small'\n        current={current}\n        total={total}\n        onChange={handleChange} />\n    </Loading>\n  )\n};\n\nReactDOM.render(<Demo />, mountNode);\n````\n```css\n.mtd-table-Pagination {\n  float: right;\n  margin-top: 20px;\n}\n```\n",
      "---\norder: 13\ntitle: useSticky属性\n# noPreview: true\n---\n\nuseSticky 属性可与 magnet 结合使用，在维持原有功能的情况下，可优化性能\n\n```jsx\nimport { useState, useEffect } from 'react';\nimport { Table } from '@ss/mtd-react';\nlet data = [];\nfor (let i = 0; i < 40; i += 1) {\n  let address = `New York No. ${i}`;\n  data.push({\n    name: 'John Brown',\n    age: 32,\n    address,\n    telphone: 67128342,\n    email: 'John@meituan.com',\n  });\n}\n\nconst TableDemo = () => {\n  const [selectedKeys, setSelectedKeys] = useState([1, 2]);\n  const rowSelection = {\n    fixed: 'left',\n    selectedKeys,\n  };\n  const handleSelectChange = (selectedKey, selectedRows) => {\n    console.log('selectedRowKeys changed: ', selectedKey, selectedRows);\n    setSelectedKeys(selectedKey);\n  };\n\n  return (\n    <Table\n      resizable\n      data={data}\n      bordered=\"cell\"\n      magnet={64}\n      useSticky\n      scroll={{ x: true, y: 500 }}\n      rowSelection={rowSelection}\n      onSelectChange={handleSelectChange}\n    >\n      <Table.Column dataKey=\"name\" width=\"150px\">\n        姓名\n      </Table.Column>\n      <Table.Column dataKey=\"age\" width=\"200px\">\n        年龄\n      </Table.Column>\n      <Table.Column dataKey=\"telphone\" width=\"300px\">\n        电话\n      </Table.Column>\n      <Table.Column dataKey=\"email\" width=\"150px\">\n        邮箱\n      </Table.Column>\n      <Table.Column dataKey=\"address\" width=\"200px\">\n        地址\n      </Table.Column>\n    </Table>\n  );\n};\n\nReactDOM.render(<TableDemo />, mountNode);\n```\n",
      "---\norder: 6\ntitle: 筛选和排序\ncols: 1\n# noPreview: true todo 筛选和排序有问题\n---\n\n筛选和排序，不支持内置的用法，通过自定义表头和设置数据来控制\n\n```jsx\nimport  { useState, useEffect, useRef } from 'react';\nimport { Table, Icon, PopLayer, Checkbox, Button, Input } from '@ss/mtd-react';\n\nconst Column = (props) => {\n  const { handleSort, visible: propVisible, title, filterable, children, sortable, filterType, dataKey, sortOrder, sortedKey } = props;\n  const [visible, setVisible] = useState(propVisible);\n  const [target, setTarget] = useState(null);\n  const targetRef = useRef(null);\n  const popLayerRef = useRef(null);\n  const visibleRef = useRef(null);\n  const handleClick = (e) => {\n    const targetDOM = ReactDOM.findDOMNode(targetRef.current);\n    if (!visibleRef.current || !targetDOM) return;\n    if ([popLayerRef.current, targetDOM].every(v => !v || !v.contains(e.target))) {\n      setVisible(false);\n    }\n  };\n  const handleFilter = () => {\n    setVisible(!visible);\n    setTarget(targetRef);\n  };\n  const handleColSort = (order) => {\n    handleSort(order === sortOrder && sortedKey === dataKey ? '' : order, dataKey);\n  };\n  useEffect(() => {\n    addEventListener('click', handleClick, true);\n    return () => {\n      removeEventListener('click', handleClick);\n    }\n  }, []);\n  useEffect(() => {\n    visibleRef.current = visible;\n  }, [visible]);\n  return (\n    <div className=\"content\">\n      <div className=\"table-sort\">\n        <span>{title}</span>\n        {sortable && (\n          <span className=\"table-sort-content\">\n            <Icon\n              className={`${sortOrder === 'ascend' && sortedKey === dataKey ? 'table-sort-choosed' : ''} table-sort-icon table-sort-icon-up`}\n              type=\"triangle\"\n              onClick={()=>{sortable && handleColSort('ascend')}}\n            />\n            <Icon\n              className={`${sortOrder === 'descend' && sortedKey === dataKey ? 'table-sort-choosed' : ''} table-sort-icon`}\n              type=\"triangle\"\n              onClick={()=>{sortable && handleColSort('descend')}}\n            />\n          </span>\n        )}\n      </div>\n      {filterable && (\n        <div className=\"table-filter\" onClick={handleFilter}>\n          <Icon\n            className=\"table-filter-icon\"\n            type={filterType}\n            ref={targetRef}\n          />\n        </div>\n      )}\n      {visible && (\n        <PopLayer\n          align={{ points: ['top', 'bottom'], offset: [-50, 16] }}\n          getTargetElement={() => ReactDOM.findDOMNode(target.current)}\n        >\n          {React.cloneElement(children, { ref: popLayerRef })}\n        </PopLayer>\n      )}\n    </div>\n  );\n};\n\nconst arr = [];\nfor(let i=0; i < 6; i++){\n  arr.push({\n    key: i,\n    name: `John Brown${i}`,\n    age: 32 + i,\n    address: `New York No. ${i} Lake Park`,\n  })\n}\n\nconst Demo = (props) => {\n  const [data, setData] = useState([...arr]);\n  const [checked, setChecked] = useState(false);\n  const [visible, setVisible] = useState(false);\n  const [sortOrder, setSortOrder] = useState('');\n  const [sortedKey, setSortedKey] = useState('');\n  const handleChecked = (e) => {\n    setChecked(e.target.checked);\n  };\n  const handleOK = () => {\n    setData(data.filter(v => (v?.name || '').includes('Brown2')));\n    setVisible(false);\n  };\n  const handleReset = () => {\n    setData(arr);\n    setVisible(false);\n  };\n  const handleSort = (sort, key) => {\n    setSortOrder(sort);\n    setSortedKey(key);\n    if (key === 'age') {\n      setData(data.sort((a,b) => sort === 'ascend' ? a[key] - b[key] : b[key] - a[key]))\n    } else if (key === 'name') {\n      setData(data.sort((a,b) => sort === 'ascend' ? a[key]?.localeCompare(b[key]) : b[key].localeCompare(a[key])))\n    } else {\n      setData([...arr]);\n    }\n  };\n  return (\n    <Table useSticky data={data} className=\"table-sort-filter\">\n      <Table.Column dataKey=\"name\">\n        <Column\n          dataKey=\"name\"\n          title=\"姓名\"\n          sortedKey={sortedKey}\n          sortOrder={sortOrder}\n          sortable\n          filterable\n          handleSort={handleSort}\n          visible={visible}\n          filterType=\"filter\"\n        >\n          <div className=\"pop\">\n            <ul className=\"popList\">\n              <li>\n                <Checkbox onChange={handleChecked} checked={checked}>Brown2</Checkbox>\n              </li>\n            </ul>\n            <div className=\"popBtn\">\n              <Button size=\"small\" type=\"primary\" shape=\"text\" onClick={handleOK} style={{\"float\":\"left\"}}>确定</Button>\n              <Button size=\"small\" type=\"primary\" shape=\"text\" onClick={handleReset} style={{\"float\":\"right\"}}>重置</Button>\n            </div>\n          </div>\n        </Column>\n      </Table.Column>\n      <Table.Column dataKey=\"age\">\n        <Column\n          dataKey=\"age\"\n          title=\"年龄\"\n          sortable\n          sortedKey={sortedKey}\n          sortOrder={sortOrder}\n          filterable\n          handleSort={handleSort}\n          visible={visible}\n          filterType=\"search\"\n        >\n          <div className=\"pop\">\n            <Input />\n          </div>\n        </Column>\n      </Table.Column>\n      <Table.Column dataKey=\"address\">\n        <Column dataKey=\"address\" title=\"地址\" />\n      </Table.Column>\n    </Table>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n```css\n.content {\n  display: flex;\n  align-items: center;\n  position:relative;\n}\n.table-sort-content {\n  cursor: pointer;\n  color: #a3a3a3;\n  display: inline-block;\n  margin-left: 4px;\n  vertical-align: -5px;\n}\n.table-sort-icon {\n  transform: scale(0.7);\n  margin-bottom:-1px;\n  display: block;\n  line-height: 8px;\n  font-size: 16px;\n}\n.table-sort-icon-up {\n  transform:rotate(-180deg) scale(0.7);\n}\n.table-sort-icon:hover {\n  color: #166FF7;\n}\n.table-filter {\n  width: 24px;\n  height: 37px;\n  position: absolute;\n  margin-left: 48px;\n  cursor: pointer;\n}\n.table-filter:hover {\n  background: rgba(0,0,0,0.04);\n}\n.table-filter-icon {\n  color: #a3a3a3;\n  padding-left: 4px;\n  vertical-align: -8px;\n}\n.table-sort-choosed.table-sort-icon {\n  color: #166FF7;\n}\n.pop {\n  display: inline-block;\n  padding: 6px 8px;\n  text-align: left;\n  text-decoration: none;\n  color: #000;\n  background-color: #fff;\n  border-radius: 4px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n  min-height: 32px;\n  max-width: 300px;\n}\n.popList li{\n  padding:5px 4px;\n}\n.popBtn {\n  padding:5px;\n}\n```\n",
      "---\norder: 3\ntitle: 表头吸顶固定\n# noPreview: true\n---\n\n通过设置 `Table.magnet` ，能够实现表头吸顶固定的效果。\n\n````jsx\nimport { Table } from '@ss/mtd-react'\n\nconst item = { name: 'John Brown', age: 32, address: 'New York No. 1',\n  telphone: 67128342, email: 'John@meituan.com' };\nlet data = [];\nfor (let i = 0; i < 10; i += 1) {\n  data.push(item);\n}\n\nReactDOM.render(\n  <Table resizable data={data} useSticky magnet={64} scroll={{ x: 1500 }}>\n    <Table.Column dataKey=\"name\" width='100' fixed='left'>姓名</Table.Column>\n    <Table.Column dataKey=\"age\" width='200'>年龄</Table.Column>\n    <Table.Column dataKey=\"telphone\" width='200'>电话</Table.Column>\n    <Table.Column dataKey=\"email\" width='150'>邮箱</Table.Column>\n    <Table.Column dataKey=\"address\" width='100' fixed='right'>地址</Table.Column>\n  </Table>\n  , mountNode);\n````\n\n",
      "---\norder: 2\ntitle: 表格行/列合并\ncols: 1\n# noPreview: true\n---\n\n表头支持列合并，使用column中的columnGroup进行设置。\n表格支持行/列合并，使用render里的单元格属性colSpan和rowSpan设置值为0时，设置的表格不会渲染。\n\n````jsx\nimport { Table } from \"@ss/mtd-react\";\nconst data = [];\nfor( let i = 1; i < 5; i++) {\n  data.push({\n    id: i,\n    date: '2016-05-0' + i,\n    name: '王小虎',\n    province: '上海',\n    city: '普陀区',\n    address: '上海市普陀区金沙江路 1518 弄',\n    zip: 200333\n  })\n}\ndata[1].date = '2016-05-01';\ndata[3].date = '2016-05-03';\n\nlet dateRowSpans = [], count = 0;\nfor(var i = 0; i < data.length; i++) {\n  count = 0;\n  for(var j = 0; j < data.length; j++) {\n    if(data[i]['date'] == data[j]['date']) {\n      count++;\n    }\n  }\n  if(count > 1 && i > 0 && data[i-1]['date'] == data[i]['date']) {\n    count = 0;\n  }\n  dateRowSpans.push(count);\n}\n\nconst Demo = () => {\n  return (\n    <Table resizable useSticky rowKey=\"id\" bordered=\"cell\" onRowClick={row => console.log(row)} data={data}>\n      <Table.Column dataKey='date'>日期</Table.Column>\n      <Table.ColumnGroup label='配送信息'>\n        <Table.Column dataKey='name' render={(value, row, column, {index})=>{\n          if(index== 2){\n            return {\n              children: value,\n              props:{\n                colSpan: 1,\n                rowSpan: 2,\n              }\n            }\n          }\n          if(index == 3){\n            return {\n              children: value,\n              props:{\n                colSpan: 1,\n                rowSpan: 0,\n              }\n            }\n          }\n          return {\n            children: value,\n          }\n        }}>姓名</Table.Column>\n        <Table.ColumnGroup label='地址'>\n          <Table.Column dataKey='province' render={(value, row, column, {index})=>{\n              return {\n                children: value,\n                props:{\n                  colSpan: index === 0 ? 2 : 1,\n                  rowSpan: 1,\n                }\n              }\n            }}>省份</Table.Column>\n          <Table.Column dataKey='city' render={(value, row, column, {index})=>{\n              return {\n                children: value,\n                props:{\n                  colSpan: index === 0 ? 0 : 1,\n                  rowSpan: 1,\n                }\n              }\n            }}>市区</Table.Column>\n          <Table.Column dataKey=\"address\">地址</Table.Column>\n        </Table.ColumnGroup>\n      </Table.ColumnGroup>\n      <Table.Column dataKey='console'>操作</Table.Column>\n    </Table>\n  )\n}\n\nReactDOM.render(<Demo />, mountNode);\n````\n",
      "---\norder: 0\ntitle: 基本使用\ncols: 1\n# noPreview: true\n---\n\n基本使用，表格最后一列是各种操作，使用 JSX 风格的 API，描述了一个 Cloumns 的语法糖\n\n```jsx\nimport { useState, useEffect } from 'react';\nimport { Table } from '@ss/mtd-react';\n\nconst data = [];\nfor (let i = 0; i < 5; i++) {\n  data.push({\n    key: i,\n    name: 'Jhon Black ' + i,\n    age: 26,\n    address: '恒电大厦B座2层',\n    email: 'John@meituan.com',\n  });\n}\n\nconst TableDemo = () => {\n  const [tableData, setTableData] = useState([]);\n  useEffect(() => {\n    setTimeout(() => {\n      setTableData(data);\n    }, 2000);\n  }, []);\n\n  return (\n    <Table resizable useSticky rowKey=\"key\" bordered=\"cell\" data={tableData}>\n      <Table.Column dataKey=\"name\" render={text => <a>{text}</a>}>\n        姓名\n      </Table.Column>\n      <Table.Column dataKey=\"age\">年龄</Table.Column>\n      <Table.Column dataKey=\"address\">地址</Table.Column>\n      <Table.Column dataKey=\"email\">邮箱</Table.Column>\n      <Table.Column\n        dataKey=\"action\"\n        render={text => (\n          <span>\n            <a>查看</a>\n            &nbsp;|&nbsp;\n            <a>删除</a>\n          </span>\n        )}\n      >\n        操作\n      </Table.Column>\n    </Table>\n  );\n};\n\nReactDOM.render(<TableDemo />, mountNode);\n```\n",
      "---\norder: 9\ntitle: 表格属性\ncols: 1\n# noPreview: true\n---\n\n动态设置表格的属性，会有不同的体验。\n边框属性，显示条纹，是否展开，显示 checkbox，固定表头，表格大小\n\n```jsx\nimport { useState } from 'react';\nimport { Table, Checkbox, Radio, Button, Icon, Form } from '@ss/mtd-react';\n\nconst CheckboxGroup = Checkbox.Group;\nconst RadioGroup = Radio.Group;\nconst FormItem = Form.Item;\n\nconst data = [];\nfor (let i = 1; i <= 10; i++) {\n  data.push({\n    id: i + 1,\n    name: '李小龙',\n    age: `${i}2`,\n    address: `中国北京望京东路${i}号院`,\n    desc: `我是李小龙，今年 ${i}2 岁，生活在中国北京望京东路${i}号院。`,\n  });\n}\n\nconst rowExpansion = { render: row => <p>{row.desc}</p> };\nconst rowSelection = {\n  style: { paddingRight: 0, width: 40 },\n  fixed: 'left',\n};\nconst defaultFieldsValue = {\n  bordered: 'row',\n  size: 'normal',\n  props: ['striped', 'checkbox'],\n  scroll: ['left', 'right', 'header'],\n};\nconst DEFAULT_TABLE = {\n  bordered: 'row',\n  size: 'normal',\n  rowSelection: rowSelection,\n  striped: true,\n  scroll: { x: true, y: true },\n  useSticky: false,\n};\nconst TableDemo = () => {\n  const [table, setTable] = useState(DEFAULT_TABLE);\n  const [fixed, setFixed] = useState(['right', 'header']);\n\n  const onFieldValueChange = (itemKey, itemValue) => {\n    if (itemKey == 'bordered' || itemKey == 'size') {\n      table[itemKey] = itemValue;\n    }\n    if (itemKey == 'props') {\n      if (itemValue.indexOf('striped') > -1) {\n        table.striped = true;\n      } else {\n        table.striped = false;\n      }\n      if (itemValue.indexOf('checkbox') > -1) {\n        table.rowSelection = rowSelection;\n      } else {\n        table.rowSelection = false;\n      }\n      if (itemValue.indexOf('expand') > -1) {\n        table.rowExpansion = rowExpansion;\n      } else {\n        table.rowExpansion = false;\n      }\n    }\n    if (itemKey == 'scroll') {\n      if (itemValue.indexOf('sticky') > -1) {\n        table.useSticky = true;\n      } else {\n        table.useSticky = false;\n      }\n      fixed = itemValue;\n    }\n    setTable({ ...table });\n    setFixed(fixed);\n  };\n\n  return (\n    <div className=\"table-demo-props\">\n      <Form onFieldValueChange={onFieldValueChange} defaultFieldsValue={defaultFieldsValue}>\n        <FormItem span={12} formItemKey=\"bordered\" label=\"边框：\">\n          <RadioGroup toFormItem>\n            <Radio value=\"cell\">全边框</Radio>\n            <Radio value=\"row\">行边框</Radio>\n            <Radio value=\"none\">无边框</Radio>\n          </RadioGroup>\n        </FormItem>\n        <FormItem span={12} formItemKey=\"props\" label=\"属性：\">\n          <Checkbox.Group toFormItem>\n            <Checkbox value=\"striped\">显示条纹</Checkbox>\n            <Checkbox value=\"checkbox\">Checkbox</Checkbox>\n            <Checkbox value=\"expand\">显示展开</Checkbox>\n          </Checkbox.Group>\n        </FormItem>\n        <FormItem span={12} formItemKey=\"size\" label=\"尺寸：\">\n          <RadioGroup toFormItem>\n            <Radio value=\"small\">小号</Radio>\n            <Radio value=\"normal\">中号</Radio>\n            <Radio value=\"large\">大号</Radio>\n          </RadioGroup>\n        </FormItem>\n        <FormItem span={12} formItemKey=\"scroll\" label=\"滚动：\">\n          <Checkbox.Group toFormItem>\n            <Checkbox value=\"header\" disabled>\n              固定表头\n            </Checkbox>\n            <Checkbox value=\"sticky\">useSticky</Checkbox>\n            <Checkbox value=\"left\" disabled>\n              固定左列\n            </Checkbox>\n            <Checkbox value=\"right\">固定右列</Checkbox>\n          </Checkbox.Group>\n        </FormItem>\n      </Form>\n      <Table resizable useSticky rowKey=\"id\" {...table} style={{ height: 240 }} data={data}>\n        <Table.Column dataKey=\"name\" width={150} fixed=\"left\" render={value => <a href=\"javascript:;\">{value}</a>}>\n          姓名\n        </Table.Column>\n        <Table.Column dataKey=\"age\" width={120}>\n          年龄\n        </Table.Column>\n        <Table.Column dataKey=\"address\" width={400}>\n          地址\n        </Table.Column>\n        <Table.Column\n          dataKey=\"operate\"\n          width={200}\n          fixed={fixed.indexOf('right') > -1 ? 'right' : null}\n          render={(value, row) => (\n            <span>\n              <a>查看-{row['name']}</a>\n              &nbsp;&nbsp;&nbsp;&nbsp;\n              <a>\n                更多 <Icon type=\"down-thick\" />\n              </a>\n            </span>\n          )}\n        >\n          操作\n        </Table.Column>\n      </Table>\n    </div>\n  );\n};\n\nReactDOM.render(<TableDemo />, mountNode);\n```\n\n```css\n.table-demo-props .mtd-form-item {\n  margin-bottom: 0;\n}\n.table-demo-props .mtd-table {\n  margin-top: 8px;\n}\n```\n",
      "---\norder: 11\ntitle: 固定头和列\n# noPreview: true\n---\n\n适合同时展示有大量数据和数据列。\n\n```jsx\nimport { Table } from '@ss/mtd-react';\n\nconst data = [];\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    id: i,\n    name: 'Jhon Black ' + i,\n    age: 26,\n    address: '恒电大厦B座2层',\n    address1: '恒电大厦B座2层',\n    address2: '恒电大厦B座2层',\n    telphone: 67128342,\n    email: 'John' + i + '@meituan.com',\n  });\n}\n\nReactDOM.render(\n  <Table resizable useSticky data={data} rowKey=\"id\" scroll={{ x: 1000, y: 180 }}>\n    <Table.Column dataKey=\"name\" width=\"150\" fixed=\"left\">\n      姓名\n    </Table.Column>\n    <Table.Column dataKey=\"age\" width=\"100\">\n      年龄\n    </Table.Column>\n    <Table.Column dataKey=\"address\" width=\"150\">\n      地址\n    </Table.Column>\n    <Table.Column dataKey=\"address1\" width=\"150\">\n      地址1\n    </Table.Column>\n    <Table.Column dataKey=\"address2\" width=\"150\">\n      地址2\n    </Table.Column>\n    <Table.Column dataKey=\"telphone\" width=\"150\">\n      电话\n    </Table.Column>\n    <Table.Column dataKey=\"email\" width=\"150\" fixed=\"right\">\n      邮箱\n    </Table.Column>\n  </Table>,\n  mountNode\n);\n```\n",
      "---\norder: 4\ntitle: 选择和操作\ncols: 1\n# noPreview: true\nonlyPreview: true\n---\n\n选择主要通过rowSelection来控制，设置selectedKeys能够让选择变成受控。\n\n通过getCheckboxProps可以设置checkbox是否能够被选中。\n\n\n````jsx\nimport  { useState } from 'react';\nimport { Table} from \"@ss/mtd-react\";\n\nconst data = [];\nfor(let i = 0; i < 16; i++) {\n  data.push({\n    id: i,\n    name: 'Jhon Black ' + i,\n    age: 26,\n    address: '恒电大厦B座2层'\n  });\n}\n\nconst Demo = (props) => {\n  const [selectedKeys, setSelectedKeys] = useState([1, 2]);\n  const handleSelectChange = (selectedKeys, selectedRows) => {\n    console.log('selectedRowKeys changed: ',selectedKeys, selectedRows);\n    setSelectedKeys(selectedKeys);\n  };\n  const rowSelection = {\n    fixed:'left',\n    selectedKeys,\n    getCheckboxProps: function(row, index) {\n      return {\n        disabled: index%3 ==0,\n      }\n    }\n  };\n  return (\n    <Table\n      resizable\n      useSticky\n      rowKey=\"id\"\n      rowSelection={rowSelection}\n      scroll={{y:300}}\n      data={data}\n      onRowClick={(row) => console.log('click', row.name)}\n      onSelectChange={handleSelectChange}\n    >\n      <Table.Column dataKey=\"name\" width=\"200\" render={(text, row) => row['name']}>姓名</Table.Column>\n      <Table.Column dataKey=\"age\" width=\"100\">年龄</Table.Column>\n      <Table.Column dataKey=\"address\">地址</Table.Column>\n    </Table>\n  )\n};\n\nReactDOM.render(<Demo />, mountNode);\n````\n",
      "---\norder: 10\ntitle: 树形表格\n# noPreview: true\n---\n\n如果需要显示树形表格, 使用 `rowExpansion` 实现。\n\n```jsx\nimport { Table } from '@ss/mtd-react';\n\nconst data = [\n  {\n    key: '1',\n    name: 'John Brown',\n    age: 32,\n    address: 'New York No. 1 Lake Park',\n    telphone: 67128342,\n    email: 'John@meituan.com',\n    children: [\n      {\n        key: '11',\n        name: 'John Brown11',\n        age: 32,\n        address: 'New York No. 1 Lake Park',\n        telphone: 67128342,\n        email: 'John@meituan.com',\n        children: [\n          {\n            key: '113',\n            name: 'John Brown113',\n            age: 32,\n            address: 'New York No. 1 Lake Park',\n            telphone: 67128342,\n            email: 'John@meituan.com',\n            children: [\n              {\n                key: '1131',\n                name: 'John Brown111',\n                age: 32,\n                address: 'New York No. 1 Lake Park',\n                telphone: 67128342,\n                email: 'John@meituan.com',\n              },\n              {\n                key: '1132',\n                name: 'John Brown112',\n                age: 32,\n                address: 'New York No. 1 Lake Park',\n                telphone: 67128342,\n                email: 'John@meituan.com',\n              },\n              {\n                key: '1133',\n                name: 'John Brown113',\n                age: 32,\n                address: 'New York No. 1 Lake Park',\n                telphone: 67128342,\n                email: 'John@meituan.com',\n              },\n            ],\n          },\n        ],\n      },\n      {\n        key: '12',\n        name: 'John Brown12',\n        age: 32,\n        address: 'New York No. 1 Lake Park',\n        telphone: 67128342,\n        email: 'John@meituan.com',\n      },\n      {\n        key: '13',\n        name: 'John Brown13',\n        age: 32,\n        address: 'New York No. 1 Lake Park',\n        telphone: 67128342,\n        email: 'John@meituan.com',\n      },\n    ],\n  },\n  {\n    key: '2',\n    name: 'Jim Green',\n    age: 42,\n    address: 'London No. 1 Lake Park',\n    telphone: 18221993345,\n    email: 'Jim@meituan.com',\n    children: [\n      {\n        key: '21',\n        name: 'John Brown111',\n        age: 32,\n        address: 'New York No. 1 Lake Park',\n        telphone: 67128342,\n        email: 'John@meituan.com',\n      },\n      {\n        key: '22',\n        name: 'John Brown112',\n        age: 32,\n        address: 'New York No. 1 Lake Park',\n        telphone: 67128342,\n        email: 'John@meituan.com',\n      },\n      {\n        key: '23',\n        name: 'John Brown113',\n        age: 32,\n        address: 'New York No. 1 Lake Park',\n        telphone: 67128342,\n        email: 'John@meituan.com',\n      },\n    ],\n  },\n  {\n    key: '3',\n    name: 'Joe Black',\n    age: 32,\n    address: 'Sidney No. 1 Lake Park',\n    telphone: 15213451223,\n    email: 'Joe@meituan.com',\n  },\n];\n\nReactDOM.render(\n  <Table\n    resizable\n    useSticky\n    data={data}\n    rowKey=\"key\"\n    selectOnClickRow\n    expandOnClickRow\n    rowSelection={{\n      parentSelectable: false,\n      selectStrictly: false,\n      selectStrategy: 'all',\n      // defaultSelectedKeys: ['11'],\n      getCheckboxProps: function (row, index) {\n        return {\n          disabled: +row.key === 12,\n        };\n      },\n    }}\n    rowExpansion={{\n      childrenKey: 'children',\n    }}\n    onExpandChange={(expandedKeys, expandedRows) => {\n      console.log(expandedKeys, expandedRows);\n    }}\n    onRowClick={row => console.log(row)}\n  >\n    <Table.Column dataKey=\"name\">姓名</Table.Column>\n    <Table.Column dataKey=\"age\">年龄</Table.Column>\n    <Table.Column dataKey=\"address\">地址</Table.Column>\n    <Table.Column dataKey=\"telphone\">电话</Table.Column>\n    <Table.Column dataKey=\"email\">邮箱</Table.Column>\n  </Table>,\n  mountNode\n);\n```\n",
      "---\norder: 8\ntitle: 可展开\ncols: 1\n# noPreview: true\n---\n\n当表格内容比较多，不能一次性完全展示时，可以用展开的方式来做\n\n```jsx\nimport  { useState } from 'react';\nimport { Table } from '@ss/mtd-react';\n\nconst data = [];\nfor (let i = 1; i < 5; i++) {\n  data.push({\n    key: i,\n    name: 'John Brown ' + i,\n    age: 32,\n    mail: 'John' + i + '@example.com',\n    memo: 'John Brown ' + i + ' is a very beautiful boy !',\n    address: 'New York No. ' + i + 'Lake Park',\n    work: '恒电大厦B座2层',\n    telphone: 67128342,\n  });\n}\n\nconst TableDemo = () => {\n  const [expandedKeys, setExpandedKeys] = useState([1, 3]);\n\n  const renderExpand = row => {\n    return (\n      <ul className=\"expand-detail\">\n        <li>\n          <span className=\"label\">个人介绍</span>\n          <span className=\"info\">{row.memo}</span>\n        </li>\n        <li>\n          <span className=\"label\">家庭住址</span>\n          <span className=\"info\">{row.address}</span>\n        </li>\n        <li>\n          <span className=\"label\">工作地址</span>\n          <span className=\"info\">{row.work}</span>\n        </li>\n        <li>\n          <span className=\"label\">联系方式</span>\n          <span className=\"info\">{row.telphone}</span>\n        </li>\n      </ul>\n    );\n  };\n\n  return (\n    <Table\n      resizable\n      useSticky\n      rowKey=\"key\"\n      bordered=\"row\"\n      rowExpansion={{\n        render: (row, index) => renderExpand(row, index),\n        expandedKeys,\n      }}\n      onRowClick={() => console.log('click')}\n      onExpandChange={setExpandedKeys}\n      data={data}\n    >\n      <Table.Column dataKey=\"name\">姓名</Table.Column>\n      <Table.Column dataKey=\"age\">年龄</Table.Column>\n      <Table.Column dataKey=\"mail\">邮箱</Table.Column>\n    </Table>\n  );\n};\n\nReactDOM.render(<TableDemo />, mountNode);\n```\n\n```css\n.expand-detail li {\n  width: 50%;\n  display: inline-block;\n  padding: 15px 0 15px 30px;\n}\n.expand-detail .label {\n  color: #99a9bf;\n  margin-right: 20px;\n}\n.mtd-table-row-render {\n  background-color: #fafafa;\n}\n```\n",
      "---\norder: 15\ntitle: 自定义展开收起\ncols: 1\n# noPreview: true\n---\n\n可展开表格中，可通过 disabledExpandKey属性，设置是否允许展开\n\n````jsx\nimport { Table } from \"@ss/mtd-react\";\n\nconst data = [\n  {\n    key: '1',\n    name: 'John Brown',\n    age: 32,\n    address: 'New York No. 1 Lake Park',\n    telphone: 67128342,\n    email: 'John@meituan.com',\n    children: [\n      {\n        key: '11',\n        name: 'John Brown11',\n        age: 32,\n        address: 'New York No. 1 Lake Park',\n        telphone: 67128342,\n        email: 'John@meituan.com',\n        children: [\n          {\n            key: '113',\n            name: 'John Brown113',\n            age: 32,\n            address: 'New York No. 1 Lake Park',\n            telphone: 67128342,\n            limitExpand: true,\n            email: 'John@meituan.com',\n            children: [\n              {\n                key: '1131',\n                name: 'John Brown111',\n                age: 32,\n                address: 'New York No. 1 Lake Park',\n                telphone: 67128342,\n                email: 'John@meituan.com',\n              },\n              {\n                key: '1132',\n                name: 'John Brown112',\n                age: 32,\n                address: 'New York No. 1 Lake Park',\n                telphone: 67128342,\n                email: 'John@meituan.com',\n              },\n              {\n                key: '1133',\n                name: 'John Brown113',\n                age: 32,\n                address: 'New York No. 1 Lake Park',\n                telphone: 67128342,\n                email: 'John@meituan.com',\n              },\n            ],\n          },\n        ],\n      },\n      {\n        key: '12',\n        name: 'John Brown12',\n        age: 32,\n        address: 'New York No. 1 Lake Park',\n        telphone: 67128342,\n        email: 'John@meituan.com',\n      },\n      {\n        key: '13',\n        name: 'John Brown13',\n        age: 32,\n        address: 'New York No. 1 Lake Park',\n        telphone: 67128342,\n        email: 'John@meituan.com',\n      },\n    ],\n  },\n  {\n    key: '2',\n    name: 'Jim Green',\n    age: 42,\n    address: 'London No. 1 Lake Park',\n    telphone: 18221993345,\n    email: 'Jim@meituan.com',\n    limitExpand: true,\n    children: [\n      {\n        key: '21',\n        name: 'John Brown111',\n        age: 32,\n        address: 'New York No. 1 Lake Park',\n        telphone: 67128342,\n        email: 'John@meituan.com',\n      },\n      {\n        key: '22',\n        name: 'John Brown112',\n        age: 32,\n        address: 'New York No. 1 Lake Park',\n        telphone: 67128342,\n        email: 'John@meituan.com',\n      },\n      {\n        key: '23',\n        name: 'John Brown113',\n        age: 32,\n        address: 'New York No. 1 Lake Park',\n        telphone: 67128342,\n        email: 'John@meituan.com',\n      },\n    ],\n  },\n  {\n    key: '3',\n    name: 'Joe Black',\n    age: 32,\n    address: 'Sidney No. 1 Lake Park',\n    telphone: 15213451223,\n    email: 'Joe@meituan.com',\n  },\n];\n\nconst TableDemo = () => {\n  return (\n     <Table\n    resizable\n    useSticky\n    data={data}\n    rowKey=\"key\"\n    selectOnClickRow\n    expandOnClickRow\n    rowSelection={{\n      parentSelectable: false,\n      selectStrictly: false,\n      selectStrategy: 'all',\n      // defaultSelectedKeys: ['11'],\n      getCheckboxProps: function (row, index) {\n        return {\n          disabled: +row.key === 12,\n        };\n      },\n    }}\n    rowExpansion={{\n      childrenKey: 'children',\n      disabledExpandKey:'limitExpand'\n    }}\n    onExpandChange={(expandedKeys, expandedRows) => {\n      console.log(expandedKeys, expandedRows);\n    }}\n    onRowClick={row => console.log(row)}\n  >\n    <Table.Column dataKey=\"name\">姓名</Table.Column>\n    <Table.Column dataKey=\"age\">年龄</Table.Column>\n    <Table.Column dataKey=\"address\">地址</Table.Column>\n    <Table.Column dataKey=\"telphone\">电话</Table.Column>\n    <Table.Column dataKey=\"email\">邮箱</Table.Column>\n  </Table>\n  )\n}\n\nReactDOM.render(<TableDemo />, mountNode);\n````\n",
      "---\norder: 14\ntitle: useSticky属性支持动态行高\ncols: 1\n# noPreview: true\n---\n\n使用 useSticky 固定时，可支持固定列与非固定列高度动态变化\n\n```jsx\nimport { useState } from 'react';\nimport { Table, Button } from '@ss/mtd-react';\n\nconst data = [];\nfor (let i = 1; i < 50; i++) {\n  data.push({\n    id: i,\n    date: '2016-05-0' + i,\n    name: '王小虎',\n    province: '上海',\n    city: '普陀区',\n    address:\n      i > 3\n        ? '上海市普陀区金沙江路 1518 弄'\n        : '上海市普陀区金沙江路 1518 弄上海市普陀区金沙江路 1518 弄上海市普陀区金沙江路 1518 弄',\n    zip: 200333,\n  });\n}\ndata[1].date = '2016-05-01';\ndata[3].date = '2016-05-03';\n\nlet dateRowSpans = [],\n  count = 0;\nfor (var i = 0; i < data.length; i++) {\n  count = 0;\n  for (var j = 0; j < data.length; j++) {\n    if (data[i]['date'] == data[j]['date']) {\n      count++;\n    }\n  }\n  if (count > 1 && i > 0 && data[i - 1]['date'] == data[i]['date']) {\n    count = 0;\n  }\n  dateRowSpans.push(count);\n}\n\nconst TableDemo = () => {\n  return (\n    <Table\n      resizable\n      rowKey=\"id\"\n      bordered=\"cell\"\n      useSticky={true}\n      scroll={{ x: 1000, y: 500 }}\n      onRowClick={row => console.log(row)}\n      data={data}\n    >\n      <Table.Column dataKey=\"date\" fixed=\"left\" width=\"150\">\n        日期\n      </Table.Column>\n      <Table.ColumnGroup dataKey=\"name1\" label=\"配送信息\">\n        <Table.Column\n          dataKey=\"name\"\n          render={(value, row, column, { index }) => {\n            if (index == 2) {\n              return {\n                children: value,\n                props: {\n                  colSpan: 1,\n                  rowSpan: 2,\n                },\n              };\n            }\n            if (index == 3) {\n              return {\n                children: value,\n                props: {\n                  colSpan: 1,\n                  rowSpan: 0,\n                },\n              };\n            }\n            return {\n              children: value,\n            };\n          }}\n        >\n          姓名\n        </Table.Column>\n        <Table.ColumnGroup dataKey=\"name2\" label=\"地址\">\n          <Table.Column\n            dataKey=\"province\"\n            render={(value, row, column, { index }) => {\n              return {\n                children: value,\n                props: {\n                  colSpan: index === 0 ? 2 : 1,\n                  rowSpan: 1,\n                },\n              };\n            }}\n          >\n            省份\n          </Table.Column>\n          <Table.Column\n            dataKey=\"city\"\n            render={(value, row, column, { index }) => {\n              return {\n                children: value,\n                props: {\n                  colSpan: index === 0 ? 0 : 1,\n                  rowSpan: 1,\n                },\n              };\n            }}\n          >\n            市区\n          </Table.Column>\n        </Table.ColumnGroup>\n      </Table.ColumnGroup>\n      <Table.Column\n        dataKey=\"address\"\n        fixed=\"right\"\n        width=\"270\"\n        render={value => <ExpandDemo message={value} length={17} />}\n      >\n        详细地址\n      </Table.Column>\n    </Table>\n  );\n};\n\nconst ExpandDemo = props => {\n  const { message, length } = props;\n  const [isExpend, setIsExpend] = useState(false);\n\n  return (\n    <div>\n      {message.length > length ? (\n        <span>\n          {!isExpend ? `${message.slice(0, length)}...` : message}\n          <Button style={{ float: 'right' }} type=\"primary\" shape=\"text\" onClick={() => setIsExpend(!isExpend)}>\n            {isExpend ? '收起' : '展开'}\n          </Button>\n        </span>\n      ) : (\n        <span>{message}</span>\n      )}\n    </div>\n  );\n};\n\nReactDOM.render(<TableDemo />, mountNode);\n```\n",
      "---\norder: 1\ntitle: 大小\ncols: 1\n# noPreview: true\n---\n\n根据场景选择，在一些小区域内如弹窗和卡片内用小号表格。\n\n\n````jsx\nimport { Table } from \"@ss/mtd-react\";\n\nconst data = [];\nfor(let i = 0; i < 4; i++) {\n  data.push({\n    key: i,\n    name: 'Jhon Black ' + i,\n    age: 26,\n    address: '恒电大厦B座2层',\n    email: 'John@meituan.com'\n  });\n}\n\nconst Demo = () => {\n  return (\n    <div>\n      <p>小号</p>\n      <Table resizable useSticky rowKey=\"key\" data={data} size=\"small\">\n        <Table.Column dataKey=\"name\" render={\n          (text) => <a>{text}</a>\n        }>姓名</Table.Column>\n        <Table.Column dataKey=\"age\">年龄</Table.Column>\n        <Table.Column dataKey=\"address\">地址</Table.Column>\n        <Table.Column dataKey=\"email\">邮箱</Table.Column>\n      </Table>\n      <p>默认</p>\n      <Table resizable useSticky rowKey=\"key\" data={data}>\n        <Table.Column dataKey=\"name\" render={\n          (text) => <a>{text}</a>\n        }>姓名</Table.Column>\n        <Table.Column dataKey=\"age\">年龄</Table.Column>\n        <Table.Column dataKey=\"address\">地址</Table.Column>\n        <Table.Column dataKey=\"email\">邮箱</Table.Column>\n      </Table>\n      <p>大号</p>\n      <Table resizable useSticky rowKey=\"key\" data={data} size=\"large\">\n        <Table.Column dataKey=\"name\" render={\n          (text) => <a>{text}</a>\n        }>姓名</Table.Column>\n        <Table.Column dataKey=\"age\">年龄</Table.Column>\n        <Table.Column dataKey=\"address\">地址</Table.Column>\n        <Table.Column dataKey=\"email\">邮箱</Table.Column>\n      </Table>\n    </div>\n  )\n};\n\nReactDOM.render(<Demo />, mountNode);\n````\n",
      "---\norder: 5\ntitle: 选择自定义\ncols: 1\n# noPreview: true\n---\n\n选择区域做操作自定义，选中的记录能够显示不同的样式\n\nTODO 行自定义样式需要补充后添加\n````jsx\nimport  { useState, useEffect, useRef } from 'react';\nimport { Table, Icon, PopLayer, Button} from \"@ss/mtd-react\";\n\nconst data = [];\nfor(let i = 0; i < 10; i++) {\n  data.push({\n    id: i,\n    name: 'Jhon Black ' + i,\n    age: 26,\n    address: '恒电大厦B座2层'\n  });\n}\n\nconst Demo = (props) => {\n  const [showSelection, setShowSelection] = useState(false);\n  const [selectedKeys, setSelectedKeys] = useState([]);\n  const target2 = useRef(null);\n  const btnRef2 = useRef(null);\n  const containerRef2 = useRef(null);\n  const showSelectionRef = useRef(null);\n  const handleToggleShowSelection = () => {\n    setShowSelection(!showSelection);\n  };\n  const handleSelectAll = () => {\n    let selectedKeys = [];\n    data.forEach(function(row){\n      selectedKeys.push(row['id']);\n    });\n    setSelectedKeys(selectedKeys)\n    setShowSelection(false);\n  };\n  const handleSelectOdd = () => {\n    let selectedKeys = [];\n    data.forEach(function(row, index) {\n      if(index%2 == 0){\n        selectedKeys.push(row['id']);\n      }\n    });\n    setSelectedKeys(selectedKeys)\n    setShowSelection(false);\n  };\n  const handleSelectEven = () => {\n    let selectedKeys = [];\n    data.forEach(function(row, index){\n      if(index%2 == 1){\n        selectedKeys.push(row['id']);\n      }\n    });\n    setSelectedKeys(selectedKeys)\n    setShowSelection(false);\n  };\n  const handleSelectChange = (selectedKeys) => {\n    setSelectedKeys(selectedKeys);\n  };\n  const handleClick = (e) => {\n    const popupDOM = ReactDOM.findDOMNode(btnRef2.current);\n    if (!showSelectionRef.current || !popupDOM) return;\n    if ([containerRef2.current, popupDOM].every(v => !v || !v.contains(e.target))) {\n      setShowSelection(false);\n    }\n  };\n  useEffect(() => {\n    target2.current = btnRef2.current;\n    addEventListener('click', handleClick, true);\n    return () => {\n      removeEventListener('click', handleClick);\n    }\n  }, []);\n  useEffect(() => {\n    showSelectionRef.current = showSelection;\n  }, [showSelection]);\n  return (\n    <Table resizable useSticky rowKey=\"id\"\n      rowSelection={{ selectedKeys }}\n      onSelectChange={handleSelectChange}\n      rowClassName={(row, index) => {\n        return selectedKeys.find(x => {return x == row['id']}) >= 0\n          ? 'mtd-row-selected' : '';\n      }}\n      data={data}\n    >\n      <Table.Column style={{paddingLeft: '0px', width: '10px', paddingRight: '0px'}}>\n        <Button shape=\"text\" icon=\"down\" ref={btnRef2}\n          onClick={handleToggleShowSelection} />\n        {showSelection ? (\n          <PopLayer\n            getTargetElement={() => ReactDOM.findDOMNode(target2.current)}\n            align={{points: ['tc', 'bc']}}>\n            <ul className=\"more-select\" ref={containerRef2}>\n              <li><Button shape=\"text\" onClick={handleSelectAll}>选择全部</Button></li>\n              <li><Button shape=\"text\" onClick={handleSelectOdd}>选择奇数行</Button></li>\n              <li><Button shape=\"text\" onClick={handleSelectEven}>选择偶数行</Button></li>\n            </ul>\n          </PopLayer>\n        ) : \"\"}\n      </Table.Column>\n      <Table.Column dataKey=\"name\" render={(text, row) => row['name']}>\n        姓名\n      </Table.Column>\n      <Table.Column dataKey=\"age\">年龄</Table.Column>\n      <Table.Column dataKey=\"address\">地址</Table.Column>\n    </Table>\n  )\n};\n\nReactDOM.render(<Demo />, mountNode);\n\n````\n\n```css\n.more-select {\n  box-shadow: 0 2px 8px rgba(0,0,0,.15);\n  border-radius: 4px;\n  padding: 5px 0;\n  background: #fff;\n}\n.more-select li {\n  padding: 5px 12px;\n}\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/list",
    "content": [
      "---\norder: 3\ntitle: 加载更多\n---\n可通过点击加载更多数据。\n\n````jsx\nimport { useState } from 'react';\nimport { List, Icon, Button } from '@ss/mtd-react';\n\nconst data = [];\nfor (let i = 1; i < 5; i++) {\n  data.push({\n    id: i,\n    department: '企业产品设计中心-基础研发产品设计组',\n  });\n}\n\n\nconst Demo = () => {\n  const [loading, setLoading] = useState(false);\n\n  const onMoreLoading = () => {\n    setLoading(true);\n    setTimeout(() => {\n      data.push({\n        id: new Date().getTime(),\n        department: '企业产品设计中心-基础研发产品设计组 new',\n      });\n      setLoading(false);\n    }, 2000);\n  }\n\n  return (\n    <List\n      loadMore={\n        <Button loading={loading} className=\"demo-loadMore\" type=\"primary\" shape=\"text\"  onClick={onMoreLoading} >\n          {loading ? '加载中...' : '加载更多'}\n        </Button>\n      }\n    >\n      {data.map(item => (\n        <List.Item key={item.id}>{item.department}</List.Item>\n      ))}\n    </List>\n  );\n}\n\nReactDOM.render(<Demo />, mountNode);\n````\n```css\n.demo-loadMore{\n  display: block;\n  margin: auto;\n}\n```",
      "---\norder: 1\ntitle: 基本样式\n---\n\n````jsx\nimport { List, Icon } from '@ss/mtd-react';\nimport Img from './avatar.png'\n\nconst data = [];\nfor (let i = 1; i < 4; i++) {\n  data.push({\n    id: i,\n    date: '2018.02.45',\n    name: 'li01',\n    department: '企业产品设计中心-基础研发产品设计组',\n  });\n}\nfunction Demo() {\n  return (\n    <List header=\"列表头部\" footer=\"列表底部\">\n      {data.map(item => (\n        <List.Item key={item.id}>\n          <div className=\"demo-content\">\n            <img src={Img} className=\"demo-content-avatar\" />\n            <div className=\"demo-content-main\">\n              <div className=\"demo-content-title\">{item.name}</div>\n              <div className=\"demo-content-description\">{item.department}</div>\n            </div>\n            <div className=\"demo-extra\">{item.date}</div>\n          </div>\n        </List.Item>\n      ))}\n    </List>\n  );\n}\n\nReactDOM.render(<Demo />, mountNode);\n````\n```css\n.mtd-list {\n  text-align: left;\n}\n.demo-content {\n  display: flex;\n}\n.demo-content-avatar {\n  width: 30px;\n  height: 30px;\n  background: #a1b4ce;\n  border-radius: 50%;\n}\n.demo-content-title {\n  font-weight:500;\n  color: #464646;\n}\n.demo-content-description {\n  font-size: 12px;\n  color: #ADADAD;\n}\n.demo-content-main {\n  flex: 1 0;\n  margin-left: 16px;\n}\n.demo-extra {\n  font-size: 12px;\n  color: #ADADAD;\n}\n```",
      "---\norder: 2\ntitle: 大小\n---\n根据场景空间选择组件大小，常规可选用中号行高。在较为局限的空间内，如弹窗和卡片等可选用小号行高。\n\n````jsx\nimport { List } from '@ss/mtd-react';\n\nconst data = [];\nfor (let i = 1; i < 4; i++) {\n  data.push({\n    id: i,\n    name: '企业产品设计中心-基础研发产品设计组',\n  });\n}\nfunction Demo() {\n  return (\n    <div className=\"list-demo\">\n      <p>小号</p>\n      <List size=\"small\">\n        {data.map(item => (\n          <List.Item key={item.id}>{item.name}</List.Item>\n        ))}\n      </List>\n      <p>中号</p>\n      <List size=\"normal\">\n        {data.map(item => (\n          <List.Item key={item.id}>{item.name}</List.Item>\n        ))}\n      </List>\n      <p>大号</p>\n      <List size=\"large\">\n        {data.map(item => (\n          <List.Item key={item.id}>{item.name}</List.Item>\n        ))}\n      </List>\n    </div>\n  );\n}\n\nReactDOM.render(<Demo />, mountNode);\n````\n```css\n.list-demo{\n  text-align: center;\n}\n```"
    ]
  },
  {
    "url": "/mtd/react/components/menu",
    "content": [
      "---\norder: 0\ntitle: 水平菜单\n---\n\n水平菜单基本使用，包含了选中`MenuItem`时调用的回调函数`onSelectChange`。\n\n```jsx\nimport { Menu, Icon } from '@ss/mtd-react';\n\nconst SubMenu = Menu.SubMenu;\nconst MenuItem = Menu.Item;\n\nconst MenuDemo = () => {\n  const handleSelect = (key, item, event) => {\n    console.log(`onSelectChange - Key：${key}`);\n  };\n\n  return (\n    <Menu mode=\"horizontal\" onSelectChange={handleSelect} >\n        <SubMenu key=\"SubMenu1\" label={<span><Icon type=\"home-o\"></Icon>一级菜单</span>}>\n          <MenuItem disabled key=\"MenuItem1-1\">二级菜单-1</MenuItem>\n          <MenuItem key=\"MenuItem1-2\">二级菜单-2</MenuItem>\n        </SubMenu>\n        <SubMenu key=\"SubMenu2\" label={<span><Icon type=\"cart-o\"></Icon>一级菜单</span>}>\n          <MenuItem key=\"MenuItem2-1\">二级菜单-1</MenuItem>\n          <MenuItem key=\"MenuItem2-2\">二级菜单-2</MenuItem>\n          <SubMenu key=\"SubMenu2-3\" label=\"二级菜单-3\">\n            <MenuItem key=\"MenuItem2-3-1\">三级菜单-1</MenuItem>\n            <MenuItem key=\"MenuItem2-3-2\">三级菜单-2</MenuItem>\n          </SubMenu>\n        </SubMenu>\n        <MenuItem key=\"MenuItem3\"><span><Icon type=\"calendar-o\"></Icon>一级菜单</span></MenuItem>\n      </Menu>\n  );\n};\n\nReactDOM.render(<MenuDemo />, mountNode);\n```",
      "---\norder: 5\ntitle: 菜单受控\n---\n\n非`defaultExpandedKeys`方式，使用 `expandedKeys` 和 `onExpandChange` 受控方式来控制菜单展开收起\n\n```jsx\nimport { useState } from 'react';\nimport { Menu, Icon } from \"@ss/mtd-react\";\nconst SubMenu = Menu.SubMenu;\nconst MenuItem = Menu.Item;\n\nconst MenuDemo = () => {\n  const [expandedKeys, setExpandedKeys] = useState(['SubMenu1']);\n\n  const handleSelect = (key, item, event) => {\n    console.log(`onSelectChange - Key：${key}`);\n  }\n\n  const handleExpandChange = expandedKeys => {\n    setExpandedKeys(expandedKeys)\n  }\n\n  const onTitleClick = (key, event) => {\n    console.log('onTitleClick:', key);\n  }\n\n  return (\n    <Menu\n      className=\"menu-basic-inline-controlled\"\n      expandedKeys={expandedKeys}\n      onExpandChange={handleExpandChange}\n      onSelectChange={handleSelect}\n    >\n      <SubMenu key=\"SubMenu1\" label={<span><Icon type=\"home-o\"></Icon>一级菜单</span>} onTitleClick={onTitleClick}>\n        <MenuItem key=\"MenuItem1-1\">二级菜单-1</MenuItem>\n        <MenuItem key=\"MenuItem1-2\">二级菜单-2</MenuItem>\n      </SubMenu>\n      <SubMenu key=\"SubMenu2\" label={<span><Icon type=\"cart-o\"></Icon>一级菜单</span>}>\n        <MenuItem key=\"MenuItem2-1\">二级菜单-1</MenuItem>\n        <MenuItem key=\"MenuItem2-2\">二级菜单-2</MenuItem>\n        <SubMenu key=\"SubMenu2-3\" label=\"二级菜单-3\">\n          <MenuItem key=\"MenuItem2-3-1\">三级菜单-1</MenuItem>\n          <MenuItem key=\"MenuItem2-3-2\">三级菜单-2</MenuItem>\n        </SubMenu>\n      </SubMenu>\n      <SubMenu key=\"SubMenu3\" disabled label=\"disabled 一级菜单\">\n        <MenuItem key=\"MenuItem3-1\">二级菜单-1</MenuItem>\n        <MenuItem key=\"MenuItem3-2\">二级菜单-2</MenuItem>\n      </SubMenu>\n      <MenuItem key=\"MenuItem4\">一级菜单</MenuItem>\n    </Menu>\n  );\n}\nReactDOM.render(<MenuDemo />, mount);\n```\n\n```css\n.menu-basic-inline-controlled {\n  width: 200px;\n}\n```",
      "---\norder: 1\ntitle: 内联菜单\n---\n\n内联菜单基本使用，包含了菜单展开回调事件`onExpandChange`，子菜单禁用`disabled`属性的demo。\n\n```jsx\nimport { Menu, Icon } from \"@ss/mtd-react\";\nconst SubMenu = Menu.SubMenu;\nconst MenuItem = Menu.Item;\n\nconst MenuDemo = () => {\n  const handleSelect = (key, item, event) => {\n    console.log('onSelectChange', key, item, event);\n  }\n  const handleExpandChange = extendKeys => {\n    console.log('onExpendChange:', extendKeys);\n  }\n  const onTitleClick = (key, event) => {\n    console.log('onTitleClick:', key);\n  }\n  return (\n    <Menu\n      className=\"menu-basic-inline\"\n      defaultExpandedKeys={['SubMenu1']}\n      onExpandChange={handleExpandChange}\n      onSelectChange={handleSelect}\n    >\n      <SubMenu key=\"SubMenu1\" label={<span><Icon type=\"home-o\"></Icon>一级菜单</span>} onTitleClick={onTitleClick}>\n        <MenuItem disabled key=\"MenuItem1-1\">二级菜单-1</MenuItem>\n        <MenuItem key=\"MenuItem1-2\">二级菜单-2</MenuItem>\n      </SubMenu>\n      <SubMenu key=\"SubMenu2\" label={<span><Icon type=\"cart-o\"></Icon>一级菜单</span>}>\n        <MenuItem key=\"MenuItem2-1\">二级菜单-1</MenuItem>\n        <MenuItem key=\"MenuItem2-2\">二级菜单-2</MenuItem>\n        <SubMenu key=\"SubMenu2-3\" label=\"二级菜单-3\">\n          <MenuItem key=\"MenuItem2-3-1\">三级菜单-1</MenuItem>\n          <MenuItem key=\"MenuItem2-3-2\">三级菜单-2</MenuItem>\n        </SubMenu>\n      </SubMenu>\n      <SubMenu key=\"SubMenu3\" disabled label={<span><Icon type=\"calendar-o\"></Icon>一级菜单</span>}>\n        <MenuItem key=\"MenuItem3-1\">二级菜单-1</MenuItem>\n        <MenuItem key=\"MenuItem3-2\">二级菜单-2</MenuItem>\n      </SubMenu>\n      <MenuItem key=\"MenuItem4\"><Icon type=\"calendar-o\"></Icon>一级菜单</MenuItem>\n    </Menu>\n  );\n}\nReactDOM.render(<MenuDemo />, mount);\n```\n\n```css\n.menu-basic-inline {\n  width: 200px;\n}\n```",
      "---\norder: 4\ntitle: 折叠&主题菜单\n---\n\nMenu支持主题样式切换，内联模式下菜单可以被折叠/展开。内建了两套主题 `light` | `dark`，默认 `light`。\n\n```jsx\nimport { useState } from 'react';\nimport { Menu, Button, Icon, Switch } from \"@ss/mtd-react\";\nconst SubMenu = Menu.SubMenu;\nconst MenuItem = Menu.Item;\n\nconst MenuDemo = () => {\n    const [collapsed, setCollapsed] = useState(false);\n    const [theme, setTheme] = useState('dark');\n\n  const handleChange = e => {\n    setCollapsed(e.target.checked);\n  };\n  const handleThemeChange = e => {\n    setTheme(e.target.checked ? 'light' : 'dark')\n  };\n  const handleExpandChange = extendKeys => {\n    console.log('onExpendChange:', extendKeys);\n  }\n  const onTitleClick = (key, event) => {\n    console.log('onTitleClick:', key);\n  }\n  const handleSelect = (key, item, event) => {\n    console.log(`onSelectChange - Key：${key}`);\n  }\n  return (\n    <div>\n      <Switch onChange={handleChange} checkedChildren=\"折叠\" unCheckedChildren=\"展开\" />\n      <Switch style={{marginLeft: '20px'}} onChange={handleThemeChange} checkedChildren=\"浅色\" unCheckedChildren=\"深色\" />\n      <Menu\n        className=\"menu-basic-inline\"\n        theme={theme}\n        inlineCollapsed={collapsed}\n        defaultExpandedKeys={['SubMenu-1']}\n        onExpandChange={handleExpandChange}\n        onSelectChange={handleSelect}\n      >\n        <MenuItem key=\"Item-1\">\n          <Icon type=\"home-o\" />\n          <span>一级菜单</span>\n        </MenuItem>\n        <MenuItem key=\"Item-2\">\n          <Icon type=\"customer-o\" />\n          <span>一级菜单</span>\n        </MenuItem>\n        <MenuItem key=\"Item-3\">\n          <Icon type=\"piechart-o\" />\n          <span>一级菜单</span>\n        </MenuItem>\n        <SubMenu\n          key=\"SubMenu-1\"\n          label={\n            <div>\n              <Icon type=\"share-o\" />\n              <span>一级菜单</span>\n            </div>\n          }\n          onTitleClick={onTitleClick}\n        >\n          <MenuItem key=\"Item-5\">二级菜单-1</MenuItem>\n          <MenuItem key=\"Item-6\">二级菜单-2</MenuItem>\n        </SubMenu>\n        <SubMenu\n          key=\"SubMenu-2\"\n          label={\n            <div>\n              <Icon type=\"question-circle-o\" />\n              <span>一级菜单</span>\n            </div>\n          }\n        >\n          <MenuItem key=\"Item-7\">二级菜单-1</MenuItem>\n          <MenuItem key=\"Item-8\">二级菜单-2</MenuItem>\n          <SubMenu key=\"SubMenu-3\" label=\"三级菜单\">\n            <MenuItem key=\"Item-9\">三级菜单-1</MenuItem>\n            <MenuItem key=\"Item-10\">三级菜单-2</MenuItem>\n          </SubMenu>\n        </SubMenu>\n      </Menu>\n    </div>\n  );\n}\nReactDOM.render(<MenuDemo />, mount);\n```\n\n```css\n.menu-basic-inline {\n  width: 200px;\n  margin-top: 20px;\n}\n```\n",
      "---\norder: 2\ntitle: 垂直菜单\n# noPreview: true\n---\n\n垂直菜单基本使用，包含了选中`MenuItem`时调用的回调函数`onSelectChange`。\n\n```jsx\nimport { Menu, Icon } from \"@ss/mtd-react\";\nconst SubMenu = Menu.SubMenu;\nconst MenuItem = Menu.Item;\n\nconst MenuDemo = () =>{\n  const handleSelect = (key, item, event) => {\n    console.log(`onSelectChange - Key：${key}`);\n  }\n\n  return (\n    <Menu className=\"menu-basic-vertical\" mode=\"vertical\" onSelectChange={handleSelect}>\n      <SubMenu key=\"SubMenu1\" label={<span><Icon type=\"home-o\"></Icon>一级菜单</span>}>\n          <MenuItem disabled key=\"MenuItem1-1\">二级菜单-1</MenuItem>\n          <MenuItem key=\"MenuItem1-2\">二级菜单-2</MenuItem>\n        </SubMenu>\n        <SubMenu key=\"SubMenu2\" label={<span><Icon type=\"cart-o\"></Icon>一级菜单</span>}>\n          <MenuItem key=\"MenuItem2-1\">二级菜单-1</MenuItem>\n          <MenuItem key=\"MenuItem2-2\">二级菜单-2</MenuItem>\n          <SubMenu key=\"SubMenu2-3\" label=\"二级菜单-3\">\n            <MenuItem key=\"MenuItem2-3-1\">三级菜单-1</MenuItem>\n            <MenuItem key=\"MenuItem2-3-2\">三级菜单-2</MenuItem>\n          </SubMenu>\n        </SubMenu>\n        <MenuItem key=\"MenuItem3\"><><Icon type=\"calendar-o\"></Icon>一级菜单</></MenuItem>\n    </Menu>\n  );\n}\nReactDOM.render(<MenuDemo />, mountNode);\n```\n\n```css\n.menu-basic-vertical {\n  width: 200px;\n}\n```",
      "---\norder: 3\ntitle: 分组菜单\n# noPreview: true\n---\n\n菜单分组，包含子菜单的禁用demo。\n\n```jsx\nimport { Menu } from \"@ss/mtd-react\";\nconst MenuItemGroup = Menu.ItemGroup;\nconst MenuItem = Menu.Item;\n\nconst MenuDemo = () => {\n  const handleSelect = (key, item, event) => {\n    console.log(`onSelectChange - Key：${key}`);\n  }\n  return (\n    <Menu className=\"menu-basic-group\" onSelectChange={handleSelect}>\n      <MenuItemGroup label=\"组一\">\n        <MenuItem disabled key=\"MenuItem1-1\">一组菜单-1</MenuItem>\n        <MenuItem key=\"MenuItem1-2\">\n          <span className=\"Cusotm-MenuItem\">一组菜单-2</span>\n        </MenuItem>\n        <MenuItem key=\"MenuItem1-3\">一组菜单-3</MenuItem>\n      </MenuItemGroup>\n      <MenuItemGroup label=\"组二\">\n        <MenuItem key=\"MenuItem2-1\">二组菜单-1</MenuItem>\n        <MenuItem key=\"MenuItem2-2\">二组菜单-2</MenuItem>\n      </MenuItemGroup>\n    </Menu>\n  );\n}\nReactDOM.render(<MenuDemo />, mount);\n```\n\n```css\n.menu-basic-group {\n  width: 200px;\n}\n```",
      "---\norder: 6\ntitle: 侧边栏\n---\n\n```jsx\nimport { useState, useEffect } from 'react';\nimport { Menu, Icon, Button, Container } from '@ss/mtd-react';\nimport { BrowserRouter, NavLink, Route, Switch } from 'react-router-dom';\n\nconst { Aside, Main } = Container;\nconst SubMenu = Menu.SubMenu;\nconst MenuItem = Menu.Item;\n\nconst MenuDemo = () => {\n  const [collapsed, setCollapsed] = useState(false);\n  const [menuSelectedKey, setMenuSelectedKey] = useState('menu1-1');\n  const [foldBtnIcon, setFoldBtnIcon] = useState('collapse');\n\n  useEffect(() => {\n    const pathname = window.location.pathname;\n    const key = pathname.split('/')[pathname.split('/').length - 1];\n    setMenuSelectedKey(key);\n  }, []);\n\n  const handleMenuSelect = (key, selectedItem, e) => {\n    setMenuSelectedKey(key);\n  };\n\n  const handleFold = () => {\n    setCollapsed(!collapsed);\n    setFoldBtnIcon(foldBtnIcon === 'collapse' ? 'expand' : 'collapse');\n  };\n\n  const renderMain = () => {\n    return (\n      <Switch>\n        <Route key=\"menu1-1\" path=\"/menu1/menu1-1\" render={() => <div>menu1-1</div>} />\n        <Route key=\"menu1-2\" path=\"/menu1/menu1-2\" render={() => <div>menu1-2</div>} />\n        <Route key=\"menu1-3\" path=\"/menu1/menu1-3\" render={() => <div>menu1-3</div>} />\n        <Route key=\"menu2-1\" path=\"/menu2/menu2-1\" render={() => <div>menu2-1</div>} />\n        <Route key=\"menu2-2\" path=\"/menu2/menu2-2\" render={() => <div>menu2-2</div>} />\n        <Route key=\"menu2-3\" path=\"/menu2/menu2-3\" render={() => <div>menu2-3</div>} />\n        <Route key=\"menu3-1\" path=\"/menu3/menu3-1\" render={() => <div>menu3-1</div>} />\n        <Route key=\"menu4-1\" path=\"/menu4/menu4-1\" render={() => <div>menu4-1</div>} />\n      </Switch>\n    );\n  };\n\n  return (\n   <Container>\n    <Aside width={collapsed? '50px': '200px'} className={collapsed ? 'slidebar-aside-fold' : ''}>\n      <div className=\"slidebar-header\">\n        <span className={collapsed ? 'slidebar-aside-title' : ''}>导航标题</span>\n        <Button className=\"slidebar-header-btn\" onClick={handleFold} icon={foldBtnIcon} shape=\"text\" size=\"large\"></Button>\n      </div>\n      <Menu\n        className=\"slidebar-menu\"\n        theme={'light'}\n        inlineCollapsed={collapsed}\n        defaultExpandedKeys={['menu1-1']}\n        onSelectChange={handleMenuSelect}\n        selectedKeys={[menuSelectedKey]}\n      >\n        <SubMenu key=\"menu1\" label={<div><Icon type=\"home-o\" /><span>一级菜单</span></div>}>\n          <MenuItem key=\"menu1-1\">\n            <NavLink to=\"/menu1/menu1-1\" activeClassName=\"menu-selected\">二级菜单</NavLink>\n          </MenuItem>\n          <MenuItem key=\"menu1-2\">\n            <NavLink to=\"/menu1/menu1-2\" activeClassName=\"menu-selected\">二级菜单</NavLink>\n          </MenuItem>\n          <MenuItem key=\"menu1-3\">\n            <NavLink to=\"/menu1/menu1-3\" activeClassName=\"menu-selected\">二级菜单</NavLink>\n          </MenuItem>\n        </SubMenu>\n        <SubMenu key=\"menu2\" label={<div><Icon type=\"time-o\" /><span>一级菜单</span></div>}>\n          <MenuItem key=\"menu2-1\">\n            <NavLink to=\"/menu2/menu2-1\" activeClassName=\"menu-selected\">二级菜单</NavLink>\n          </MenuItem>\n          <MenuItem key=\"menu2-2\">\n            <NavLink to=\"/menu2/menu2-2\" activeClassName=\"menu-selected\">二级菜单</NavLink>\n          </MenuItem>\n          <MenuItem key=\"menu2-3\">\n            <NavLink to=\"/menu2/menu2-3\" activeClassName=\"menu-selected\">二级菜单</NavLink>\n          </MenuItem>\n        </SubMenu>\n        <MenuItem key=\"menu3\">\n          <Icon type=\"cart-o\" />\n          <NavLink to=\"/menu3/menu3-1\" activeClassName=\"menu-selected\">一级菜单</NavLink>\n        </MenuItem>\n        <MenuItem key=\"menu4\">\n          <Icon type=\"barschart-o\" />\n          <NavLink to=\"/menu4/menu4-1\" activeClassName=\"menu-selected\">一级菜单</NavLink>\n        </MenuItem>\n      </Menu>\n    </Aside>\n    <Main>{renderMain()}</Main>\n  </Container>\n  );\n};\n\nReactDOM.render(<BrowserRouter basename=\"/mtd/react/components/\"><MenuDemo /></BrowserRouter>, mount);\n```\n\n```css\n.mtd-main {\n  background-color: #f7f8fc;\n  text-align: center;\n}\n.slidebar-header {\n  display: flex;\n  justify-content: space-between;\n  margin: 20px 16px 0;\n}\n.slidebar-menu {\n  width: 200px;\n  margin-top: 15px;\n}\n.mtd-menu-item a, .mtd-tooltip a {\n  text-decoration: none;\n  color: rgba(0,0,0,.84);\n}\n.mtd-tooltip a {\n  color: #fff;\n}\n.mtd-menu-item a::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n}\n.mtd-menu-item a.menu-selected, .mtd-menu-item:hover a {\n  color: #0a70f5;\n}\n.slidebar-aside-title{\n  display: none;\n}\n.slidebar-aside-fold {\n  transition: all .5s ease;\n}\n```"
    ]
  },
  {
    "url": "/mtd/react/components/switch",
    "content": [
      "---\norder: 5\ntitle: 受控\n---\n\n开发者自己控制是否选中\n\n```jsx\nimport { useState } from 'react';\nimport { Switch, Button } from '@ss/mtd-react';\n\nconst Demo = () => {\n  const [checked, setChecked] = useState(false);\n\n  const handleChange = e => {\n    setChecked(e.target.checked);\n  };\n\n  return (\n    <div>\n      <Switch checked={checked} onChange={handleChange} />\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n```css\n.demos-switch .mtd-switch {\n  margin: 0 10px;\n}\n```\n",
      "---\norder: 4\ntitle: 文字\n---\n\n带有文字和图标\n\n```jsx\nimport { Switch, Icon } from '@ss/mtd-react';\n\nReactDOM.render(\n  <div>\n    <Switch checkedChildren=\"开启\" unCheckedChildren=\"关闭\" />\n    <Switch checkedChildren=\"1\" unCheckedChildren=\"0\" />\n    <Switch\n      checkedChildren={<Icon type=\"check-thick\" />}\n      unCheckedChildren={<Icon type=\"close-thick\" />}\n    />\n  </div>,\n  mountNode\n);\n```\n",
      "---\norder: 3\ntitle: 加载\n---\n\n支持加载中状态\n\n```jsx\nimport { Switch } from '@ss/mtd-react';\n\nReactDOM.render(\n  <div>\n    <Switch loading checked />\n    <Switch loading />\n  </div>,\n  mountNode\n);\n```\n",
      "---\norder: 2\ntitle: 大小\n---\n\n支持 small normal\n\n```jsx\nimport { Switch } from '@ss/mtd-react';\n\nReactDOM.render(\n  <div>\n    <Switch />\n    <Switch size=\"small\" />\n  </div>,\n  mountNode\n);\n```\n",
      "---\norder: 1\ntitle: 禁用\n---\n\n可禁用\n\n```jsx\nimport { Switch } from '@ss/mtd-react';\n\nReactDOM.render(<Switch disabled />, mountNode);\n```\n",
      "---\norder: 0\ntitle: 基本使用\n---\n\n基本使用。\n\n```jsx\nimport { Switch } from '@ss/mtd-react';\nReactDOM.render(<Switch onChange={e => console.log(e.target.checked)} />, mountNode);\n```\n\n```css\n.demos-switch .mtd-switch {\n  margin: 0 10px;\n}\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/filelist",
    "content": [
      "---\norder: 0\ntitle: 基础用法\n---\n\n选择文件，通过手动触发上传按钮上传文件，适合批量上传文件。\n\n```jsx\nimport { useState } from 'react';\nimport { Upload, Filelist, Button } from '@ss/mtd-react';\n\nconst DEFAULT_LIST = [\n      {\n        name: 'food.jpg', \n        url: 'https://fuss10.elemecdn.com/3/63/4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2/thumbnail/360x360/format/webp/quality/100'\n      }\n    ]\nconst FileListDemo = () => {\n  const [loading, setLoading] = useState(false);\n  const [list, setList] = useState(DEFAULT_LIST);\n\n  const onUpload = (files) => {\n    setLoading(true);\n  }\n\n  const onSuccess = (res, file) => {\n    res.name = file.name;\n    setList([...setList,res]);\n    setLoading(false);\n  }\n\n  const onRemove = (index) => {\n    console.log('onRemove', index)\n  }\n\n  return (\n    <>\n      <Upload\n        action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\n        onBeforeUpload={onBeforeUpload}\n        onUpload={onUpload}\n        onError={onError}\n        onSuccess={onSuccess}\n      >\n        <Button icon=\"export-o\" loading={loading}>{loading ? '上传中...': '上传文件'}</Button>\n      </Upload>\n      <Filelist>\n        {list.map(item => <Filelist.Item key={item.url} name={item.name} url={item.url} onRemove={onRemove} />)}\n      </Filelist>\n    </>\n  )\n}\n\nReactDOM.render(<FileListDemo />, mountNode);\n"
    ]
  },
  {
    "url": "/mtd/react/components/anchor",
    "content": [
      "---\norder: 1\ntitle: 不固定模式\n---\n\n不固钉锚点，用户自己控制锚点的位置\n\n```jsx\nimport { useState } from 'react';\nimport { Anchor } from '@ss/mtd-react';\n\nconst DEFAULT_ARR = [1, 2, 3, 4];\nconst DEFAULT_LIST = [\n  { title: '位置一', href: '#demo-base-anchor-1' },\n  { title: '位置二', href: '#demo-base-anchor-2' },\n  { title: '位置三', href: '#demo-base-anchor-3' },\n  { title: '位置四', href: '#demo-base-anchor-4' },\n];\n\nconst AnchorDemo = () => {\n  const [arr, setArr] = useState(DEFAULT_ARR);\n  const [linkList, setLinkList] = useState(DEFAULT_LIST);\n\n  const getTarget = () => {\n    return document.querySelector('.anchor-containter');\n  };\n  return (\n    <div className=\"anchor-wrapper\">\n      <ul className=\"anchor-containter\">\n        {arr.map(i => (\n          <li id={`demo-base-anchor-${i}`} key={i}>\n            {`位置${i}`}\n          </li>\n        ))}\n      </ul>\n      <Anchor className=\"anchor-position\" scrollOffset={130} affix={false} getContainer={getTarget}>\n        {linkList.map(i => (\n          <Anchor.Link {...i} key={i.href} />\n        ))}\n      </Anchor>\n    </div>\n  );\n};\n\nReactDOM.render(<AnchorDemo />, mountNode);\n```\n\n```css\n.anchor-wrapper {\n  position: relative;\n}\n.anchor-containter {\n  height: 200px;\n  overflow-y: auto;\n}\n.anchor-containter li {\n  list-style: none;\n  text-align: center;\n  height: 150px;\n}\n.anchor-position {\n  position: absolute;\n  right: 20px;\n  top: 10px;\n  z-index: 11;\n}\n```\n",
      "---\norder: 0\ntitle: 基本用法\n---\n\n锚点是固钉模式，offsetTop可设置Anchor距离窗口顶部的偏移量，scrollOffset可设置锚点滚动到某个位置后额外的滚动距离。\n\n```jsx\nimport { useState } from 'react';\nimport { Anchor } from '@ss/mtd-react';\nconst { Link } = Anchor;\n\nconst DEFAULT_ARR = [1, 2, 3, 4, 5];\nconst  AnchorDemo = ()=> {\n  const [arr, setArr] = useState(DEFAULT_ARR);\n\n  const getTarget = () => {\n    return document.querySelector('.mtd-workspace-content') || document.body;\n  };\n\n  return (\n    <div className=\"anchor-demo-wrap\">\n      <Anchor className=\"demo-fixed-anchor\" offsetTop={50} scrollOffset={30} getContainer={getTarget}>\n        <Link href=\"#demo-fixed-anchor-1\" title=\"位置一\">\n          <Link href=\"#demo-fixed-anchor-2\" title=\"位置二\" />\n          <Link href=\"#demo-fixed-anchor-3\" title=\"位置三\" />\n        </Link>\n        <Link href=\"#demo-fixed-anchor-4\" title=\"位置四\" />\n        <Link href=\"#demo-fixed-anchor-5\" title=\"位置五\" />\n      </Anchor>\n      <ul className=\"content-wrap\" id=\"containerWrap\">\n        {arr.map(i => (\n          <li id={`demo-fixed-anchor-${i}`} key={i}>\n            {`位置${i}`}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nReactDOM.render(<AnchorDemo />, mountNode);\n```\n\n```css\n.anchor-demo-wrap .content-wrap {\n  flex: 1 1 auto;\n}\n.anchor-demo-wrap .content-wrap li {\n  text-align: center;\n  list-style: none;\n  height: 100px;\n}\n.anchor-demo-wrap .title-wrap {\n  width: 200px;\n  height: 400px;\n}\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/select",
    "content": [
      "---\norder: 9\ntitle: 自定义渲染输入框内容\n---\n\n使用场景：选中之后input框的渲染内容\n\n单选使用`renderInputLabel`，多选使用`renderTagLabel`\n\n\n```jsx\nimport { Select } from '@ss/mtd-react';\nimport { useState } from 'react';\n\nconst Option = Select.Option;\n\nconst data = [\n  { value: '001', label: '单号1' },\n  { value: '002', label: '单号2' },\n];\n\nconst SelectDemo = () => {\n  const [value, setValue] = useState(null);\n  const [multipleValue, setMultipleValue] = useState(null);\n\n  const handleChange = value => {\n    setValue(value);\n  };\n\n  const handleMultipleChange = value => {\n    setMultipleValue(value);\n  };\n\n  return (\n    <div className=\"content\">\n      <span>单选:</span>\n      <Select\n        style={{ width: '200px' }}\n        onChange={handleChange}\n        value={value}\n        renderInputLabel={(v) => `${v.value}/${v.label}`}\n      >\n        {data.map((option, index) => (\n          <Option key={index} value={option.value} disabled={option.disabled}>\n            {option.label}\n          </Option>\n        ))}\n      </Select>\n      <br />\n      <span>多选:</span>\n      <Select\n        style={{ width: '200px' }}\n        onChange={handleMultipleChange}\n        value={multipleValue}\n        multiple\n        renderTagLabel={(v) => `${v.value}/${v.label}`}\n      >\n        {data.map((option, index) => (\n          <Option key={index} value={option.value} disabled={option.disabled}>\n            {option.label}\n          </Option>\n        ))}\n      </Select>\n    </div>\n  );\n}\nReactDOM.render(<SelectDemo />, mountNode);\n```",
      "---\norder: 3\ntitle: 搜索\n---\n\n通过`onFilter`监听输入事件自定义搜索内容，通常用于关键字后端搜索，异步搜索时可设置 `loading`并使用 `loadingMessage`改变loading显示文案\n\n```jsx\nimport { Select,Loading } from '@ss/mtd-react';\nimport { useState, useRef } from 'react';\n\nconst getHighlight = (label, keyword) => {\n  const reg = new RegExp(`(${keyword})`,'g')\n  const labelArr = (label || '').replace(reg, '*$1*').split('*').filter(item => item !== '');\n  return labelArr.map(item => {\n    if (item === keyword) {\n      // 处理label\n      return <span style={{ color: 'red' }}>{item}</span>\n    }\n    return item;\n  });\n}\n\nconst Option = Select.Option;\nconst data = [\n  { value: 'libai', label: '李白（701年－762年） ，字太白，号青莲居士，唐代伟大的浪漫主义诗人，被后人誉为“诗仙”，与杜甫并称为“李杜”，杜甫与李白又合称“大李杜”。' },\n  { value: 'lihe', label: '李贺' },\n  { value: 'dufu', label: '杜甫' },\n  { value: 'baijuyi', label: '白居易' },\n  { value: 'quyuan', label: '屈原' },\n];\n\nconst SelectDemo = () => {\n  const [dataSource, setDataSource] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [value, setValue] = useState('');\n  const [filter, setFilter] = useState(null);\n  let timer = useRef();\n\n  const handleChange = (value) => {\n    // 还原label\n    if (value && Array.isArray(value.label)) {\n      value.label = value.label.map(item => {\n        if (typeof item === 'object') return item.props.children;\n        return item;\n      }).join('');\n    }\n    setValue(value);\n  };\n  const handleFilter = filter => {\n    if (!filter) {\n      setFilter(null);\n      return;\n    };\n    setLoading(true);\n    setDataSource([]);\n    clearTimeout(timer.current);\n    timer.current = setTimeout(() => {\n      setDataSource(data);\n      setLoading(false);\n      setFilter(filter);\n    }, 1000);\n  };\n\n  return (\n    <div className=\"content\">\n      <span>搜索关键字:</span>\n      <Select\n        style={{ width: '200px' }}\n        value={value}\n        loading={loading}\n        loadingMessage={() => <Loading />}\n        notFoundMessage={filter ? \"无数据\" : '请输入关键字'}\n        onFilter={handleFilter}\n        onChange={handleChange}\n      >\n        {dataSource.map((option, index) => (\n          <Option key={index} value={option.value}>\n            {option.label}\n          </Option>\n        ))}\n      </Select>\n      <br />\n      <span>高亮搜索关键字:</span>\n      <Select\n        style={{ width: '200px' }}\n        placeholder=\"输入‘李’试试\"\n        value={value}\n        loading={loading}\n        loadingMessage={() => <Loading />}\n        notFoundMessage={filter ? \"无数据\" : '请输入关键字'}\n        onFilter={handleFilter}\n        onChange={handleChange}\n      >\n        {dataSource.map((option, index) => (\n          <Option key={index} value={option.value}>\n            {getHighlight(option.label, filter)}\n          </Option>\n        ))}\n      </Select>\n    </div>\n  );\n}\nReactDOM.render(<SelectDemo />, mountNode);\n```\n",
      "---\norder: 5\ntitle: 分组\n---\n\n使用 `Select.OptionGroup` 设置一级或多级分组\n\n```jsx\nimport { Select } from '@ss/mtd-react';\nimport { useState } from 'react';\n\nconst Group = Select.OptionGroup;\nconst Option = Select.Option;\nconst groups = [\n  {\n    label: '热门城市',\n    disabled: true,\n    options: [{ value: 'Shanghai', label: '上海' }, { value: 'Beijing', label: '北京' }],\n  },\n  {\n    label: '城市名',\n    options: [\n      { value: 'Chengdu', label: '成都' },\n      { value: 'Shenzhen', label: '深圳', disabled: true },\n      { value: 'Guangzhou', label: '广州' },\n      { value: 'Dalian', label: '大连' },\n    ],\n  },\n];\nconst Demo = () => {\n  const [value, setValue] = useState(null);\n\n  const handleChange = (value)=>{\n    console.log('value',value);\n    setValue(value);\n  }\n\n  return (\n    <Select filterable={false} style={{ width: 200, margin: '0 auto' }} onChange={handleChange} value={value}>\n      {groups.map((group, index) => (\n        <Group key={index} label={group.label}>\n          {group.options.map((option, index) => (\n            <Option key={index} value={option.value} disabled={option.disabled}>\n              {option.label}\n            </Option>\n          ))}\n        </Group>\n      ))}\n    </Select>\n  );\n}\nReactDOM.render(<Demo />, mountNode);\n```\n",
      "---\norder: 0\ntitle: 基本用法\n---\n\n基本用法，使用 `Select.Option` 显示可选列表\n使用 `disabled` 设置禁用状态\n\n```jsx\nimport { Select } from '@ss/mtd-react';\nimport { useState } from 'react';\n\nconst Option = Select.Option;\nconst data = [\n  { value: 'libai', label: '李白', otherProp: '其他的参数' },\n  { value: 'lihe', label: '李贺' },\n  { value: 'dufu', label: '杜甫', disabled: true },\n  { value: 'baijuyi', label: '白居易' },\n  { value: 'quyuan', label: '屈原' },\n];\n\nconst Demo = () => {\n  const [value, setValue] = useState('lihe');\n\n  return (\n    <div className=\"content\">\n      <Select\n        style={{ width: '200px' }}\n        onChange={v => setValue(v)}\n        value={value}\n        popLayer={{className: 'pop-class' }}\n        onlyKeyValue\n      >\n        {data.map((option, index) => (\n          // 如果需要获取完整option的数据，请传入originOption\n          <Option key={index} value={option.value} disabled={option.disabled} originOption={option} >\n            {option.label}\n          </Option>\n        ))}\n      </Select>\n      <Select style={{ width: '200px' }} disabled  value={value}>\n        {data.map((option, index) => (\n          <Option key={index} value={option.value} disabled={option.disabled}>\n            {option.label}\n          </Option>\n        ))}\n      </Select>\n    </div>\n  );\n}\nReactDOM.render(<Demo />, mountNode);\n```\n\n```css\n.content {\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n}\n```\n",
      "---\norder: 2\ntitle: 多选\n# noPreview: true\n---\n\n使用`multiple`属性，以支持选择多项。\n\n```jsx\nimport { Select } from '@ss/mtd-react';\nimport { useState } from 'react';\n\nconst Option = Select.Option;\nconst data = [\n  { value: 'Shanghai', label: '上海', disabled: true },\n  { value: 'Beijing', label: '北京' },\n  { value: 'Chengdu', label: '成都' },\n  { value: 'Shenzhen', label: '深圳' },\n  { value: 'Guangzhou', label: '广州' },\n  { value: 'Chongqin', label: '重庆' },\n  { value: 'Xiamen', label: '厦门' },\n  { value: 'Wulumuqi', label: '乌鲁木齐', disabled: true },\n  { value: 'Jiuquan', label: '酒泉' },\n  { value: 'Qingdao', label: '青岛', disabled: true },\n  { value: 'Jinan', label: '济南', disabled: true },\n];\n\nconst initialValue = [\n  // disbeld可以控制不出现关闭的按钮\n  { value: 'Shanghai', label: '上海', disabled: true },\n  { value: 'Beijing', label: '北京' },\n  { value: 'Chengdu', label: '成都' },\n  { value: 'Wulumuqi', label: '乌鲁木齐', disabled: true },\n];\nconst unClosableItems = ['Shanghai', 'Wulumuqi', 'Qingdao', 'Jinan'];\n\nconst Demo = () => {\n  const [value, setValue] = useState(initialValue);\n  const handleChange = value => {\n    console.log('value', value);\n    const newValue = (value || []).map(item => ({\n      ...item,\n      disabled: unClosableItems.includes(item.value),\n    }));\n    setValue(newValue);\n  };\n  return (\n    <div className=\"content\">\n      <div>\n        <div>选中项后，清除搜索框: </div>\n        <Select maxTagCount={2} multiple style={{ width: '300px' }} onChange={handleChange} value={value}>\n          {data.map((option, index) => (\n            <Option key={index} value={option.value} disabled={option.disabled}>\n              {option.label}\n            </Option>\n          ))}\n        </Select>\n      </div>\n      <div>\n        <div>选中项后，不清除搜索框: </div>\n        <Select maxTagCount={2} multiple autoClearSearchValue={false} style={{ width: '300px' }} onChange={handleChange} value={value}>\n          {data.map((option, index) => (\n            <Option key={index} value={option.value} disabled={option.disabled}>\n              {option.label}\n            </Option>\n          ))}\n        </Select>\n      </div>\n    </div>\n  );\n}\nReactDOM.render(<Demo />, mountNode);\n```\n",
      "---\norder: 1\ntitle: 尺寸\n# noPreview: true\n---\n\n使用`size`属性指定大小，提供 `small` `normal` `large` 三种大小，默认为 `normal`\n\n```jsx\nimport { Select, Radio } from '@ss/mtd-react';\n\nconst Option = Select.Option;\nconst data = [\n  { value: 'libai', label: '李白' },\n  { value: 'lihe', label: '李贺' },\n  { value: 'dufu', label: '杜甫' },\n  { value: 'baijuyi', label: '白居易' },\n  { value: 'quyuan', label: '屈原' },\n];\n\nReactDOM.render(\n  <div className=\"content\">\n    <Select style={{ width: '200px' }} size=\"small\">\n      {data.map((option, index) => (\n        <Option key={index} value={option.value}>\n          {option.label}\n        </Option>\n      ))}\n    </Select>\n    <Select style={{ width: '200px' }} size=\"normal\">\n      {data.map((option, index) => (\n        <Option key={index} value={option.value}>\n          {option.label}\n        </Option>\n      ))}\n    </Select>\n    <Select style={{ width: '200px' }} size=\"large\">\n      {data.map((option, index) => (\n        <Option key={index} value={option.value}>\n          {option.label}\n        </Option>\n      ))}\n    </Select>\n  </div>,\n  mountNode\n);\n```\n\n```css\n.content {\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n}\n```\n",
      "---\norder: 7\ntitle: 滚动加载\n---\n\n`onPopupScroll`为下拉列表滚动时的回调，可用来实现滚动。\n\n```jsx\nimport { Select } from '@ss/mtd-react';\nimport { useState, useEffect } from 'react';\n\nconst Option = Select.Option;\n\nconst Demo = () => {\n  const [value, setValue] = useState('');\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [page, setPage] = useState(1);\n\n  useEffect(() => {\n    onFetchData();\n  }, []);\n\n  const onFetchData = () => {\n    if (!loading) {\n      setLoading(true);\n      setPage(page + 1);\n      // 模拟请求\n      setTimeout(() => {\n        mockData = new Array(10);\n        for (let i = 0; i < mockData.length; i++) {\n          mockData[i] = { value: (page - 1) * 10 + i + 1, label: `选项${(page - 1) * 10 + i + 1}` };\n        }\n        setData([...data, ...mockData]);\n        setLoading(false);\n      }, 1000);\n    }\n  };\n\n  const onPopupScroll = e => {\n    const target = e.target;\n    // 弹层滚动到底部，获取新数据\n    if (target.scrollTop + target.offsetHeight >= target.scrollHeight) {\n      onFetchData();\n    }\n  };\n\n  return (\n    <div className=\"content\">\n      <Select\n        style={{ width: '200px' }}\n        onChange={v => setValue(v)}\n        value={value}\n        onlyKeyValue\n        onPopupScroll={onPopupScroll}\n      >\n        {data.map((option, index) => (\n          <Option key={index} value={option.value} disabled={option.disabled} originOption={option}>\n            {option.label}\n          </Option>\n        ))}\n        {loading && (\n          <Option key={new Date().getTime()} value={new Date().getTime()} disabled>\n            正在加载中...\n          </Option>\n        )}\n      </Select>\n    </div>\n  );\n};\nReactDOM.render(<Demo />, mountNode);\n```\n\n```css\n.content {\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n}\n```\n",
      "---\norder: 4\ntitle: 数据过滤\n---\n\n使用场景：下拉内容固定，前端输入关键字过滤下拉数据\n\n当 `filterOption`值为`true`时，默认根据选项的 `label` 筛选， 也可以自定义函数过滤数据。\n\n```jsx\nimport { Select } from '@ss/mtd-react';\nimport { useState } from 'react';\n\nconst Option = Select.Option;\n\nconst data = [\n  { value: 'libai', label: '李白', disabled: true },\n  { value: 'lihe', label: '李贺' },\n  { value: 'dufu', label: '杜甫' },\n  { value: 'baijuyi', label: '白居易' },\n  { value: 'quyuan', label: '屈原' },\n];\n\nconst Demo = () => {\n  const [value, setValue] = useState(null);\n  const [customValue, setCustomValue] = useState(null);\n\n  const handleChange = value => {\n    setValue(value);\n  };\n\n  const handleCustomChange = customValue => {\n    setCustomValue(customValue);\n  };\n\n  return (\n    <div className=\"content\">\n      <span>使用默认过滤方法:</span>\n      <Select\n        style={{ width: '200px' }}\n        placeholder=\"输入’李‘字试试看\"\n        onChange={handleChange}\n        value={value}\n        filterOption\n      >\n        {data.map((option, index) => (\n          <Option key={index} value={option.value} disabled={option.disabled}>\n            {option.label}\n          </Option>\n        ))}\n      </Select>\n      <br />\n      <span>自定义过滤方法:</span>\n      <Select\n        style={{ width: '200px' }}\n        placeholder=\"输入’bai‘字试试看\"\n        onChange={handleCustomChange}\n        value={customValue}\n        filterOption={(input, option) => option.value && option.value.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n      >\n        {data.map((option, index) => (\n          <Option key={index} value={option.value} disabled={option.disabled}>\n            {option.label}\n          </Option>\n        ))}\n      </Select>\n    </div>\n  );\n};\nReactDOM.render(<Demo />, mountNode);\n```\n\n```css\n/* .content {\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n} */\n```\n",
      "---\norder: 6\ntitle: 自定义下拉框弹层\n# noPreview: true\n---\n\n使用`popLayer`自定义弹层挂载的 DOM 节点、弹层宽高设置等。\n\n```jsx\nimport { Select, Icon } from '@ss/mtd-react';\nimport { useState } from 'react';\n\nconst Option = Select.Option;\nconst data = [\n  { value: 'libai', name: '李白' },\n  { value: 'lihe', name: '李贺' },\n  { value: 'dufu', name: '杜甫', disabled: true },\n  { value: 'baijuyi', name: '白居易' },\n  { value: 'quyuan', name: '屈原' },\n];\n\nconst SelectDemo = () => {\n  const [value, setValue] = useState(null);\n\n  const handleChange = value => {\n    console.log('value', value);\n    setValue(value);\n  };\n\n  return (\n    <Select\n      style={{ width: 200, margin: '0 auto'  }}\n      icon={() => <Icon type=\"search\" />}\n      value={value}\n      optionLabelProp=\"name\"\n      renderInputLabel={option => <span>\n        <span style={{ float: 'left' }}>{option.name}</span>\n        <span style={{ float: 'right' }}>{option.value}</span>\n      </span>}\n      popLayer={{\n        maxHeight: 120,\n        width: '25em',\n        getContainer: () => document.querySelector('.mtd-workspace-content'),\n      }}\n      onChange={handleChange}\n    >\n      {data.map((option, index) => (\n        <Option\n          key={index}\n          value={option.value}\n          name={option.name}\n          disabled={option.disabled}\n        >\n          <span>\n            <span style={{ float: 'left' }}>{option.name}</span>\n            <span style={{ float: 'right' }}>{option.value}</span>\n          </span>\n        </Option>\n      ))}\n    </Select>\n  );\n}\nReactDOM.render(<SelectDemo />, mountNode);\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/breadcrumb",
    "content": [
      "---\norder: 4\ntitle: 多种分隔符\n---\n使用`separator`指定分隔符，`separatorClass`指定分隔符样式。\n\n````jsx\nimport { Breadcrumb, Icon } from \"@ss/mtd-react\";\n\nfunction BreadcrumbDemo() {\n  return (\n    <div className=\"demo-breadcrumb\">\n      <Breadcrumb separator=\" | \"  >\n        <Breadcrumb.Item>面包屑1</Breadcrumb.Item>\n        <Breadcrumb.Item>面包屑2</Breadcrumb.Item>\n        <Breadcrumb.Item>面包屑3</Breadcrumb.Item>\n      </Breadcrumb>\n      <Breadcrumb separator={<Icon type=\"fast-backward\" />} separatorClass=\"user-separator\" >\n        <Breadcrumb.Item>面包屑1</Breadcrumb.Item>\n        <Breadcrumb.Item>面包屑2</Breadcrumb.Item>\n        <Breadcrumb.Item>面包屑3</Breadcrumb.Item>\n      </Breadcrumb>\n    </div>\n  );\n}\nReactDOM.render(<BreadcrumbDemo />, mountNode);\n````\n\n```css\n.user-separator i{\n  transform: rotate(180deg);\n}\n```",
      "---\norder: 1\ntitle: 基本样式\n---\n\n````jsx\nimport { Breadcrumb } from \"@ss/mtd-react\";\n\nfunction BreadcrumbDemo() {\n  return (\n    <div className=\"demo-breadcrumb\">\n      <Breadcrumb>\n        <Breadcrumb.Item>面包屑1</Breadcrumb.Item>\n        <Breadcrumb.Item>面包屑2</Breadcrumb.Item>\n        <Breadcrumb.Item>面包屑3</Breadcrumb.Item>\n      </Breadcrumb>\n    </div>\n  );\n}\nReactDOM.render(<BreadcrumbDemo />, mountNode);\n````\n\n```css\n.demo-breadcrumb {\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n}\n```",
      "---\norder: 2\ntitle: 大小\n---\n使用`size`属性指定面包屑样式大小。\n\n````jsx\nimport { Breadcrumb } from \"@ss/mtd-react\";\n\nfunction BreadcrumbDemo() {\n  return (\n    <div className=\"demo-breadcrumb\">\n      <Breadcrumb size=\"small\" >\n        <Breadcrumb.Item>面包屑1</Breadcrumb.Item>\n        <Breadcrumb.Item>面包屑2</Breadcrumb.Item>\n        <Breadcrumb.Item>面包屑3</Breadcrumb.Item>\n      </Breadcrumb>\n      <Breadcrumb size=\"normal\" >\n        <Breadcrumb.Item>面包屑1</Breadcrumb.Item>\n        <Breadcrumb.Item>面包屑2</Breadcrumb.Item>\n        <Breadcrumb.Item>面包屑3</Breadcrumb.Item>\n      </Breadcrumb>\n      <Breadcrumb size=\"large\" >\n        <Breadcrumb.Item>面包屑1</Breadcrumb.Item>\n        <Breadcrumb.Item>面包屑2</Breadcrumb.Item>\n        <Breadcrumb.Item>面包屑3</Breadcrumb.Item>\n      </Breadcrumb>\n    </div>\n  );\n}\nReactDOM.render(<BreadcrumbDemo />, mountNode);\n````",
      "---\norder: 3\ntitle: 首页用图标展示\n---\n图形化展示利于突出首页层级。\n````jsx\nimport { Breadcrumb, Icon } from \"@ss/mtd-react\";\n\nfunction BreadcrumbDemo() {\n  return (\n    <div className=\"demo-breadcrumb\">\n      <Breadcrumb>\n        <Breadcrumb.Item>\n          <Icon type=\"home-o\" onClick={() => { console.log(\"change route\") }} />\n        </Breadcrumb.Item>\n        <Breadcrumb.Item>\n          <a href=\"\" className=\"link-style\">用户配置</a>\n        </Breadcrumb.Item>\n        <Breadcrumb.Item>\n          通知中心\n        </Breadcrumb.Item>\n      </Breadcrumb>\n    </div>\n  );\n}\nReactDOM.render(<BreadcrumbDemo />, mountNode);\n````"
    ]
  },
  {
    "url": "/mtd/react/components/icon",
    "content": [
      "---\norder: 1\ntitle: 基础图标\n---\n\n通过type来设置 Icon，该demo提供一个完整的Icon列表\n\n````jsx\nimport { Icon } from \"@ss/mtd-react\";\n\nconst iconList = [\n    \"more-circle-o-fill\",\"more-circle-fill\",\"unlink\",\"meetingroom-fill\",\"provisional\",\"cycle\",\"meetingroom\",\"icon-test\",\"id-card-fill\",\"dislike-fill\",\"dislike\",\"airplayvideo\",\"volumefill\",\"volume\",\"volumeslashfill\",\"volume2fill\",\"volumeslash\",\"volume3\",\"volume1\",\"volume2\",\"volume1fill\",\"volume3fill\",\"at\",\"briefcasefill\",\"briefcase\",\"review\",\"reviewfill\",\"folderlist\",\"folderlistfill\",\"videofill\",\"video1\",\"cancel-circle-fill\",\"unbell\",\"nonetwork\",\"android\",\"apple\",\"wechatpay\",\"dropbox\",\"chrome\",\"github\",\"google\",\"ie\",\"facebook\",\"twitter\",\"html\",\"alipay\",\"slack\",\"weibo\",\"amazon\",\"qq\",\"wechat\",\"more-circle\",\"cancel-circle\",\"header-column\",\"insert-column-left\",\"header-line\",\"add-message\",\"add-message-fill\",\"flame-fill\",\"flame\",\"badge\",\"jigsaw\",\"bolt-fill\",\"bolt\",\"jigsaw-fill\",\"bar-chart-fill\",\"alphabetically\",\"bell-slash-fill\",\"bar-chart\",\"demonstration\",\"funnel-chart-fill\",\"adaptation-screen\",\"floor-fill\",\"education\",\"nosign\",\"funnel-chart\",\"laser-pen\",\"education-fill\",\"log-out\",\"paperplane\",\"globe\",\"keyboard\",\"paperplane-fill\",\"shield\",\"id-card\",\"shield-success-fill\",\"floor\",\"qrcode\",\"table\",\"monitor\",\"original\",\"square-stack-up-fill\",\"phone\",\"table-fill\",\"shield-success\",\"shield-fill\",\"slider-settings\",\"square-stack-up\",\"trophy\",\"trophy-fill\",\"annex\",\"quote\",\"like\",\"like-fill\",\"collapse\",\"expand\",\"compress\",\"checkmini\",\"warningmini\",\"closemini\",\"questionmini\",\"handle\",\"point\",\"check-thick\",\"left-thick\",\"right-thick\",\"up-thick\",\"down-thick\",\"newfolde\",\"history\",\"unlock-fill\",\"originalsize\",\"redo\",\"unlock\",\"template\",\"printing\",\"edit\",\"top\",\"radio-unchecked\",\"more\",\"enlarge\",\"search\",\"micrify\",\"insert-row-down\",\"file-import\",\"file-import-fill\",\"insert-column-right\",\"insert-row-up\",\"sort\",\"h1\",\"h2\",\"avatar-fill\",\"bankcard\",\"avatar-add-fill\",\"delete\",\"copy\",\"meh\",\"visibility-on-fill\",\"invoice\",\"sad\",\"bank-card-fill\",\"info-circle\",\"add-square-o\",\"checkbox-indetermina-o\",\"checkbox-indetermina\",\"add-square-fill\",\"load\",\"avatar-add\",\"comment-fill\",\"fabulous\",\"camera\",\"avatar-group\",\"contacts\",\"folder-fill\",\"mosaic\",\"file\",\"file-send\",\"file-export\",\"play\",\"lookup\",\"rotate\",\"tailoring\",\"folder\",\"shape\",\"schedule\",\"picture\",\"comment\",\"telephone\",\"align-justify\",\"align-center\",\"cleaner-format\",\"align-right\",\"align-left\",\"delete-selectedcolumn\",\"formatbold\",\"delete-selected-row\",\"form\",\"color-fill\",\"list-bulleted\",\"italic\",\"list-numbered\",\"serikeethrough\",\"paint\",\"unmerge-cells\",\"merge-cells\",\"underlined\",\"toc\",\"colorfont\",\"avatar-group-fill\",\"camera-fill\",\"contacts-fill\",\"cloud-fill\",\"checkbox-checked\",\"customer\",\"drill-down-fill\",\"fabulous-fill\",\"error\",\"database-fill\",\"file-export-fill\",\"file-send-fill\",\"file-fill\",\"lock-fill\",\"invoice-fill\",\"hierarchy-fill\",\"lookup-fill\",\"mail-fill\",\"picture-fill\",\"paste-code-fill\",\"printing-fill\",\"schedule-fill\",\"setting-fill\",\"telephone-fill\",\"star-half\",\"play-fill\",\"minus\",\"areachart\",\"calendar-o\",\"barschart-o\",\"barschart\",\"file-add\",\"calendar\",\"question-mark\",\"piechart-o\",\"areachart-o\",\"file-add-o\",\"warning-circle\",\"piechart\",\"warning\",\"refresh\",\"question-circle-o\",\"bell\",\"location\",\"share\",\"home\",\"filter\",\"success-circle\",\"cart\",\"save\",\"question-circle\",\"calculator\",\"smile\",\"time\",\"theme\",\"star\",\"file-o\",\"triangle-left\",\"triangle-down\",\"triangle-up\",\"triangle-right\",\"calculator-o\",\"location-o\",\"visibility-off-o\",\"undo-o\",\"paste-code-o\",\"export-o\",\"save-o\",\"invoice-o\",\"cart-o\",\"drill-down-o\",\"hierarchy-o\",\"exit-fullscreen-o\",\"fullscreen-o\",\"import-export-o\",\"database-o\",\"meh-o\",\"smile-o\",\"sad-o\",\"arrow-left\",\"arrow-down\",\"add\",\"check\",\"checkbox-unchecked\",\"arrow-up\",\"close\",\"checkbox-checked-o\",\"down\",\"code-on\",\"delete-o\",\"ellipsis\",\"copy-o\",\"cloud-o\",\"filter-o\",\"download-o\",\"fast-forward\",\"error-o\",\"info-circle-o\",\"list-view\",\"arrow-right\",\"mail-o\",\"home-o\",\"bell-o\",\"code-off\",\"left\",\"edit-o\",\"remove\",\"fast-backward\",\"refresh-o\",\"sortupanddown-o\",\"share-2\",\"theme-o\",\"warning-circle-o\",\"link-o\",\"wifi-o\",\"up\",\"time-o\",\"right\",\"lock-o\",\"menus-o\",\"star-o\",\"setting\",\"visibility-on-o\",\"success-o\",\"error-circle\",\"customer-o\",\"share-o\",\"avatar-o\",\n]\n\nconst IconDemo = ()=> {\n  return(\n    <div className=\"icon-list\">\n      <ul>\n        {iconList.reverse().map((icon)=>{\n            return (\n                <li key={icon} >\n                  <Icon type={icon} />\n                  <span className=\"icon-name\">{icon}</span>\n                </li>\n            )\n        })}\n      </ul>\n    </div>\n  )\n}\nReactDOM.render(<IconDemo />, mountNode);\n````\n\n```css\n.icon-list {\n    list-style: none;\n    overflow: hidden;\n}\n.icon-list li{\n    color: #555;\n    float: left;\n    margin: 3px 0;\n    padding: 10px 0 20px 0;\n    position: relative;\n    text-align: center;\n    width: 20%;\n}\n\n.icon-list li .icon-name{\n    font-size: 12px;\n    display: block;\n    font-family: Lucida Console,Consolas;\n    text-align: center;\n    white-space: nowrap;\n}\n.icon-list .mtdicon{\n    font-size: 30px;\n    margin: 12px 0;\n}\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/modal",
    "content": [
      "---\norder: 6\ntitle: 内容展示\n---\n\n对话框内容可以承载详情信息、表格、表单或相关功能操作。\n\n```jsx\nimport { Modal, Button, Form, Input, RangePicker, Select } from '@ss/mtd-react'\nimport { useState } from 'react';\n\nfunction App () {\n  const [visible, setVisible] = useState(false);\n\n  const showModal = () => {\n    setVisible(true);\n  };\n\n  const handleOk = e => {\n    console.log(e);\n    setVisible(false);\n  };\n\n  const handleClose = e => {\n    console.log(e);\n    setVisible(false);\n  };\n\n  return (\n    <div>\n      <div>\n        <Button onClick={showModal}>嵌套表单的对话框</Button>\n        {visible && (\n          <Modal className=\"modal-content\" title=\"请假申请\" onClose={handleClose}>\n            <Modal.Body style={{'padding':'4px 24px'}}>\n              <Form>\n                <Form.Item label=\"请假类型：\">\n                  <Select placeholder=\"请选择请假类型\">\n                    <Select.Option key=\"personal_leave\" value=\"personal_leave\">\n                      事假\n                    </Select.Option>\n                    <Select.Option key=\"sick_leave\" value=\"sick_leave\">\n                      病假\n                    </Select.Option>\n                  </Select>\n                </Form.Item>\n                <Form.Item label=\"请假时间：\">\n                  <RangePicker\n                    format=\"%Y-%m-%d %H:%M:%S\"\n                    placeholder={['开始日期', '结束日期']}\n                  />\n                </Form.Item>\n                <Form.Item label=\"请假理由：\">\n                  <Input.TextArea rows={3} />\n                </Form.Item>\n              </Form>\n            </Modal.Body>\n            <Modal.Footer>\n              <Button style={{'marginRight':'20px'}} onClick={handleClose}>\n                取消\n              </Button>\n              <Button type=\"primary\" onClick={handleOk}>\n                确定\n              </Button>\n            </Modal.Footer>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n}\n\nReactDOM.render(<App />, mountNode);\n```\n\n```css\n.modal-content {\n  width: 550px;\n}\n```\n",
      "---\norder: 0\ntitle: 基本使用\n---\n\n基本使用。\n\n```jsx\nimport { Modal, Button } from '@ss/mtd-react'\nimport { useState } from 'react';\n\nfunction App () {\n  const [visible, setVisible] = useState(false);\n  const showModal = () => {\n    setVisible(true);\n  };\n\n  const handleOk = e => {\n    console.log(e);\n    setVisible(false);\n  };\n\n  const handleClose = e => {\n    console.log(e);\n    setVisible(false);\n  };\n  return (\n    <div>\n      <Button type=\"primary\" onClick={showModal}>预览效果</Button>\n      {visible && (\n        <Modal title=\"对话框标题\" onClose={handleClose} style={{width: '400px'}}>\n          <Modal.Body>\n            <div>\n              春江潮水连海平，海上明月共潮生。\n              滟滟随波千万里，何处春江无月明。\n              江流宛转绕芳甸，月照花林皆似霰。\n              空里流霜不觉飞，汀上白沙看不见。\n              江天一色无纤尘，皎皎空中孤月轮。\n              春江潮水连海平，海上明月共潮生。\n              滟滟随波千万里，何处春江无月明。\n              江流宛转绕芳甸，月照花林皆似霰。\n            </div>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button style={{'marginRight':'12px'}} onClick={handleClose}>\n              取消\n            </Button>\n            <Button type=\"primary\" onClick={handleOk}>\n              确定\n            </Button>\n          </Modal.Footer>\n        </Modal>)}\n    </div>\n  );\n}\n\nReactDOM.render(<App />, mountNode);\n```\n",
      "---\norder: 7\ntitle: 嵌套的对话框\n---\n\n通过嵌套可以在一个对话框上打开另一个对话框。\n\n```jsx\nimport { Modal, Button } from '@ss/mtd-react';\nimport { useState } from 'react';\n\nconst App = () => {\n\n  const [visible1, setVisible1] = useState(false);\n  const [visible2, setVisible2] = useState(false);\n\n  const showOuterModal = () => {\n    setVisible1(true);\n  };\n\n  const showInnerModal = () => {\n    setVisible2(true);\n  };\n\n  const handleClose1 = e => {\n    console.log(e);\n    setVisible1(false);\n  };\n\n  const handleClose2 = e => {\n    console.log(e);\n    setVisible2(false);\n  };\n\n  return (\n    <div>\n      <Button onClick={showOuterModal}>点击打开外层对话框</Button>\n      {visible1 && (\n        <Modal title=\"外层对话框\" onClose={handleClose1}>\n          <Modal.Body>\n            <p>这是外层对话框</p>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button style={{'marginRight':'20px'}} onClick={handleClose1}>\n              取消\n            </Button>\n            <Button type=\"primary\" onClick={showInnerModal}>\n              打开内层对话框\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      )}\n      {visible2 && (\n        <Modal title=\"内层对话框\" onClose={handleClose2}>\n          <Modal.Body>\n            <p>这是内层对话框</p>\n          </Modal.Body>\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nReactDOM.render(<App />, mountNode);",
      "---\norder: 4\ntitle: 全屏对话框\n---\n\n有时对话框内承载的信息多且复杂，我们可以把它展示到全屏，成为全屏对话框，这种对话框在表现形式上等同于新页面。\n\n```jsx\nimport { Modal, Button } from '@ss/mtd-react';\nimport { useState } from 'react';\n\nfunction App () {\n  const [visible, setVisible] = useState(false);\n\n  const showModal = () => {\n    setVisible(true);\n  };\n\n  const handleOk = e => {\n    console.log(e);\n    setVisible(false);\n  };\n\n  const handleClose = e => {\n    console.log(e);\n    setVisible(false);\n  };\n\n  return (\n    <div>\n      <Button type=\"primary\" onClick={showModal}>全屏对话框</Button>\n      {visible && (\n        <Modal className=\"fullscreen_modal\" title=\"全屏对话框\" onClose={handleClose}>\n          <Modal.Body style={{'paddingTop': '20px'}}>\n            <p>这是一个全屏对话框</p>\n            <p>这是一个全屏对话框</p>\n            <p>这是一个全屏对话框</p>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button style={{'marginRight':'20px'}} onClick={handleClose}>\n              取消\n            </Button>\n            <Button type=\"primary\" onClick={handleOk}>\n              确定\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nReactDOM.render(<App />, mountNode);\n```\n\n```css\n/* .fullscreen_modal {\n  width: 100%;\n  height: 100%;\n  max-height: 100%;\n  max-width: 100%;\n  border-radius: 0;\n}\n.fullscreen_modal .mtd-modal-header {\n  border-bottom: 1px solid #e8eaec;\n}\n.fullscreen_modal .mtd-modal-footer {\n  border-top: 1px solid #e8eaec;\n} */\n```\n",
      "---\norder: 2\ntitle: 异步关闭\n---\n\n当按钮引起的操作需要和后端进行校验时会出现 loading 状态，常用于表单提交。\n\n```jsx\nimport { Modal, Button, Form, Input } from '@ss/mtd-react';\nimport { useRef } from 'react';\n\nfunction App () {\n  const formRef = useRef();\n  const showConfirm = () => {\n    let m = Modal.confirm({\n      title: '异步关闭的对话框',\n      message: renderForm(),\n      onOk: () => {\n        if(formRef.current.validateFields()) {\n          // 发送一个请求\n          return fetch('https://www.mocky.io/v2/5cc8019d300000980a055e76');\n        }\n        return true;\n      },\n      onCancel: () => {},\n    });\n    // 无点击操作时，对话框将在 5s 后关闭\n    setTimeout(m.close, 5000);\n  };\n\n  const renderForm = () => {\n    return (\n      <Form ref={formRef}>\n        <Form.Item formItemKey=\"reason\" label=\"输入框：\" message=\"请输入内容\" required>\n          <Input toFormItem placeholder=\"请输入\" />\n        </Form.Item>\n      </Form>\n    )\n  }\n\n  return (\n    <div>\n      <Button type=\"primary\" onClick={showConfirm}>异步关闭的对话框</Button>\n    </div>\n  );\n}\n\nReactDOM.render(<App />, mountNode);\n",
      "---\norder: 3\ntitle: 禁用关闭\n---\n\n可以禁用关闭和遮罩层关闭\n\n```jsx\nimport { Modal, Button } from '@ss/mtd-react'\nimport { useState } from 'react';\n\nfunction App () {\n  const [visible1, setVisible1] = useState(false);\n  const [visible2, setVisible2] = useState(false);\n\n  const showModal1 = () => {\n    setVisible1(true);\n  };\n\n  const showModal2 = () => {\n    setVisible2(true);\n  };\n\n  const handleClose1 = e => {\n    console.log(e);\n    setVisible1(false);\n  };\n\n  const handleClose2 = e => {\n    console.log(e);\n    setVisible2(false);\n  };\n\n  return (\n    <div className=\"modal-forbidden\">\n      <Button onClick={showModal1}>禁用右上角关闭</Button>\n      <Button onClick={showModal2}>禁用遮罩层关闭</Button>\n      {visible1 && (\n        <Modal title=\"禁用右上角关闭\" onClose={handleClose1} closable={false}>\n          <Modal.Body>\n            <p>对话框内容</p>\n            <p>对话框内容</p>\n            <p>对话框内容</p>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button style={{'marginRight':'20px'}} onClick={handleClose1}>\n              取消\n            </Button>\n            <Button type=\"primary\" onClick={handleClose1}>\n              确定\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      )}\n      {visible2 && (\n        <Modal title=\"禁用遮罩层关闭\" onClose={handleClose2} maskClosable={false}>\n          <Modal.Body>\n            <p>对话框内容</p>\n            <p>对话框内容</p>\n            <p>对话框内容</p>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button style={{'marginRight':'20px'}} onClick={handleClose2}>\n              取消\n            </Button>\n            <Button type=\"primary\" onClick={handleClose2}>\n              确定\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nReactDOM.render(<App />, mountNode);\n```\n\n```css\n.modal-forbidden .mtd-button {\n  margin-right: 60px;\n}\n```\n",
      "---\norder: 5\ntitle: 自定义样式\n---\n\n根据应用场景及需要，可以自定义对话框的样式，比如页头、页脚、对话框宽度。\n\n```jsx\nimport { Modal, Button, Icon } from '@ss/mtd-react'\nimport { useState } from 'react';\n\nconst CUSTOM_TITLE = (\n  <div className=\"modal-style-header\">\n    <span>自定义页头</span>\n  </div>\n);\n\nfunction App () {\n  const [visible1, setVisible1] = useState(false);\n  const [visible2, setVisible2] = useState(false);\n\n  const showModal1 = () => {\n    setVisible1(true);\n  };\n\n  const showModal2 = () => {\n    setVisible2(true);\n  };\n\n  const handleClose1 = e => {\n    console.log(e);\n    setVisible1(false);\n  };\n\n  const handleOk = e => {\n    console.log(e);\n    setVisible2(false);\n  };\n\n  const handleClose2 = e => {\n    console.log(e);\n    setVisible2(false);\n  };\n\n  return (\n    <div className=\"modal-style\">\n      <Button onClick={showModal1}>自定义页头和页脚</Button>\n      <Button onClick={showModal2} style={{marginLeft: '12px'}}>设置宽度</Button>\n      {visible1 && (\n        <Modal title={CUSTOM_TITLE} onClose={handleClose1}>\n          <Modal.Body>\n            <p>可自定义页头和页脚的内容</p>\n          </Modal.Body>\n          <Modal.Footer className=\"modal-style-footer\">\n            <Button type=\"warning\" onClick={handleClose1}>\n              自定义页脚\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      )}\n      {visible2 && (\n        <Modal style={{width:'520px'}} title=\"自定义宽度\" onClose={handleClose2}>\n          <Modal.Body>\n            <p>自定义对话框宽度，单位 px。</p>\n            <p>对话框的宽度是自适应的，默认最小宽度为400px。</p>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button style={{'marginRight':'20px'}} onClick={handleClose2}>\n              取消\n            </Button>\n            <Button type=\"primary\" onClick={handleOk}>\n              确定\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nReactDOM.render(<App />, mountNode);\n```\n",
      "---\norder: 1\ntitle: 信息提示\n---\n\n各种类型的信息提示。\n\n```jsx\nimport { Modal, Button } from '@ss/mtd-react';\n\nfunction App () {\n  const showConfirm = () => {\n    Modal.confirm({\n      style: {width: 400, height: 300},\n      title: '确认框',\n      message: '这是一段常规描述性文字。这是一段常规描述性文字。这是一段常规描述性文字。这是一段常规描述性文字。这是一段常规描述性文字。这是一段常规描述性文字。这是一段常规描述性文字。这是一段常规描述性文字。这是一段常规描述性文字。这是一段常规描述性文字。这是一段常规描述性文字。这是一段常规描述性文字。这是一段常规描述性文字。这是一段常规描述性文字。这是一段常规描述性文字。这是一段常规描述性文字。这是一段常规描述性文字。这是一段常规描述性文字。这是一段常规描述性文字。',\n      onOk: () => console.log('Click OK'),\n      onCancel: () => console.log('Click Cancel'),\n    });\n  };\n  const showInfo = () => {\n    Modal.info({\n      title: '信息提示',\n      message: '这是一段常规描述性文字。',\n      okBtnProps: { type: 'primary' },\n    });\n  };\n  const showSuccess = () => {\n    Modal.success({\n      title: '成功提示',\n      message: '这是一段常规描述性文字。',\n      okBtnProps: { type: 'primary' },\n      // okText: '好的',\n    });\n  };\n  const showError = () => {\n    Modal.error({\n      title: '错误提示',\n      message: '这是一段常规描述性文字。',\n      okBtnProps: { type: 'primary' },\n    });\n  };\n  const showWarning = () => {\n    Modal.warning({\n      title: '警告提示',\n      message: '这是一段常规描述性文字。',\n      okText: '确认删除',\n      okBtnProps: { type: 'danger' },\n      cancelText: '取消删除',\n      onOk: () => console.log('Click OK'),\n      onCancel: () => console.log('Click Cancel'),\n    });\n  };\n\n  return (\n    <div className=\"modal-method\">\n      <Button onClick={showConfirm}>确认</Button>\n      <Button type=\"primary\" onClick={showInfo}>信息</Button>\n      <Button type=\"success\" onClick={showSuccess}>成功</Button>\n      <Button type=\"danger\" onClick={showError}>错误</Button>\n      <Button type=\"warning\" onClick={showWarning}>警告</Button>\n    </div>\n  );\n}\n\nReactDOM.render(<App />, mountNode);\n```\n\n```css\n.modal-method .mtd-button{\n  margin-right: 60px;\n}\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/announcement",
    "content": [
      "---\norder: 4\ntitle: 内容展示\n---\n\n\n````jsx\nimport { Announcement } from \"@ss/mtd-react\";\n\nfunction AnnouncementDemo() {\n  const title = <span>带按钮或链接的公告 <a className=\"link\" href=\"/\">链接内容</a></span>;\n  return (\n    <div className=\"demo-announcement\">\n      <Announcement title=\"带辅助信息的公告\" description=\"我是辅助信息，我是辅助信息，我是辅助信息，我是辅助信息，我是辅助信息，我是辅助信息，我是辅助信息，我是辅助信息我是辅助信息，我是辅助信息。\" closeable closeText=\"知道了\" />\n      <Announcement title={title} type=\"warning\" />\n    </div>\n  );\n}\nReactDOM.render(<AnnouncementDemo />, mountNode);\n````\n\n```css\n.demo-announcement .link {\n  float: right;\n  color: #118bfb;\n  text-decoration: none;\n  cursor: pointer;\n}\n```",
      "---\norder: 1\ntitle: 基本样式\n---\n\n````jsx\nimport { Announcement } from \"@ss/mtd-react\";\n\nfunction AnnouncementDemo() {\n  return <Announcement title=\"公告信息\" />\n}\nReactDOM.render(<AnnouncementDemo />, mountNode);\n````",
      "---\norder: 3\ntitle: 消失方式\n---\n\n\n````jsx\nimport { Announcement } from \"@ss/mtd-react\";\n\nconst AnnouncementDemo = () => {\n  const handleClose = () => {\n    console.log(\"close event\");\n  };\n\n  return (\n    <div className=\"demo-announcement\">\n      <Announcement title=\"信息较重要，需要常显，没有关闭按钮\" type=\"info\" />\n      <Announcement title=\"用户可选择手动关闭\" type=\"info\" closeable />\n      <Announcement title=\"关闭时触发事件\" showIcon type=\"info\" closeable onClose={handleClose} />\n    </div>\n  );\n}\n\nReactDOM.render(<AnnouncementDemo />, mountNode);\n````",
      "---\norder: 2\ntitle: 倾向\n---\n\n\n````jsx\nimport { Announcement } from \"@ss/mtd-react\";\n\nfunction AnnouncementDemo() {\n  return (\n    <div className=\"demo-announcement\">\n      <Announcement title=\"常规信息\" showIcon type=\"info\" />\n      <Announcement title=\"成功信息\" showIcon type=\"success\" />\n      <Announcement title=\"警告信息\" showIcon type=\"warning\" />\n      <Announcement title=\"失败信息\" showIcon type=\"error\" />\n    </div>\n  );\n}\nReactDOM.render(<AnnouncementDemo />, mountNode);\n````\n\n```css\n.demo-announcement>div{\n  margin-bottom:15px;\n}\n```"
    ]
  },
  {
    "url": "/mtd/react/components/timeline",
    "content": [
      "---\norder: 2\ntitle: 自定义时间轴\n---\n\n根据不同场景需要，可以将时间节点设置为图标或其它自定义元素，不同图标、颜色代表不同的状态，如完成、成功，错误、失败，告警，正在进行中或其它默认状态。\n\n````jsx\nimport { Timeline, Icon } from \"@ss/mtd-react\";\nconst TimelineItem = Timeline.Item;\n\nfunction TimelineDemo(){\n  return (\n    <Timeline className=\"custom-demo\">\n      <TimelineItem icon=\"success-o\" className=\"success\"\n        title={<div>\n          开始发布\n          <span className=\"time\">12:45:24</span>\n          <span className=\"tag\">发布完成</span>\n        </div>}\n        content=\"发布具体内容\"/>\n      <TimelineItem icon=\"error-circle-thick-o\" className=\"error\"\n        title={<div>\n          开始发布\n          <span className=\"time\">13:45:24</span>\n          <span className=\"tag\">发布失败</span>\n        </div>}\n        content=\"发布失败信息\"/>\n      <TimelineItem icon=\"warning-circle-o\" className=\"warning\"\n        title={<div>\n          发布告警\n          <span className=\"time\">14:45:24</span>\n          <span className=\"tag\">发布告警</span>\n        </div>}\n        content=\"发布告警具体信息\"/>\n      <TimelineItem icon={<Icon type=\"loading\"/>} className=\"loading\"\n        title={<div>正在执行中<span className=\"time\">15:45:24</span></div>}\n        content=\"正在执行中的具体信息\"/>\n    </Timeline>\n  );\n}\nReactDOM.render(<TimelineDemo />, mountNode);\n````\n\n```css\n.custom-demo {\n  padding-left: 100px;\n}\n.custom-demo .mtd-timeline-item-title .time {\n  font-size: 12px;\n  color: rgba(0,0,0,0.87);\n  margin-left: 8px;\n}\n.custom-demo .mtd-timeline-item-title .tag {\n  font-size: 12px;\n  border: 0.5px solid;\n  border-radius: 2px;\n  margin-left: 8px;\n  padding: 0 4px;\n  line-height: 18px;\n  display: inline-block;\n}\n.success .tag, .success .mtd-timeline-item-icon {\n  color: #24BD78;\n}\n.error .tag, .error .mtd-timeline-item-icon {\n  color: #FF5F57;\n}\n.warning .tag, .warning .mtd-timeline-item-icon {\n  color: #F5BA31;\n}\n.loading .mtd-timeline-item-icon {\n  color: #0a70f5;\n}\n```\n",
      "---\norder: 3\n# title: 内容展示方向\n---\n\n内容在时间轴的两侧。\n\n````jsx\nimport { Timeline } from \"@ss/mtd-react\";\nconst TimelineItem = Timeline.Item;\n\nfunction TimelineDemo(){\n  return (\n    <Timeline mode=\"alternate\" className=\"alternate-demo\">\n      <TimelineItem\n        title={<div>开始发布分组<span className=\"time\">12:45:24</span></div>}\n        content=\"开始发布分组发布内容发布\"/>\n      <TimelineItem\n        title={<div><span className=\"time\">13:45:24</span>发布前检查</div>}\n        content=\"开始发布分组发布内容发布内容发布内容\"/>\n      <TimelineItem icon=\"success-o\"\n        title={<div>发布前检查通过<span className=\"time\">14:45:24</span></div>}\n        content=\"开始发布分组发布内容发布内容发布内容开始发布分组\"/>\n      <TimelineItem\n        title={<div><span className=\"time\">15:45:24</span>开始执行</div>}\n        content=\"开始发布分组发布内容发布内容发布内容\"/>\n      <TimelineItem\n        title={<div>执行中<span className=\"time\">16:45:24</span></div>}\n        content=\"开始发布分组发布内容发布内容发布内容\"/>\n    </Timeline>\n  );\n}\nReactDOM.render(<TimelineDemo />, mountNode);\n````\n\n```css\n.alternate-demo .mtd-timeline-item-title .time {\n  font-size: 12px;\n  color: rgba(0,0,0,0.87);\n}\n.alternate-demo .mtd-timeline-item-right .time {\n  margin-left: 8px;\n}\n.alternate-demo .mtd-timeline-item-left .time {\n  margin-right: 8px;\n}\n```\n",
      "---\norder: 1\ntitle: 基本样式\n---\n\n````jsx\nimport { Timeline } from \"@ss/mtd-react\";\nconst TimelineItem = Timeline.Item;\n\nfunction TimelineDemo(){\n  return (\n    <Timeline className=\"base-demo\">\n      <TimelineItem\n        title={<div>开始发布分组<span className=\"time\">12:45:24</span></div>}\n        content=\"开始发布分组发布内容发布\"/>\n      <TimelineItem\n        title={<div>发布前检查<span className=\"time\">13:45:24</span></div>}\n        content=\"开始发布分组发布内容发布内容发布内容\"/>\n      <TimelineItem\n        title={<div>发布前检查通过<span className=\"time\">14:45:24</span></div>}\n        content={<div>\n          开始发布分组发布内容发布内容发布内容开始发布分组<br />\n          开始发布分组发布内容发布内容发布内容开始发布分组<br />\n          开始发布分组发布内容发布内容发布内容开始发布分组<br />\n          开始发布分组发布内容发布内容发布内容开始发布分组<br />\n          开始发布分组发布内容发布内容发布内容开始发布分组<br />\n          开始发布分组发布内容发布内容发布内容开始发布分组<br />\n        </div>}/>\n      <TimelineItem\n        title={<div>开始执行<span className=\"time\">15:45:24</span></div>}\n        content=\"开始发布分组发布内容发布内容发布内容\"/>\n      <TimelineItem\n        title={<div>执行中<span className=\"time\">16:45:24</span></div>}\n        content=\"开始发布分组发布内容发布内容发布内容\"/>\n    </Timeline>\n  );\n}\nReactDOM.render(<TimelineDemo />, mountNode);\n````\n\n```css\n.base-demo {\n  padding-left: 100px;\n}\n.base-demo .mtd-timeline-item-title .time {\n  font-size: 12px;\n  color: rgba(0,0,0,0.87);\n  margin-left: 8px;\n}\n```\n",
      "---\norder: 3\ntitle: 内容展示方向\n---\n\n根据不同的业务场景，选择不同方向内容展示的时间轴。\n内容在时间轴点的左侧。\n\n````jsx\nimport { Timeline } from \"@ss/mtd-react\";\nconst TimelineItem = Timeline.Item;\n\nfunction TimelineDemo(){\n  return (\n    <Timeline mode=\"left\" className=\"left-demo\">\n      <TimelineItem\n        title={<div><span className=\"time\">12:45:24</span>开始发布分组</div>}\n        content=\"开始发布分组发布内容发布\"/>\n      <TimelineItem\n        title={<div><span className=\"time\">13:45:24</span>发布前检查</div>}\n        content=\"开始发布分组发布内容发布内容发布内容\"/>\n      <TimelineItem\n        title={<div><span className=\"time\">14:45:24</span>发布前检查通过</div>}\n        content=\"开始发布分组发布内容发布内容发布内容开始发布分组\"/>\n      <TimelineItem icon=\"error-circle-thick-o\"\n        title={<div><span className=\"time\">15:45:24</span>开始执行</div>}\n        content=\"开始发布分组发布内容发布内容发布内容\"/>\n      <TimelineItem\n        title={<div><span className=\"time\">16:45:24</span>执行中</div>}\n        content=\"开始发布分组发布内容发布内容发布内容\"/>\n    </Timeline>\n  );\n}\nReactDOM.render(<TimelineDemo />, mountNode);\n````\n\n```css\n.left-demo {\n  width: 60%;\n}\n.left-demo .mtd-timeline-item-title .time {\n  font-size: 12px;\n  color: rgba(0, 0, 0, 0.87);\n  margin-right: 8px;\n}\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/tag",
    "content": [
      "---\n---\norder: 4\ntitle: 预设颜色\n---\n\n我们添加了多种预设色彩的标签样式`theme`，用作不同场景使用。\n可选值：`green`、`orange`、`red`、`blue`、`gray`。默认`blue`。\n\n```jsx\nimport { Tag } from '@ss/mtd-react';\n\nconst TagDemo = () => {\n  return (\n    <div>\n      <div style={{ marginBottom: '20px' }}>\n        <Tag theme=\"green\" type=\"pure\">标签</Tag>\n        <Tag theme=\"orange\" type=\"pure\">标签</Tag>\n        <Tag theme=\"red\" type=\"pure\">标签</Tag>\n        <Tag type=\"pure\">标签</Tag>\n        <Tag theme=\"gray\" type=\"pure\">标签</Tag>\n      </div>\n      <div style={{ marginBottom: '20px' }}>\n        <Tag theme=\"green\">标签</Tag>\n        <Tag theme=\"orange\">标签</Tag>\n        <Tag theme=\"red\">标签</Tag>\n        <Tag>标签</Tag>\n        <Tag theme=\"gray\">标签</Tag>\n      </div>\n      <div>\n        <Tag theme=\"green\" type=\"text\">标签</Tag>\n        <Tag theme=\"orange\" type=\"text\">标签</Tag>\n        <Tag theme=\"red\" type=\"text\">标签</Tag>\n        <Tag type=\"text\">标签</Tag>\n        <Tag theme=\"gray\" type=\"text\">标签</Tag>\n      </div>\n    </div>\n  );\n}\nReactDOM.render(<TagDemo />, mountNode);\n```\n",
      "---\norder: 3\ntitle: 可删除\n---\n\n支持删除操作\n\n```jsx\nimport { Tag } from '@ss/mtd-react';\n\nconst TagDemo = () => {\n  const hanldeClick = (e) => {\n    console.log('Click tag', e);\n  };\n  const handleClose = (e) => {\n    console.log('Close tag', e);\n  };\n  return (\n    <div>\n      <Tag type=\"bordered\" closeable onClick={hanldeClick} onClose={handleClose}>\n        标签\n      </Tag>\n      <Tag type=\"pure\" closeable onClick={hanldeClick} onClose={handleClose}>\n        标签\n      </Tag>\n      <Tag type=\"text\" closeable onClick={hanldeClick} onClose={handleClose}>\n        标签\n      </Tag>\n    </div>\n  );\n}\nReactDOM.render(<TagDemo />, mountNode);\n```\n",
      "---\n---\norder: 5\ntitle: 自定义颜色\n---\n\n如果预设值不能满足你的需求，可以设置为具体的色值`color`。\n如：`purple`、`#ADFF2F`、`rgba(44, 130, 84, 0.5)`、`rgb(33, 210, 200)`、`hsl(360, 50%, 50%)`\n\n```jsx\nimport { Tag } from '@ss/mtd-react';\n\nconst TagDemo = () => {\n  return (\n    <div>\n      <div style={{ marginBottom: '20px' }}>\n        <Tag color=\"purple\" type=\"pure\">标签</Tag>\n        <Tag color=\"#ADFF2F\" type=\"pure\">标签</Tag>\n        <Tag color=\"rgba(44, 130, 84, 0.5)\" type=\"pure\">标签</Tag>\n        <Tag color=\"rgb(33, 210, 200)\" type=\"pure\">标签</Tag>\n        <Tag color=\"hsl(360, 50%, 50%)\" type=\"pure\">标签</Tag>\n      </div>\n      <div style={{ marginBottom: '20px' }}>\n        <Tag color=\"purple\">标签</Tag>\n        <Tag color=\"#ADFF2F\">标签</Tag>\n        <Tag color=\"rgba(44, 130, 84, 0.5)\">标签</Tag>\n        <Tag color=\"rgb(33, 210, 200)\">标签</Tag>\n        <Tag color=\"hsl(360, 50%, 50%)\">标签</Tag>\n      </div>\n      <div>\n        <Tag color=\"purple\" type=\"text\">标签</Tag>\n        <Tag color=\"#ADFF2F\" type=\"text\">标签</Tag>\n        <Tag color=\"rgba(44, 130, 84, 0.5)\" type=\"text\">标签</Tag>\n        <Tag color=\"rgb(33, 210, 200)\" type=\"text\">标签</Tag>\n        <Tag color=\"hsl(360, 50%, 50%)\" type=\"text\">标签</Tag>\n      </div>\n    </div>\n  );\n}\nReactDOM.render(<TagDemo />, mountNode);\n```\n",
      "---\norder: 1\ntitle: 大小\n---\n\n支持 small normal large\n\n```jsx\nimport { Tag } from '@ss/mtd-react';\n\nconst TagDemo = () => {\n  return (\n    <div>\n      <Tag size=\"small\">标签</Tag>\n      <Tag>标签</Tag>\n      <Tag size=\"large\">标签</Tag>\n    </div>\n  );\n}\nReactDOM.render(<TagDemo />, mountNode);\n```\n",
      "---\norder: 2\ntitle: 类型\n---\n\n支持 bordered pure text，默认bordered\n\n```jsx\nimport { Tag } from '@ss/mtd-react';\n\nconst TagDemo = () => {\n  return (\n    <div>\n      <Tag type=\"pure\">标签</Tag>\n      <Tag>标签</Tag>\n      <Tag type=\"text\">标签</Tag>\n    </div>\n  );\n}\nReactDOM.render(<TagDemo />, mountNode);\n```\n",
      "---\norder: 0\ntitle: 基本使用\n---\n\n基本使用。\n\n```jsx\nimport { Tag } from '@ss/mtd-react';\n\nconst TagDemo = () => {\n  return <Tag onClick={()=>{console.log(111222)}}>标签</Tag>;\n}\nReactDOM.render(<TagDemo />, mountNode);\n```\n\n```css\n.demos-tag .demo .preview {\n  text-align: center;\n}\n.demos-tag .demo .mtd-tag {\n  margin: 0 20px;\n}\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/affix",
    "content": [
      "---\norder: 1\ntitle: 固定在距离底部100px\n---\n\n```jsx\nimport { Affix, Button } from '@ss/mtd-react';\n\nconst Demo = () => {\n  const getTarget = () => {\n    return document.querySelector('.mtd-workspace-content')|| document.body;\n  };\n  \n  return (\n    <div style={{ textAlign: 'center' }}>\n      <div style={{ height: '600px' }} />\n      <Affix offsetBottom={100} getTarget={getTarget}>\n        <Button type=\"primary\">offset bottom 100</Button>\n      </Affix>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n",
      "---\norder: 0\ntitle: 固定在距离顶部100px\n---\n\n```jsx\nimport { Affix, Button } from '@ss/mtd-react';\n\nconst Demo = () => {\n  const getTarget = () => {\n    return document.querySelector('.mtd-workspace-content')|| document.body;\n  };\n\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <Affix offsetTop={100} getTarget={getTarget} onChange={status => console.log(status)}>\n        <Button type=\"primary\">offset top 100</Button>\n      </Affix>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/upload",
    "content": [
      "---\norder: 2\ntitle: 图片上传\n---\n\n点击上传图片，可使用钩子函数 onBeforeUpload 限制用户上传的图片大小等。\n\n```jsx\nimport { Upload, Filelist, Button, Icon, message } from '@ss/mtd-react';\nimport { useState } from 'react';\n\nconst Helper = Upload.helper;\n\nconst UploadDemo = () => {\n  const [loading, setLoading] = useState(false);\n  const [list, setList] = useState([\n    {\n      name: '图片demo.jpg',\n      url: 'https://fuss10.elemecdn.com/3/63/4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2/thumbnail/360x360/format/webp/quality/100'\n    }\n  ]);\n\n  const onBeforeUpload = (files) => {\n    if(Helper.getFileSizeWithMB(files[0]) > 1){\n      message.error({\n        message: '文件不能超过1M'\n      });\n      return false;\n    }\n  }\n\n  const onUpload = (file) => {\n    setLoading(true);\n  }\n\n  const onSuccess = (res, file) => {\n    res.name = file.name;\n    setList([...list, res]);\n    setLoading(false);\n  }\n\n  return (\n    <>\n      <Upload\n        className=\"upload-img-demo\"\n        action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\n        accept=\"image/png,image/jpeg\"\n        onBeforeUpload={onBeforeUpload}\n        onUpload={onUpload}\n        onSuccess={onSuccess}\n      >\n        <Icon className=\"upload-img-add\" type=\"add\" />\n        <div>{loading ? '上传中...': '上传图片'}</div>\n      </Upload>\n      <Filelist type=\"picture\" style={{ float: 'left'}}>\n        {list.map(item => <Filelist.Item key={item.url} name={item.name} url={item.url} />)}\n      </Filelist>\n    </>\n  )\n}\n\nReactDOM.render(<UploadDemo />, mountNode);\n```\n\n```css\n.upload-img-demo{\n  display: inline-block;\n  width: 80px;\n  height: 80px;\n  border: 1px dashed #d3d8e4;\n  border-radius: 4px;\n  color: #0a70f5;\n  font-size: 12px;\n  margin-left: 8px;\n  text-align: center;\n}\n.upload-img-demo:hover {\n  border-color: #0a70f5;\n}\n.upload-img-demo .upload-img-add {\n  margin: 20px 0px 4px 0px;\n  font-size: 20px;\n  color: #0a70f5;\n}\n```",
      "---\norder: 1\ntitle: 拖拽上传\n---\n\n根据场景空间、使用方便度的需要进行组件选择，点击、拖拽上传更好的提升了文件上传的准确性、便捷性，但占用空间较大。\n\n```jsx\nimport { Upload, Filelist, Button, Icon } from '@ss/mtd-react';\nimport { useState } from 'react';\n\nconst UploadDemo = () => {\n  const [loading, setLoading] = useState(false);\n  const [list, setList] = useState([]);\n\n  const onUpload = (files) => {\n    setLoading(true);\n  }\n\n  const onSuccess = (res, file) => {\n    res.name = file.name;\n    setList([...list, res]);\n    setLoading(false);\n  }\n\n  return (\n    <>\n      <Upload\n        className=\"draggable-upload\"\n        draggable\n        action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\n        onUpload={onUpload}\n        onSuccess={onSuccess}\n      >\n        <Icon type=\"export-o\" />\n        <div>点击或将文件拖拽到这里上传</div>\n      </Upload>\n      <Filelist style={{width: 300, marginTop: '10px'}}>\n        {list.map(item => <Filelist.Item key={item.url} name={item.name} url={item.url} />)}\n      </Filelist>\n    </>\n  )\n}\n\nReactDOM.render(<UploadDemo />, mountNode);\n```\n\n```css\n.draggable-upload {\n  width: 300px;\n  border: 1px dashed #D3D8E4;\n  background: #F7F8FC;\n  border-radius: 2px;\n  text-align: center;\n  padding-top: 30px;\n  padding-bottom: 30px;\n}\n.draggable-upload:hover {\n  border-color: #4E73FF;\n}\n.draggable-upload > .mtdicon {\n  margin: 10px;\n  font-size: 24px;\n}\n```",
      "---\norder: 0\ntitle: 基础使用\n---\n\n``` jsx\nimport { Upload, Filelist, Button } from '@ss/mtd-react';\nimport { useState } from 'react';\n\nconst UploadDemo = () => {\n  const [loading, setLoading] = useState(false);\n  const [list, setList] = useState([\n    {\n      name: 'food.jpg',\n      url: 'https://fuss10.elemecdn.com/3/63/4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2/thumbnail/360x360/format/webp/quality/100'\n    }\n  ]);\n\n  const onBeforeUpload = (files) => {\n    console.log('onBeforeUpload', files);\n  }\n\n  const onUpload = (files) => {\n    console.log('onUpload', files);\n    setLoading(true);\n  }\n\n  const onError = (error, file) => {\n    console.log('onError', error, file)\n    setLoading(false);\n  }\n\n  const onSuccess = (res, file) => {\n    res.name = file.name;\n    setList([...list, res]);\n    setLoading(false);\n  }\n\n  const onRemove = (index) => {\n    console.log('onRemove', index)\n  }\n\n  return (\n    <>\n      <Upload\n        action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\n        onBeforeUpload={onBeforeUpload}\n        onUpload={onUpload}\n        onError={onError}\n        onSuccess={onSuccess}\n        disableOnUploading\n      >\n        <Button icon=\"export-o\" loading={loading}>{loading ? '上传中...': '上传文件'}</Button>\n      </Upload>\n      <Filelist style={{width: 300, marginTop: '10px'}}>\n        {list.map(item => <Filelist.Item key={item.url} name={item.name} url={item.url} onRemove={onRemove} />)}\n      </Filelist>\n    </>\n  )\n}\n\nReactDOM.render(<UploadDemo />, mountNode);\n```\n"
    ]
  },
  {
    "url": "/mtd/react/components/grid",
    "content": [
      "---\norder: 5\ntitle: 对齐方式\n---\n\n通过 `flex` 布局来对分栏进行灵活的对齐。\n将 `type` 属性赋值为 'flex'，可以启用 flex 布局，并可通过 `justify` 属性来指定 start, center, end, space-between, space-around 其中的值来定义子元素的排版方式。\n\n````jsx\nimport { Row, Col } from \"@ss/mtd-react\";\n\nconst GridDemo = () => {\n  return (\n    <React.Fragment>\n      <Row type=\"flex\" className=\"row-bg\">\n        <Col span={6}><div className=\"grid-content bg-purple\"></div></Col>\n        <Col span={6}><div className=\"grid-content bg-purple-light\"></div></Col>\n        <Col span={6}><div className=\"grid-content bg-purple\"></div></Col>\n      </Row>\n      <Row type=\"flex\" className=\"row-bg\" justify=\"center\">\n        <Col span={6}><div className=\"grid-content bg-purple\"></div></Col>\n        <Col span={6}><div className=\"grid-content bg-purple-light\"></div></Col>\n        <Col span={6}><div className=\"grid-content bg-purple\"></div></Col>\n      </Row>\n      <Row type=\"flex\" className=\"row-bg\" justify=\"end\">\n        <Col span={6}><div className=\"grid-content bg-purple\"></div></Col>\n        <Col span={6}><div className=\"grid-content bg-purple-light\"></div></Col>\n        <Col span={6}><div className=\"grid-content bg-purple\"></div></Col>\n      </Row>\n      <Row type=\"flex\" className=\"row-bg\" justify=\"space-between\">\n        <Col span={6}><div className=\"grid-content bg-purple\"></div></Col>\n        <Col span={6}><div className=\"grid-content bg-purple-light\"></div></Col>\n        <Col span={6}><div className=\"grid-content bg-purple\"></div></Col>\n      </Row>\n      <Row type=\"flex\" className=\"row-bg\" justify=\"space-around\">\n        <Col span={6}><div className=\"grid-content bg-purple\"></div></Col>\n        <Col span={6}><div className=\"grid-content bg-purple-light\"></div></Col>\n        <Col span={6}><div className=\"grid-content bg-purple\"></div></Col>\n      </Row>\n    </React.Fragment>\n  )\n}\n\nReactDOM.render(<GridDemo />, mountNode);\n````",
      "---\norder: 3\ntitle: 混合布局\n---\n\n通过基础的 1/24 分栏任意扩展组合形成较为复杂的混合布局。\n\n````jsx\nimport { Row, Col } from \"@ss/mtd-react\";\n\nconst GridDemo = () => {\n  return (\n    <React.Fragment>\n      <Row gutter={20}>\n        <Col span={16}><div className=\"grid-content bg-purple\"></div></Col>\n        <Col span={8}><div className=\"grid-content bg-purple\"></div></Col>\n      </Row>\n      <Row gutter={20}>\n        <Col span={8}><div className=\"grid-content bg-purple\"></div></Col>\n        <Col span={8}><div className=\"grid-content bg-purple\"></div></Col>\n        <Col span={4}><div className=\"grid-content bg-purple\"></div></Col>\n        <Col span={4}><div className=\"grid-content bg-purple\"></div></Col>\n      </Row>\n      <Row gutter={20}>\n        <Col span={4}><div className=\"grid-content bg-purple\"></div></Col>\n        <Col span={16}><div className=\"grid-content bg-purple\"></div></Col>\n        <Col span={4}><div className=\"grid-content bg-purple\"></div></Col>\n      </Row>\n    </React.Fragment>\n  )\n}\n\nReactDOM.render(<GridDemo />, mountNode);\n````",
      "---\norder: 1\ntitle: 基础布局\n---\n\n通过 row 和 col 组件，并通过 col 组件的 `span` 属性我们就可以自由地组合布局。\n\n````jsx\nimport { Row, Col } from \"@ss/mtd-react\";\n\nconst GridDemo = () => {\n  return (\n    <React.Fragment>\n      <Row>\n        <Col span={24}>\n        <div className=\"grid-content bg-purple-dark\"></div>\n        </Col>\n      </Row>\n      <Row>\n        <Col span={12}>\n        <div className=\"grid-content bg-purple\"></div>\n        </Col>\n        <Col span={12}>\n        <div className=\"grid-content bg-purple-light\"></div>\n        </Col>\n      </Row>\n      <Row>\n        <Col span={8}>\n        <div className=\"grid-content bg-purple\"></div>\n        </Col>\n        <Col span={8}>\n        <div className=\"grid-content bg-purple-light\"></div>\n        </Col>\n        <Col span={8}>\n        <div className=\"grid-content bg-purple\"></div>\n        </Col>\n      </Row>\n      <Row>\n        <Col span={6}>\n        <div className=\"grid-content bg-purple\"></div>\n        </Col>\n        <Col span={6}>\n        <div className=\"grid-content bg-purple-light\"></div>\n        </Col>\n        <Col span={6}>\n        <div className=\"grid-content bg-purple\"></div>\n        </Col>\n        <Col span={6}>\n        <div className=\"grid-content bg-purple-light\"></div>\n        </Col>\n      </Row>\n      <Row>\n        <Col span={4}>\n        <div className=\"grid-content bg-purple\"></div>\n        </Col>\n        <Col span={4}>\n        <div className=\"grid-content bg-purple-light\"></div>\n        </Col>\n        <Col span={4}>\n        <div className=\"grid-content bg-purple\"></div>\n        </Col>\n        <Col span={4}>\n        <div className=\"grid-content bg-purple-light\"></div>\n        </Col>\n        <Col span={4}>\n        <div className=\"grid-content bg-purple\"></div>\n        </Col>\n        <Col span={4}>\n        <div className=\"grid-content bg-purple-light\"></div>\n        </Col>\n      </Row>\n    </React.Fragment>\n  )\n}\n\nReactDOM.render(<GridDemo />, mountNode);\n````\n\n```css\n.demos-grid .mtd-row {\n  margin-bottom: 20px;\n}\n.demos-grid .mtd-row:last-child {\n  margin-bottom: 0;\n}\n.demos-grid .mtd-col {\n  border-radius: 4px;\n}\n.demos-grid .bg-purple-dark {\n  background: #99a9bf;\n}\n.demos-grid .bg-purple {\n  background: #d3dce6;\n}\n.demos-grid .bg-purple-light {\n  background: #e5e9f2;\n}\n.demos-grid .grid-content {\n  border-radius: 4px;\n  min-height: 36px;\n}\n.demos-grid .row-bg {\n  padding: 10px 0;\n  background-color: #f9fafc;\n}\n```\n",
      "---\norder: 2\ntitle: 分栏间隔\n---\n\n分栏之间存在间隔。\nRow 组件 提供 `gutter` 属性来指定每一栏之间的间隔，默认间隔为 0。\n\n````jsx\nimport { Row, Col } from \"@ss/mtd-react\";\n\nconst GridDemo = () => {\n  return (\n    <Row gutter={20}>\n      <Col span={6}><div className=\"grid-content bg-purple\"></div></Col>\n      <Col span={6}><div className=\"grid-content bg-purple\"></div></Col>\n      <Col span={6}><div className=\"grid-content bg-purple\"></div></Col>\n      <Col span={6}><div className=\"grid-content bg-purple\"></div></Col>\n    </Row>\n  )\n}\n\nReactDOM.render(<GridDemo />, mountNode);\n````",
      "---\norder: 4\ntitle: 分栏偏移\n---\n\n支持偏移指定的栏数。\n通过制定 col 组件的 `offset` 属性可以指定分栏偏移的栏数。\n\n````jsx\nimport { Row, Col } from \"@ss/mtd-react\";\n\nconst GridDemo = () => {\n  return (\n    <React.Fragment>\n      <Row gutter={20}>\n        <Col span={6}><div className=\"grid-content bg-purple\"></div></Col>\n        <Col span={6} offset={6}><div className=\"grid-content bg-purple\"></div></Col>\n      </Row>\n      <Row gutter={20}>\n        <Col span={6} offset={6}><div className=\"grid-content bg-purple\"></div></Col>\n        <Col span={6} offset={6}><div className=\"grid-content bg-purple\"></div></Col>\n      </Row>\n      <Row gutter={20}>\n        <Col span={12} offset={6}><div className=\"grid-content bg-purple\"></div></Col>\n      </Row>\n    </React.Fragment>\n    )\n}\n\nReactDOM.render(<GridDemo />, mountNode);\n````",
      "---\norder: 6\ntitle: 响应式布局\n---\n\n参照了 Bootstrap 的 响应式设计，预设了六个响应尺寸：`xs`、`sm`、`md`、`lg`、`xl`、`xxl`。\n\n````jsx\nimport { Row, Col } from \"@ss/mtd-react\";\n\nconst GridDemo = () => {\n  return (\n    <Row gutter={10}>\n      <Col xs={8} sm={6} md={4} lg={3} xl={1}><div className=\"grid-content bg-purple\"></div></Col>\n      <Col xs={4} sm={6} md={8} lg={9} xl={11}><div className=\"grid-content bg-purple-light\"></div></Col>\n      <Col xs={4} sm={6} md={8} lg={9} xl={11}><div className=\"grid-content bg-purple\"></div></Col>\n      <Col xs={8} sm={6} md={4} lg={3} xl={1}><div className=\"grid-content bg-purple-light\"></div></Col>\n    </Row>\n  )\n}\n\nReactDOM.render(<GridDemo />, mountNode);\n````"
    ]
  },
  {
    "url": "/mtd/react/components/badge",
    "content": [
      "---\norder: 1\ntitle: 不显示数量\n---\n\n只需要引导用户注意变化，不需要关注数量。\n\n````jsx\nimport { Badge } from \"@ss/mtd-react\";\n\nfunction BadgeDemo(){\n    return (\n        <div style={{textAlign: 'center'}}>\n            <span className=\"example-badge\">\n                design v0.2\n                <Badge dot />\n            </span>\n\n            <Badge dot className=\"example-badge\">\n                <i className=\"mtdicon mtdicon-bell-o\" style={{fontSize: '34px', color: '#808AB1'}}></i>\n            </Badge>\n\n            <Badge style={{padding: '2px'}} value=\"new\" className=\"example-badge\">\n                <div>系统通知</div>\n            </Badge>\n\n            <Badge style={{padding: '2px'}} value=\"hot\">\n                <div>系统通知</div>\n            </Badge>\n        </div>\n    );\n}\nReactDOM.render(<BadgeDemo />, mountNode);\n````",
      "---\norder: 1\ntitle: 基本样式\n---\n\n````jsx\nimport { Badge } from \"@ss/mtd-react\";\n\nfunction BadgeDemo(){\n    return (\n        <div style={{textAlign: 'center'}}>\n            <Badge style={{padding: '2px'}} value={8} className=\"example-badge\">\n                <span>系统通知</span>\n            </Badge>\n            <Badge style={{padding: '2px'}} value={100} className=\"example-badge\" max={99}>\n                <span>系统通知</span>\n            </Badge>\n            <Badge value={12} className=\"example-badge\">\n                <i style={{fontSize: '34px', color: '#808AB1'}} className=\"mtdicon mtdicon-bell-o\"></i>\n            </Badge>\n            <Badge value={100} max={99} className=\"example-badge\">\n                <i style={{fontSize: '34px', color: '#808AB1'}} className=\"mtdicon mtdicon-bell-o\"></i>\n            </Badge>\n        </div>\n    );\n}\nReactDOM.render(<BadgeDemo />, mountNode);\n````\n```css\n.example-badge {\n    margin-right: 80px;\n    vertical-align: middle;\n}\n```",
      "---\norder: 1\ntitle: 组合样式\n---\n\n````jsx\nimport { Badge, Button } from \"@ss/mtd-react\";\n\nfunction BadgeDemo(){\n    return (\n        <div style={{textAlign: 'center'}}>\n            <span className=\"example-badge\">\n                <Badge dot>\n                    <i className=\"mtdicon mtdicon-theme\"></i>\n                </Badge>&nbsp;&nbsp;主题\n            </span>\n            <Badge value={12}>\n                <Button icon='mtdicon mtdicon-cart-o'>\n                    购物车\n                </Button>\n            </Badge>\n        </div>\n    );\n}\nReactDOM.render(<BadgeDemo />, mountNode);\n````",
      "---\norder: 1\ntitle: 位置\n---\n\n````jsx\nimport { Badge } from \"@ss/mtd-react\";\n\nfunction BadgeDemo(){\n    return (\n        <div style={{textAlign: 'center'}}>\n            <Badge style={{padding: '2px'}} value={8} className=\"example-badge\">\n                <span>系统通知</span>\n            </Badge>\n            <span className=\"example-badge\" style={{display: 'inline-block'}}>\n                <span style={{display: 'inline-block', padding: '2px', verticalAlign: 'middle'}}>系统通知</span>\n                <Badge value={12} style={{verticalAlign: 'middle', lineHeight: '1'}}></Badge>\n            </span>\n            <Badge value={12} className=\"example-badge\">\n                <i style={{fontSize: '34px', color: '#808AB1'}} className=\"mtdicon mtdicon-bell-o\"></i>\n            </Badge>\n            <span style={{display: 'inline-block'}}>\n                <span style={{display: 'inline-block',verticalAlign: 'middle'}}>\n                     <i style={{fontSize: '34px', color: '#808AB1'}} className=\"mtdicon mtdicon-bell-o\"></i>\n                </span>\n                <Badge value={12} style={{verticalAlign: 'middle', lineHeight: '1'}}></Badge>\n            </span>\n        </div>\n    );\n}\nReactDOM.render(<BadgeDemo />, mountNode);\n````"
    ]
  }
]
